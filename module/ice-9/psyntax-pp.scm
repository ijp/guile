(eval-when (compile) (set-current-module (resolve-module (quote (guile)))))
(if #f #f)

(letrec*
  ((#{top-level-eval-hook 4294}#
     (lambda (#{x 28286}# #{mod 28287}#)
       (primitive-eval #{x 28286}#)))
   (#{maybe-name-value! 4299}#
     (lambda (#{name 16686}# #{val 16687}#)
       (if (if (struct? #{val 16687}#)
             (eq? (struct-vtable #{val 16687}#)
                  (vector-ref %expanded-vtables 13))
             #f)
         (let ((#{meta 16694}# (struct-ref #{val 16687}# 1)))
           (if (not (assq 'name #{meta 16694}#))
             (let ((#{v 16699}#
                     (cons (cons 'name #{name 16686}#) #{meta 16694}#)))
               (struct-set! #{val 16687}# 1 #{v 16699}#)))))))
   (#{build-application 4301}#
     (lambda (#{source 16411}#
              #{fun-exp 16412}#
              #{arg-exps 16413}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 11)
         #{source 16411}#
         #{fun-exp 16412}#
         #{arg-exps 16413}#)))
   (#{build-conditional 4302}#
     (lambda (#{source 16419}#
              #{test-exp 16420}#
              #{then-exp 16421}#
              #{else-exp 16422}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 10)
         #{source 16419}#
         #{test-exp 16420}#
         #{then-exp 16421}#
         #{else-exp 16422}#)))
   (#{build-dynlet 4303}#
     (lambda (#{source 16429}#
              #{fluids 16430}#
              #{vals 16431}#
              #{body 16432}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 17)
         #{source 16429}#
         #{fluids 16430}#
         #{vals 16431}#
         #{body 16432}#)))
   (#{build-lexical-reference 4304}#
     (lambda (#{type 28288}#
              #{source 28289}#
              #{name 28290}#
              #{var 28291}#)
       (make-struct/no-tail
         (vector-ref %expanded-vtables 3)
         #{source 28289}#
         #{name 28290}#
         #{var 28291}#)))
   (#{build-lexical-assignment 4305}#
     (lambda (#{source 16439}#
              #{name 16440}#
              #{var 16441}#
              #{exp 16442}#)
       (begin
         (if (if (struct? #{exp 16442}#)
               (eq? (struct-vtable #{exp 16442}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16458}# (struct-ref #{exp 16442}# 1)))
             (if (not (assq 'name #{meta 16458}#))
               (let ((#{v 16465}#
                       (cons (cons 'name #{name 16440}#) #{meta 16458}#)))
                 (struct-set! #{exp 16442}# 1 #{v 16465}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 4)
           #{source 16439}#
           #{name 16440}#
           #{var 16441}#
           #{exp 16442}#))))
   (#{analyze-variable 4306}#
     (lambda (#{mod 28297}#
              #{var 28298}#
              #{modref-cont 28299}#
              #{bare-cont 28300}#)
       (if (not #{mod 28297}#)
         (#{bare-cont 28300}# #{var 28298}#)
         (let ((#{kind 28301}# (car #{mod 28297}#))
               (#{mod 28302}# (cdr #{mod 28297}#)))
           (if (eqv? #{kind 28301}# 'public)
             (#{modref-cont 28299}#
               #{mod 28302}#
               #{var 28298}#
               #t)
             (if (eqv? #{kind 28301}# 'private)
               (if (not (equal?
                          #{mod 28302}#
                          (module-name (current-module))))
                 (#{modref-cont 28299}#
                   #{mod 28302}#
                   #{var 28298}#
                   #f)
                 (#{bare-cont 28300}# #{var 28298}#))
               (if (eqv? #{kind 28301}# 'bare)
                 (#{bare-cont 28300}# #{var 28298}#)
                 (if (eqv? #{kind 28301}# 'hygiene)
                   (if (if (not (equal?
                                  #{mod 28302}#
                                  (module-name (current-module))))
                         (module-variable
                           (resolve-module #{mod 28302}#)
                           #{var 28298}#)
                         #f)
                     (#{modref-cont 28299}#
                       #{mod 28302}#
                       #{var 28298}#
                       #f)
                     (#{bare-cont 28300}# #{var 28298}#))
                   (syntax-violation
                     #f
                     "bad module kind"
                     #{var 28298}#
                     #{mod 28302}#)))))))))
   (#{build-global-reference 4307}#
     (lambda (#{source 28317}# #{var 28318}# #{mod 28319}#)
       (#{analyze-variable 4306}#
         #{mod 28319}#
         #{var 28318}#
         (lambda (#{mod 28322}# #{var 28323}# #{public? 28324}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 5)
             #{source 28317}#
             #{mod 28322}#
             #{var 28323}#
             #{public? 28324}#))
         (lambda (#{var 28332}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 7)
             #{source 28317}#
             #{var 28332}#)))))
   (#{build-global-assignment 4308}#
     (lambda (#{source 16474}#
              #{var 16475}#
              #{exp 16476}#
              #{mod 16477}#)
       (begin
         (if (if (struct? #{exp 16476}#)
               (eq? (struct-vtable #{exp 16476}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 16493}# (struct-ref #{exp 16476}# 1)))
             (if (not (assq 'name #{meta 16493}#))
               (let ((#{v 16500}#
                       (cons (cons 'name #{var 16475}#) #{meta 16493}#)))
                 (struct-set! #{exp 16476}# 1 #{v 16500}#)))))
         (#{analyze-variable 4306}#
           #{mod 16477}#
           #{var 16475}#
           (lambda (#{mod 16505}# #{var 16506}# #{public? 16507}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 6)
               #{source 16474}#
               #{mod 16505}#
               #{var 16506}#
               #{public? 16507}#
               #{exp 16476}#))
           (lambda (#{var 16515}#)
             (make-struct/no-tail
               (vector-ref %expanded-vtables 8)
               #{source 16474}#
               #{var 16515}#
               #{exp 16476}#))))))
   (#{build-global-definition 4309}#
     (lambda (#{source 28338}# #{var 28339}# #{exp 28340}#)
       (begin
         (if (if (struct? #{exp 28340}#)
               (eq? (struct-vtable #{exp 28340}#)
                    (vector-ref %expanded-vtables 13))
               #f)
           (let ((#{meta 28356}# (struct-ref #{exp 28340}# 1)))
             (if (not (assq 'name #{meta 28356}#))
               (let ((#{v 28363}#
                       (cons (cons 'name #{var 28339}#) #{meta 28356}#)))
                 (struct-set! #{exp 28340}# 1 #{v 28363}#)))))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 9)
           #{source 28338}#
           #{var 28339}#
           #{exp 28340}#))))
   (#{build-simple-lambda 4310}#
     (lambda (#{src 16521}#
              #{req 16522}#
              #{rest 16523}#
              #{vars 16524}#
              #{meta 16525}#
              #{exp 16526}#)
       (let ((#{body 16532}#
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 14)
                 #{src 16521}#
                 #{req 16522}#
                 #f
                 #{rest 16523}#
                 #f
                 '()
                 #{vars 16524}#
                 #{exp 16526}#
                 #f)))
         (make-struct/no-tail
           (vector-ref %expanded-vtables 13)
           #{src 16521}#
           #{meta 16525}#
           #{body 16532}#))))
   (#{build-sequence 4315}#
     (lambda (#{src 28371}# #{exps 28372}#)
       (if (null? (cdr #{exps 28372}#))
         (car #{exps 28372}#)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 12)
           #{src 28371}#
           #{exps 28372}#))))
   (#{build-let 4316}#
     (lambda (#{src 16544}#
              #{ids 16545}#
              #{vars 16546}#
              #{val-exps 16547}#
              #{body-exp 16548}#)
       (begin
         (for-each
           #{maybe-name-value! 4299}#
           #{ids 16545}#
           #{val-exps 16547}#)
         (if (null? #{vars 16546}#)
           #{body-exp 16548}#
           (make-struct/no-tail
             (vector-ref %expanded-vtables 15)
             #{src 16544}#
             #{ids 16545}#
             #{vars 16546}#
             #{val-exps 16547}#
             #{body-exp 16548}#)))))
   (#{build-named-let 4317}#
     (lambda (#{src 16572}#
              #{ids 16573}#
              #{vars 16574}#
              #{val-exps 16575}#
              #{body-exp 16576}#)
       (let ((#{f 16577}# (car #{vars 16574}#))
             (#{f-name 16578}# (car #{ids 16573}#))
             (#{vars 16579}# (cdr #{vars 16574}#))
             (#{ids 16580}# (cdr #{ids 16573}#)))
         (let ((#{proc 16581}#
                 (let ((#{body 16601}#
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 14)
                           #{src 16572}#
                           #{ids 16580}#
                           #f
                           #f
                           #f
                           '()
                           #{vars 16579}#
                           #{body-exp 16576}#
                           #f)))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 13)
                     #{src 16572}#
                     '()
                     #{body 16601}#))))
           (begin
             (if (if (struct? #{proc 16581}#)
                   (eq? (struct-vtable #{proc 16581}#)
                        (vector-ref %expanded-vtables 13))
                   #f)
               (let ((#{meta 16625}# (struct-ref #{proc 16581}# 1)))
                 (if (not (assq 'name #{meta 16625}#))
                   (let ((#{v 16632}#
                           (cons (cons 'name #{f-name 16578}#)
                                 #{meta 16625}#)))
                     (struct-set! #{proc 16581}# 1 #{v 16632}#)))))
             (for-each
               #{maybe-name-value! 4299}#
               #{ids 16580}#
               #{val-exps 16575}#)
             (let ((#{names 16656}# (list #{f-name 16578}#))
                   (#{gensyms 16657}# (list #{f 16577}#))
                   (#{vals 16658}# (list #{proc 16581}#))
                   (#{body 16659}#
                     (let ((#{fun-exp 16663}#
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 3)
                               #{src 16572}#
                               #{f-name 16578}#
                               #{f 16577}#)))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 11)
                         #{src 16572}#
                         #{fun-exp 16663}#
                         #{val-exps 16575}#))))
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 16)
                 #{src 16572}#
                 #f
                 #{names 16656}#
                 #{gensyms 16657}#
                 #{vals 16658}#
                 #{body 16659}#)))))))
   (#{build-letrec 4318}#
     (lambda (#{src 16679}#
              #{in-order? 16680}#
              #{ids 16681}#
              #{vars 16682}#
              #{val-exps 16683}#
              #{body-exp 16684}#)
       (if (null? #{vars 16682}#)
         #{body-exp 16684}#
         (begin
           (for-each
             #{maybe-name-value! 4299}#
             #{ids 16681}#
             #{val-exps 16683}#)
           (make-struct/no-tail
             (vector-ref %expanded-vtables 16)
             #{src 16679}#
             #{in-order? 16680}#
             #{ids 16681}#
             #{vars 16682}#
             #{val-exps 16683}#
             #{body-exp 16684}#)))))
   (#{source-annotation 4327}#
     (lambda (#{x 16710}#)
       (if (if (vector? #{x 16710}#)
             (if (= (vector-length #{x 16710}#) 4)
               (eq? (vector-ref #{x 16710}# 0) 'syntax-object)
               #f)
             #f)
         (#{source-annotation 4327}#
           (vector-ref #{x 16710}# 1))
         (if (pair? #{x 16710}#)
           (let ((#{props 16725}# (source-properties #{x 16710}#)))
             (if (pair? #{props 16725}#) #{props 16725}# #f))
           #f))))
   (#{extend-env 4328}#
     (lambda (#{labels 16727}# #{bindings 16728}# #{r 16729}#)
       (if (null? #{labels 16727}#)
         #{r 16729}#
         (#{extend-env 4328}#
           (cdr #{labels 16727}#)
           (cdr #{bindings 16728}#)
           (cons (cons (car #{labels 16727}#)
                       (car #{bindings 16728}#))
                 #{r 16729}#)))))
   (#{extend-var-env 4329}#
     (lambda (#{labels 16730}# #{vars 16731}# #{r 16732}#)
       (if (null? #{labels 16730}#)
         #{r 16732}#
         (#{extend-var-env 4329}#
           (cdr #{labels 16730}#)
           (cdr #{vars 16731}#)
           (cons (cons (car #{labels 16730}#)
                       (cons 'lexical (car #{vars 16731}#)))
                 #{r 16732}#)))))
   (#{macros-only-env 4330}#
     (lambda (#{r 16733}#)
       (if (null? #{r 16733}#)
         '()
         (let ((#{a 16734}# (car #{r 16733}#)))
           (if (eq? (car (cdr #{a 16734}#)) 'macro)
             (cons #{a 16734}#
                   (#{macros-only-env 4330}# (cdr #{r 16733}#)))
             (#{macros-only-env 4330}# (cdr #{r 16733}#)))))))
   (#{global-extend 4332}#
     (lambda (#{type 16736}# #{sym 16737}# #{val 16738}#)
       (module-define!
         (current-module)
         #{sym 16737}#
         (make-syntax-transformer
           #{sym 16737}#
           #{type 16736}#
           #{val 16738}#))))
   (#{id? 4334}#
     (lambda (#{x 10570}#)
       (if (symbol? #{x 10570}#)
         #t
         (if (if (vector? #{x 10570}#)
               (if (= (vector-length #{x 10570}#) 4)
                 (eq? (vector-ref #{x 10570}# 0) 'syntax-object)
                 #f)
               #f)
           (symbol? (vector-ref #{x 10570}# 1))
           #f))))
   (#{gen-labels 4337}#
     (lambda (#{ls 16748}#)
       (if (null? #{ls 16748}#)
         '()
         (cons (symbol->string (gensym "i"))
               (#{gen-labels 4337}# (cdr #{ls 16748}#))))))
   (#{make-binding-wrap 4348}#
     (lambda (#{ids 16752}# #{labels 16753}# #{w 16754}#)
       (if (null? #{ids 16752}#)
         #{w 16754}#
         (cons (car #{w 16754}#)
               (cons (let ((#{labelvec 16755}#
                             (list->vector #{labels 16753}#)))
                       (let ((#{n 16756}# (vector-length #{labelvec 16755}#)))
                         (let ((#{symnamevec 16757}# (make-vector #{n 16756}#))
                               (#{marksvec 16758}# (make-vector #{n 16756}#)))
                           (begin
                             (letrec*
                               ((#{f 16759}#
                                  (lambda (#{ids 16762}# #{i 16763}#)
                                    (if (not (null? #{ids 16762}#))
                                      (call-with-values
                                        (lambda ()
                                          (let ((#{x 16766}#
                                                  (car #{ids 16762}#)))
                                            (if (if (vector? #{x 16766}#)
                                                  (if (= (vector-length
                                                           #{x 16766}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{x 16766}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (values
                                                (vector-ref #{x 16766}# 1)
                                                (let ((#{m1 16782}#
                                                        (car #{w 16754}#))
                                                      (#{m2 16783}#
                                                        (car (vector-ref
                                                               #{x 16766}#
                                                               2))))
                                                  (if (null? #{m2 16783}#)
                                                    #{m1 16782}#
                                                    (append
                                                      #{m1 16782}#
                                                      #{m2 16783}#))))
                                              (values
                                                #{x 16766}#
                                                (car #{w 16754}#)))))
                                        (lambda (#{symname 16803}#
                                                 #{marks 16804}#)
                                          (begin
                                            (vector-set!
                                              #{symnamevec 16757}#
                                              #{i 16763}#
                                              #{symname 16803}#)
                                            (vector-set!
                                              #{marksvec 16758}#
                                              #{i 16763}#
                                              #{marks 16804}#)
                                            (#{f 16759}#
                                              (cdr #{ids 16762}#)
                                              (#{1+}# #{i 16763}#)))))))))
                               (#{f 16759}# #{ids 16752}# 0))
                             (vector
                               'ribcage
                               #{symnamevec 16757}#
                               #{marksvec 16758}#
                               #{labelvec 16755}#)))))
                     (cdr #{w 16754}#))))))
   (#{join-wraps 4350}#
     (lambda (#{w1 16813}# #{w2 16814}#)
       (let ((#{m1 16815}# (car #{w1 16813}#))
             (#{s1 16816}# (cdr #{w1 16813}#)))
         (if (null? #{m1 16815}#)
           (if (null? #{s1 16816}#)
             #{w2 16814}#
             (cons (car #{w2 16814}#)
                   (let ((#{m2 16823}# (cdr #{w2 16814}#)))
                     (if (null? #{m2 16823}#)
                       #{s1 16816}#
                       (append #{s1 16816}# #{m2 16823}#)))))
           (cons (let ((#{m2 16832}# (car #{w2 16814}#)))
                   (if (null? #{m2 16832}#)
                     #{m1 16815}#
                     (append #{m1 16815}# #{m2 16832}#)))
                 (let ((#{m2 16841}# (cdr #{w2 16814}#)))
                   (if (null? #{m2 16841}#)
                     #{s1 16816}#
                     (append #{s1 16816}# #{m2 16841}#))))))))
   (#{same-marks? 4352}#
     (lambda (#{x 16846}# #{y 16847}#)
       (if (eq? #{x 16846}# #{y 16847}#)
         (eq? #{x 16846}# #{y 16847}#)
         (if (not (null? #{x 16846}#))
           (if (not (null? #{y 16847}#))
             (if (eq? (car #{x 16846}#) (car #{y 16847}#))
               (#{same-marks? 4352}#
                 (cdr #{x 16846}#)
                 (cdr #{y 16847}#))
               #f)
             #f)
           #f))))
   (#{id-var-name 4353}#
     (lambda (#{id 16855}# #{w 16856}#)
       (letrec*
         ((#{search 16857}#
            (lambda (#{sym 16918}# #{subst 16919}# #{marks 16920}#)
              (if (null? #{subst 16919}#)
                (values #f #{marks 16920}#)
                (let ((#{fst 16921}# (car #{subst 16919}#)))
                  (if (eq? #{fst 16921}# 'shift)
                    (#{search 16857}#
                      #{sym 16918}#
                      (cdr #{subst 16919}#)
                      (cdr #{marks 16920}#))
                    (let ((#{symnames 16923}# (vector-ref #{fst 16921}# 1)))
                      (if (vector? #{symnames 16923}#)
                        (let ((#{n 16935}# (vector-length #{symnames 16923}#)))
                          (letrec*
                            ((#{f 16936}#
                               (lambda (#{i 16938}#)
                                 (if (= #{i 16938}# #{n 16935}#)
                                   (#{search 16857}#
                                     #{sym 16918}#
                                     (cdr #{subst 16919}#)
                                     #{marks 16920}#)
                                   (if (if (eq? (vector-ref
                                                  #{symnames 16923}#
                                                  #{i 16938}#)
                                                #{sym 16918}#)
                                         (#{same-marks? 4352}#
                                           #{marks 16920}#
                                           (vector-ref
                                             (vector-ref #{fst 16921}# 2)
                                             #{i 16938}#))
                                         #f)
                                     (values
                                       (vector-ref
                                         (vector-ref #{fst 16921}# 3)
                                         #{i 16938}#)
                                       #{marks 16920}#)
                                     (#{f 16936}# (#{1+}# #{i 16938}#)))))))
                            (#{f 16936}# 0)))
                        (letrec*
                          ((#{f 16971}#
                             (lambda (#{symnames 16973}# #{i 16974}#)
                               (if (null? #{symnames 16973}#)
                                 (#{search 16857}#
                                   #{sym 16918}#
                                   (cdr #{subst 16919}#)
                                   #{marks 16920}#)
                                 (if (if (eq? (car #{symnames 16973}#)
                                              #{sym 16918}#)
                                       (#{same-marks? 4352}#
                                         #{marks 16920}#
                                         (list-ref
                                           (vector-ref #{fst 16921}# 2)
                                           #{i 16974}#))
                                       #f)
                                   (values
                                     (list-ref
                                       (vector-ref #{fst 16921}# 3)
                                       #{i 16974}#)
                                     #{marks 16920}#)
                                   (#{f 16971}#
                                     (cdr #{symnames 16973}#)
                                     (#{1+}# #{i 16974}#)))))))
                          (#{f 16971}# #{symnames 16923}# 0))))))))))
         (if (symbol? #{id 16855}#)
           (let ((#{t 16860}#
                   (#{search 16857}#
                     #{id 16855}#
                     (cdr #{w 16856}#)
                     (car #{w 16856}#))))
             (if #{t 16860}# #{t 16860}# #{id 16855}#))
           (if (if (vector? #{id 16855}#)
                 (if (= (vector-length #{id 16855}#) 4)
                   (eq? (vector-ref #{id 16855}# 0) 'syntax-object)
                   #f)
                 #f)
             (let ((#{id 16875}# (vector-ref #{id 16855}# 1))
                   (#{w1 16876}# (vector-ref #{id 16855}# 2)))
               (let ((#{marks 16877}#
                       (let ((#{m1 16887}# (car #{w 16856}#))
                             (#{m2 16888}# (car #{w1 16876}#)))
                         (if (null? #{m2 16888}#)
                           #{m1 16887}#
                           (append #{m1 16887}# #{m2 16888}#)))))
                 (call-with-values
                   (lambda ()
                     (#{search 16857}#
                       #{id 16875}#
                       (cdr #{w 16856}#)
                       #{marks 16877}#))
                   (lambda (#{new-id 16904}# #{marks 16905}#)
                     (if #{new-id 16904}#
                       #{new-id 16904}#
                       (let ((#{t 16913}#
                               (#{search 16857}#
                                 #{id 16875}#
                                 (cdr #{w1 16876}#)
                                 #{marks 16905}#)))
                         (if #{t 16913}# #{t 16913}# #{id 16875}#)))))))
             (syntax-violation
               'id-var-name
               "invalid id"
               #{id 16855}#))))))
   (#{valid-bound-ids? 4356}#
     (lambda (#{ids 16996}#)
       (if (letrec*
             ((#{all-ids? 16997}#
                (lambda (#{ids 17159}#)
                  (if (null? #{ids 17159}#)
                    (null? #{ids 17159}#)
                    (if (let ((#{x 17170}# (car #{ids 17159}#)))
                          (if (symbol? #{x 17170}#)
                            #t
                            (if (if (vector? #{x 17170}#)
                                  (if (= (vector-length #{x 17170}#) 4)
                                    (eq? (vector-ref #{x 17170}# 0)
                                         'syntax-object)
                                    #f)
                                  #f)
                              (symbol? (vector-ref #{x 17170}# 1))
                              #f)))
                      (#{all-ids? 16997}# (cdr #{ids 17159}#))
                      #f)))))
             (#{all-ids? 16997}# #{ids 16996}#))
         (#{distinct-bound-ids? 4357}# #{ids 16996}#)
         #f)))
   (#{distinct-bound-ids? 4357}#
     (lambda (#{ids 17302}#)
       (letrec*
         ((#{distinct? 17303}#
            (lambda (#{ids 17419}#)
              (if (null? #{ids 17419}#)
                (null? #{ids 17419}#)
                (if (not (#{bound-id-member? 4358}#
                           (car #{ids 17419}#)
                           (cdr #{ids 17419}#)))
                  (#{distinct? 17303}# (cdr #{ids 17419}#))
                  #f)))))
         (#{distinct? 17303}# #{ids 17302}#))))
   (#{bound-id-member? 4358}#
     (lambda (#{x 17639}# #{list 17640}#)
       (if (not (null? #{list 17640}#))
         (let ((#{t 17641}#
                 (let ((#{j 17722}# (car #{list 17640}#)))
                   (if (if (if (vector? #{x 17639}#)
                             (if (= (vector-length #{x 17639}#) 4)
                               (eq? (vector-ref #{x 17639}# 0) 'syntax-object)
                               #f)
                             #f)
                         (if (vector? #{j 17722}#)
                           (if (= (vector-length #{j 17722}#) 4)
                             (eq? (vector-ref #{j 17722}# 0) 'syntax-object)
                             #f)
                           #f)
                         #f)
                     (if (eq? (vector-ref #{x 17639}# 1)
                              (vector-ref #{j 17722}# 1))
                       (#{same-marks? 4352}#
                         (car (vector-ref #{x 17639}# 2))
                         (car (vector-ref #{j 17722}# 2)))
                       #f)
                     (eq? #{x 17639}# #{j 17722}#)))))
           (if #{t 17641}#
             #{t 17641}#
             (#{bound-id-member? 4358}#
               #{x 17639}#
               (cdr #{list 17640}#))))
         #f)))
   (#{wrap 4359}#
     (lambda (#{x 17766}# #{w 17767}# #{defmod 17768}#)
       (if (if (null? (car #{w 17767}#))
             (null? (cdr #{w 17767}#))
             #f)
         #{x 17766}#
         (if (if (vector? #{x 17766}#)
               (if (= (vector-length #{x 17766}#) 4)
                 (eq? (vector-ref #{x 17766}# 0) 'syntax-object)
                 #f)
               #f)
           (let ((#{expression 17782}# (vector-ref #{x 17766}# 1))
                 (#{wrap 17783}#
                   (#{join-wraps 4350}#
                     #{w 17767}#
                     (vector-ref #{x 17766}# 2)))
                 (#{module 17784}# (vector-ref #{x 17766}# 3)))
             (vector
               'syntax-object
               #{expression 17782}#
               #{wrap 17783}#
               #{module 17784}#))
           (if (null? #{x 17766}#)
             #{x 17766}#
             (vector
               'syntax-object
               #{x 17766}#
               #{w 17767}#
               #{defmod 17768}#))))))
   (#{source-wrap 4360}#
     (lambda (#{x 17801}#
              #{w 17802}#
              #{s 17803}#
              #{defmod 17804}#)
       (#{wrap 4359}#
         (begin
           (if (if (pair? #{x 17801}#) #{s 17803}# #f)
             (set-source-properties! #{x 17801}# #{s 17803}#))
           #{x 17801}#)
         #{w 17802}#
         #{defmod 17804}#)))
   (#{chi-sequence 4361}#
     (lambda (#{body 28377}#
              #{r 28378}#
              #{w 28379}#
              #{s 28380}#
              #{mod 28381}#)
       (#{build-sequence 4315}#
         #{s 28380}#
         (letrec*
           ((#{dobody 28466}#
              (lambda (#{body 28546}#
                       #{r 28547}#
                       #{w 28548}#
                       #{mod 28549}#)
                (if (null? #{body 28546}#)
                  '()
                  (let ((#{first 28550}#
                          (#{chi 4366}#
                            (car #{body 28546}#)
                            #{r 28547}#
                            #{w 28548}#
                            #{mod 28549}#)))
                    (cons #{first 28550}#
                          (#{dobody 28466}#
                            (cdr #{body 28546}#)
                            #{r 28547}#
                            #{w 28548}#
                            #{mod 28549}#)))))))
           (#{dobody 28466}#
             #{body 28377}#
             #{r 28378}#
             #{w 28379}#
             #{mod 28381}#)))))
   (#{chi-top-sequence 4362}#
     (lambda (#{body 17822}#
              #{r 17823}#
              #{w 17824}#
              #{s 17825}#
              #{m 17826}#
              #{esew 17827}#
              #{mod 17828}#)
       (letrec*
         ((#{scan 17829}#
            (lambda (#{body 17960}#
                     #{r 17961}#
                     #{w 17962}#
                     #{s 17963}#
                     #{m 17964}#
                     #{esew 17965}#
                     #{mod 17966}#
                     #{exps 17967}#)
              (if (null? #{body 17960}#)
                #{exps 17967}#
                (call-with-values
                  (lambda ()
                    (call-with-values
                      (lambda ()
                        (let ((#{e 17968}# (car #{body 17960}#)))
                          (#{syntax-type 4365}#
                            #{e 17968}#
                            #{r 17961}#
                            #{w 17962}#
                            (let ((#{t 17972}#
                                    (#{source-annotation 4327}# #{e 17968}#)))
                              (if #{t 17972}# #{t 17972}# #{s 17963}#))
                            #f
                            #{mod 17966}#
                            #f)))
                      (lambda (#{type 18232}#
                               #{value 18233}#
                               #{e 18234}#
                               #{w 18235}#
                               #{s 18236}#
                               #{mod 18237}#)
                        (if (eqv? #{type 18232}# 'begin-form)
                          (let ((#{tmp 18242}#
                                  ($sc-dispatch #{e 18234}# '(_))))
                            (if #{tmp 18242}#
                              (@apply (lambda () #{exps 17967}#) #{tmp 18242}#)
                              (let ((#{tmp 18246}#
                                      ($sc-dispatch
                                        #{e 18234}#
                                        '(_ any . each-any))))
                                (if #{tmp 18246}#
                                  (@apply
                                    (lambda (#{e1 18250}# #{e2 18251}#)
                                      (#{scan 17829}#
                                        (cons #{e1 18250}# #{e2 18251}#)
                                        #{r 17961}#
                                        #{w 18235}#
                                        #{s 18236}#
                                        #{m 17964}#
                                        #{esew 17965}#
                                        #{mod 18237}#
                                        #{exps 17967}#))
                                    #{tmp 18246}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18234}#)))))
                          (if (eqv? #{type 18232}# 'local-syntax-form)
                            (#{chi-local-syntax 4371}#
                              #{value 18233}#
                              #{e 18234}#
                              #{r 17961}#
                              #{w 18235}#
                              #{s 18236}#
                              #{mod 18237}#
                              (lambda (#{body 18266}#
                                       #{r 18267}#
                                       #{w 18268}#
                                       #{s 18269}#
                                       #{mod 18270}#)
                                (#{scan 17829}#
                                  #{body 18266}#
                                  #{r 18267}#
                                  #{w 18268}#
                                  #{s 18269}#
                                  #{m 17964}#
                                  #{esew 17965}#
                                  #{mod 18270}#
                                  #{exps 17967}#)))
                            (if (eqv? #{type 18232}# 'eval-when-form)
                              (let ((#{tmp 18275}#
                                      ($sc-dispatch
                                        #{e 18234}#
                                        '(_ each-any any . each-any))))
                                (if #{tmp 18275}#
                                  (@apply
                                    (lambda (#{x 18279}#
                                             #{e1 18280}#
                                             #{e2 18281}#)
                                      (let ((#{when-list 18282}#
                                              (#{chi-when-list 4364}#
                                                #{e 18234}#
                                                #{x 18279}#
                                                #{w 18235}#))
                                            (#{body 18283}#
                                              (cons #{e1 18280}#
                                                    #{e2 18281}#)))
                                        (if (eq? #{m 17964}# 'e)
                                          (if (memq 'eval #{when-list 18282}#)
                                            (#{scan 17829}#
                                              #{body 18283}#
                                              #{r 17961}#
                                              #{w 18235}#
                                              #{s 18236}#
                                              (if (memq 'expand
                                                        #{when-list 18282}#)
                                                'c&e
                                                'e)
                                              '(eval)
                                              #{mod 18237}#
                                              #{exps 17967}#)
                                            (begin
                                              (if (memq 'expand
                                                        #{when-list 18282}#)
                                                (let ((#{x 18290}#
                                                        (#{chi-top-sequence 4362}#
                                                          #{body 18283}#
                                                          #{r 17961}#
                                                          #{w 18235}#
                                                          #{s 18236}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18237}#)))
                                                  (primitive-eval
                                                    #{x 18290}#)))
                                              (values #{exps 17967}#)))
                                          (if (memq 'load #{when-list 18282}#)
                                            (if (let ((#{t 18292}#
                                                        (memq 'compile
                                                              #{when-list 18282}#)))
                                                  (if #{t 18292}#
                                                    #{t 18292}#
                                                    (let ((#{t 18294}#
                                                            (memq 'expand
                                                                  #{when-list 18282}#)))
                                                      (if #{t 18294}#
                                                        #{t 18294}#
                                                        (if (eq? #{m 17964}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18282}#)
                                                          #f)))))
                                              (#{scan 17829}#
                                                #{body 18283}#
                                                #{r 17961}#
                                                #{w 18235}#
                                                #{s 18236}#
                                                'c&e
                                                '(compile load)
                                                #{mod 18237}#
                                                #{exps 17967}#)
                                              (if (if (eq? #{m 17964}# 'c)
                                                    #t
                                                    (eq? #{m 17964}# 'c&e))
                                                (#{scan 17829}#
                                                  #{body 18283}#
                                                  #{r 17961}#
                                                  #{w 18235}#
                                                  #{s 18236}#
                                                  'c
                                                  '(load)
                                                  #{mod 18237}#
                                                  #{exps 17967}#)
                                                (values #{exps 17967}#)))
                                            (if (let ((#{t 18304}#
                                                        (memq 'compile
                                                              #{when-list 18282}#)))
                                                  (if #{t 18304}#
                                                    #{t 18304}#
                                                    (let ((#{t 18306}#
                                                            (memq 'expand
                                                                  #{when-list 18282}#)))
                                                      (if #{t 18306}#
                                                        #{t 18306}#
                                                        (if (eq? #{m 17964}#
                                                                 'c&e)
                                                          (memq 'eval
                                                                #{when-list 18282}#)
                                                          #f)))))
                                              (begin
                                                (let ((#{x 18311}#
                                                        (#{chi-top-sequence 4362}#
                                                          #{body 18283}#
                                                          #{r 17961}#
                                                          #{w 18235}#
                                                          #{s 18236}#
                                                          'e
                                                          '(eval)
                                                          #{mod 18237}#)))
                                                  (primitive-eval #{x 18311}#))
                                                (values #{exps 17967}#))
                                              (values #{exps 17967}#))))))
                                    #{tmp 18275}#)
                                  (syntax-violation
                                    #f
                                    "source expression failed to match any pattern"
                                    #{e 18234}#)))
                              (if (eqv? #{type 18232}# 'define-syntax-form)
                                (let ((#{n 18322}#
                                        (#{id-var-name 4353}#
                                          #{value 18233}#
                                          #{w 18235}#))
                                      (#{r 18323}#
                                        (#{macros-only-env 4330}#
                                          #{r 17961}#)))
                                  (if (eqv? #{m 17964}# 'c)
                                    (if (memq 'compile #{esew 17965}#)
                                      (let ((#{e 18327}#
                                              (#{chi-install-global 4363}#
                                                #{n 18322}#
                                                (#{chi 4366}#
                                                  #{e 18234}#
                                                  #{r 18323}#
                                                  #{w 18235}#
                                                  #{mod 18237}#))))
                                        (begin
                                          (#{top-level-eval-hook 4294}#
                                            #{e 18327}#
                                            #{mod 18237}#)
                                          (if (memq 'load #{esew 17965}#)
                                            (values
                                              (cons #{e 18327}#
                                                    #{exps 17967}#))
                                            (values #{exps 17967}#))))
                                      (if (memq 'load #{esew 17965}#)
                                        (values
                                          (cons (#{chi-install-global 4363}#
                                                  #{n 18322}#
                                                  (#{chi 4366}#
                                                    #{e 18234}#
                                                    #{r 18323}#
                                                    #{w 18235}#
                                                    #{mod 18237}#))
                                                #{exps 17967}#))
                                        (values #{exps 17967}#)))
                                    (if (eqv? #{m 17964}# 'c&e)
                                      (let ((#{e 18784}#
                                              (#{chi-install-global 4363}#
                                                #{n 18322}#
                                                (#{chi 4366}#
                                                  #{e 18234}#
                                                  #{r 18323}#
                                                  #{w 18235}#
                                                  #{mod 18237}#))))
                                        (begin
                                          (#{top-level-eval-hook 4294}#
                                            #{e 18784}#
                                            #{mod 18237}#)
                                          (values
                                            (cons #{e 18784}#
                                                  #{exps 17967}#))))
                                      (begin
                                        (if (memq 'eval #{esew 17965}#)
                                          (#{top-level-eval-hook 4294}#
                                            (#{chi-install-global 4363}#
                                              #{n 18322}#
                                              (#{chi 4366}#
                                                #{e 18234}#
                                                #{r 18323}#
                                                #{w 18235}#
                                                #{mod 18237}#))
                                            #{mod 18237}#))
                                        (values #{exps 17967}#)))))
                                (if (eqv? #{type 18232}# 'define-form)
                                  (let ((#{n 19434}#
                                          (#{id-var-name 4353}#
                                            #{value 18233}#
                                            #{w 18235}#)))
                                    (let ((#{type 19435}#
                                            (car (let ((#{t 20204}#
                                                         (assq #{n 19434}#
                                                               #{r 17961}#)))
                                                   (if #{t 20204}#
                                                     (cdr #{t 20204}#)
                                                     (if (symbol? #{n 19434}#)
                                                       (let ((#{t 20209}#
                                                               (begin
                                                                 (if (if (not #{mod 18237}#)
                                                                       (current-module)
                                                                       #f)
                                                                   (warn "module system is booted, we should have a module"
                                                                         #{n 19434}#))
                                                                 (let ((#{v 20246}#
                                                                         (module-variable
                                                                           (if #{mod 18237}#
                                                                             (resolve-module
                                                                               (cdr #{mod 18237}#))
                                                                             (current-module))
                                                                           #{n 19434}#)))
                                                                   (if #{v 20246}#
                                                                     (if (variable-bound?
                                                                           #{v 20246}#)
                                                                       (let ((#{val 20255}#
                                                                               (variable-ref
                                                                                 #{v 20246}#)))
                                                                         (if (macro?
                                                                               #{val 20255}#)
                                                                           (if (macro-type
                                                                                 #{val 20255}#)
                                                                             (cons (macro-type
                                                                                     #{val 20255}#)
                                                                                   (macro-binding
                                                                                     #{val 20255}#))
                                                                             #f)
                                                                           #f))
                                                                       #f)
                                                                     #f)))))
                                                         (if #{t 20209}#
                                                           #{t 20209}#
                                                           '(global)))
                                                       '(displaced-lexical)))))))
                                      (if (let ((#{t 19469}# #{type 19435}#))
                                            (if (eqv? #{t 19469}# 'global)
                                              #t
                                              (if (eqv? #{t 19469}# 'core)
                                                #t
                                                (if (eqv? #{t 19469}# 'macro)
                                                  #t
                                                  (eqv? #{t 19469}#
                                                        'module-ref)))))
                                        (begin
                                          (if (if (if (eq? #{m 17964}# 'c)
                                                    #t
                                                    (eq? #{m 17964}# 'c&e))
                                                (if (not (module-local-variable
                                                           (current-module)
                                                           #{n 19434}#))
                                                  (current-module)
                                                  #f)
                                                #f)
                                            (let ((#{old 19633}#
                                                    (module-variable
                                                      (current-module)
                                                      #{n 19434}#)))
                                              (if (if (variable? #{old 19633}#)
                                                    (variable-bound?
                                                      #{old 19633}#)
                                                    #f)
                                                (module-define!
                                                  (current-module)
                                                  #{n 19434}#
                                                  (variable-ref #{old 19633}#))
                                                (module-add!
                                                  (current-module)
                                                  #{n 19434}#
                                                  (make-undefined-variable)))))
                                          (values
                                            (cons (if (eq? #{m 17964}# 'c&e)
                                                    (let ((#{x 19635}#
                                                            (#{build-global-definition 4309}#
                                                              #{s 18236}#
                                                              #{n 19434}#
                                                              (#{chi 4366}#
                                                                #{e 18234}#
                                                                #{r 17961}#
                                                                #{w 18235}#
                                                                #{mod 18237}#))))
                                                      (begin
                                                        (#{top-level-eval-hook 4294}#
                                                          #{x 19635}#
                                                          #{mod 18237}#)
                                                        #{x 19635}#))
                                                    (lambda ()
                                                      (#{build-global-definition 4309}#
                                                        #{s 18236}#
                                                        #{n 19434}#
                                                        (#{chi 4366}#
                                                          #{e 18234}#
                                                          #{r 17961}#
                                                          #{w 18235}#
                                                          #{mod 18237}#))))
                                                  #{exps 17967}#)))
                                        (if (let ((#{t 20131}# #{type 19435}#))
                                              (eqv? #{t 20131}#
                                                    'displaced-lexical))
                                          (syntax-violation
                                            #f
                                            "identifier out of context"
                                            #{e 18234}#
                                            (#{wrap 4359}#
                                              #{value 18233}#
                                              #{w 18235}#
                                              #{mod 18237}#))
                                          (syntax-violation
                                            #f
                                            "cannot define keyword at top level"
                                            #{e 18234}#
                                            (#{wrap 4359}#
                                              #{value 18233}#
                                              #{w 18235}#
                                              #{mod 18237}#))))))
                                  (values
                                    (cons (if (eq? #{m 17964}# 'c&e)
                                            (let ((#{x 20266}#
                                                    (#{chi-expr 4367}#
                                                      #{type 18232}#
                                                      #{value 18233}#
                                                      #{e 18234}#
                                                      #{r 17961}#
                                                      #{w 18235}#
                                                      #{s 18236}#
                                                      #{mod 18237}#)))
                                              (begin
                                                (primitive-eval #{x 20266}#)
                                                #{x 20266}#))
                                            (lambda ()
                                              (#{chi-expr 4367}#
                                                #{type 18232}#
                                                #{value 18233}#
                                                #{e 18234}#
                                                #{r 17961}#
                                                #{w 18235}#
                                                #{s 18236}#
                                                #{mod 18237}#)))
                                          #{exps 17967}#))))))))))
                  (lambda (#{exps 20275}#)
                    (#{scan 17829}#
                      (cdr #{body 17960}#)
                      #{r 17961}#
                      #{w 17962}#
                      #{s 17963}#
                      #{m 17964}#
                      #{esew 17965}#
                      #{mod 17966}#
                      #{exps 20275}#)))))))
         (call-with-values
           (lambda ()
             (#{scan 17829}#
               #{body 17822}#
               #{r 17823}#
               #{w 17824}#
               #{s 17825}#
               #{m 17826}#
               #{esew 17827}#
               #{mod 17828}#
               '()))
           (lambda (#{exps 17832}#)
             (if (null? #{exps 17832}#)
               (make-struct/no-tail
                 (vector-ref %expanded-vtables 0)
                 #{s 17825}#)
               (#{build-sequence 4315}#
                 #{s 17825}#
                 (letrec*
                   ((#{lp 17872}#
                      (lambda (#{in 17956}# #{out 17957}#)
                        (if (null? #{in 17956}#)
                          #{out 17957}#
                          (let ((#{e 17958}# (car #{in 17956}#)))
                            (#{lp 17872}#
                              (cdr #{in 17956}#)
                              (cons (if (procedure? #{e 17958}#)
                                      (#{e 17958}#)
                                      #{e 17958}#)
                                    #{out 17957}#)))))))
                   (#{lp 17872}# #{exps 17832}# '())))))))))
   (#{chi-install-global 4363}#
     (lambda (#{name 20276}# #{e 20277}#)
       (let ((#{exp 20283}#
               (let ((#{fun-exp 20293}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'make-syntax-transformer)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'make-syntax-transformer
                           #f)))
                     (#{arg-exps 20294}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #{name 20276}#)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               'macro)
                             #{e 20277}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 20293}#
                   #{arg-exps 20294}#))))
         (begin
           (if (if (struct? #{exp 20283}#)
                 (eq? (struct-vtable #{exp 20283}#)
                      (vector-ref %expanded-vtables 13))
                 #f)
             (let ((#{meta 20335}# (struct-ref #{exp 20283}# 1)))
               (if (not (assq 'name #{meta 20335}#))
                 (let ((#{v 20342}#
                         (cons (cons 'name #{name 20276}#) #{meta 20335}#)))
                   (struct-set! #{exp 20283}# 1 #{v 20342}#)))))
           (make-struct/no-tail
             (vector-ref %expanded-vtables 9)
             #f
             #{name 20276}#
             #{exp 20283}#)))))
   (#{chi-when-list 4364}#
     (lambda (#{e 20353}# #{when-list 20354}# #{w 20355}#)
       (letrec*
         ((#{f 20356}#
            (lambda (#{when-list 20359}# #{situations 20360}#)
              (if (null? #{when-list 20359}#)
                #{situations 20360}#
                (#{f 20356}#
                  (cdr #{when-list 20359}#)
                  (cons (let ((#{x 20361}# (car #{when-list 20359}#)))
                          (if (if (eq? (if (if (vector? #{x 20361}#)
                                             (if (= (vector-length #{x 20361}#)
                                                    4)
                                               (eq? (vector-ref #{x 20361}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (vector-ref #{x 20361}# 1)
                                         #{x 20361}#)
                                       (if (if (= (vector-length
                                                    '#(syntax-object
                                                       compile
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i1754"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f
                                                            when-list
                                                            situations)
                                                          #((top) (top) (top))
                                                          #("i1748"
                                                            "i1749"
                                                            "i1750"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(e when-list w)
                                                          #((top) (top) (top))
                                                          #("i1745"
                                                            "i1746"
                                                            "i1747"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile)))
                                                  4)
                                             #t
                                             #f)
                                         'compile
                                         '#(syntax-object
                                            compile
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i1754"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f when-list situations)
                                               #((top) (top) (top))
                                               #("i1748" "i1749" "i1750"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(e when-list w)
                                               #((top) (top) (top))
                                               #("i1745" "i1746" "i1747"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                (eq? (#{id-var-name 4353}# #{x 20361}# '(()))
                                     (#{id-var-name 4353}#
                                       '#(syntax-object
                                          compile
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i1754"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f when-list situations)
                                             #((top) (top) (top))
                                             #("i1748" "i1749" "i1750"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(e when-list w)
                                             #((top) (top) (top))
                                             #("i1745" "i1746" "i1747"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-application
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       '(())))
                                #f)
                            'compile
                            (if (if (eq? (if (if (vector? #{x 20361}#)
                                               (if (= (vector-length
                                                        #{x 20361}#)
                                                      4)
                                                 (eq? (vector-ref
                                                        #{x 20361}#
                                                        0)
                                                      'syntax-object)
                                                 #f)
                                               #f)
                                           (vector-ref #{x 20361}# 1)
                                           #{x 20361}#)
                                         (if (if (= (vector-length
                                                      '#(syntax-object
                                                         load
                                                         ((top)
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i1754"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(f
                                                              when-list
                                                              situations)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i1748"
                                                              "i1749"
                                                              "i1750"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e when-list w)
                                                            #((top)
                                                              (top)
                                                              (top))
                                                            #("i1745"
                                                              "i1746"
                                                              "i1747"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                    4)
                                               #t
                                               #f)
                                           'load
                                           '#(syntax-object
                                              load
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i1754"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(f when-list situations)
                                                 #((top) (top) (top))
                                                 #("i1748" "i1749" "i1750"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(e when-list w)
                                                 #((top) (top) (top))
                                                 #("i1745" "i1746" "i1747"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-application
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i399"
                                                  "i398"
                                                  "i396"
                                                  "i393"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i369"
                                                  "i367"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i358"
                                                  "i357"
                                                  "i356"
                                                  "i355"
                                                  "i353"
                                                  "i352"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i339"
                                                  "i337"
                                                  "i336"
                                                  "i335"
                                                  "i333"
                                                  "i331"
                                                  "i330"
                                                  "i327"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i261"
                                                  "i260"
                                                  "i257"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i245"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile))))
                                  (eq? (#{id-var-name 4353}# #{x 20361}# '(()))
                                       (#{id-var-name 4353}#
                                         '#(syntax-object
                                            load
                                            ((top)
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x)
                                               #((top))
                                               #("i1754"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(f when-list situations)
                                               #((top) (top) (top))
                                               #("i1748" "i1749" "i1750"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(e when-list w)
                                               #((top) (top) (top))
                                               #("i1745" "i1746" "i1747"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))
                                         '(())))
                                  #f)
                              'load
                              (if (if (eq? (if (if (vector? #{x 20361}#)
                                                 (if (= (vector-length
                                                          #{x 20361}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 20361}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (vector-ref #{x 20361}# 1)
                                             #{x 20361}#)
                                           (if (if (= (vector-length
                                                        '#(syntax-object
                                                           eval
                                                           ((top)
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(x)
                                                              #((top))
                                                              #("i1754"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(f
                                                                when-list
                                                                situations)
                                                              #((top)
                                                                (top)
                                                                (top))
                                                              #("i1748"
                                                                "i1749"
                                                                "i1750"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(e when-list w)
                                                              #((top)
                                                                (top)
                                                                (top))
                                                              #("i1745"
                                                                "i1746"
                                                                "i1747"))
                                                            #(ribcage
                                                              (lambda-var-list
                                                                gen-var
                                                                strip
                                                                chi-lambda-case
                                                                lambda*-formals
                                                                chi-simple-lambda
                                                                lambda-formals
                                                                ellipsis?
                                                                chi-void
                                                                eval-local-transformer
                                                                chi-local-syntax
                                                                chi-body
                                                                chi-macro
                                                                chi-application
                                                                chi-expr
                                                                chi
                                                                syntax-type
                                                                chi-when-list
                                                                chi-install-global
                                                                chi-top-sequence
                                                                chi-sequence
                                                                source-wrap
                                                                wrap
                                                                bound-id-member?
                                                                distinct-bound-ids?
                                                                valid-bound-ids?
                                                                bound-id=?
                                                                free-id=?
                                                                id-var-name
                                                                same-marks?
                                                                join-marks
                                                                join-wraps
                                                                smart-append
                                                                make-binding-wrap
                                                                extend-ribcage!
                                                                make-empty-ribcage
                                                                new-mark
                                                                anti-mark
                                                                the-anti-mark
                                                                top-marked?
                                                                top-wrap
                                                                empty-wrap
                                                                set-ribcage-labels!
                                                                set-ribcage-marks!
                                                                set-ribcage-symnames!
                                                                ribcage-labels
                                                                ribcage-marks
                                                                ribcage-symnames
                                                                ribcage?
                                                                make-ribcage
                                                                gen-labels
                                                                gen-label
                                                                make-rename
                                                                rename-marks
                                                                rename-new
                                                                rename-old
                                                                subst-rename?
                                                                wrap-subst
                                                                wrap-marks
                                                                make-wrap
                                                                id-sym-name&marks
                                                                id-sym-name
                                                                id?
                                                                nonsymbol-id?
                                                                global-extend
                                                                lookup
                                                                macros-only-env
                                                                extend-var-env
                                                                extend-env
                                                                null-env
                                                                binding-value
                                                                binding-type
                                                                make-binding
                                                                arg-check
                                                                source-annotation
                                                                no-source
                                                                set-syntax-object-module!
                                                                set-syntax-object-wrap!
                                                                set-syntax-object-expression!
                                                                syntax-object-module
                                                                syntax-object-wrap
                                                                syntax-object-expression
                                                                syntax-object?
                                                                make-syntax-object
                                                                build-lexical-var
                                                                build-letrec
                                                                build-named-let
                                                                build-let
                                                                build-sequence
                                                                build-data
                                                                build-primref
                                                                build-lambda-case
                                                                build-case-lambda
                                                                build-simple-lambda
                                                                build-global-definition
                                                                build-global-assignment
                                                                build-global-reference
                                                                analyze-variable
                                                                build-lexical-assignment
                                                                build-lexical-reference
                                                                build-dynlet
                                                                build-conditional
                                                                build-application
                                                                build-void
                                                                maybe-name-value!
                                                                decorate-source
                                                                get-global-definition-hook
                                                                put-global-definition-hook
                                                                gensym-hook
                                                                local-eval-hook
                                                                top-level-eval-hook
                                                                fx<
                                                                fx=
                                                                fx-
                                                                fx+
                                                                set-lambda-meta!
                                                                lambda-meta
                                                                lambda?
                                                                make-dynlet
                                                                make-letrec
                                                                make-let
                                                                make-lambda-case
                                                                make-lambda
                                                                make-sequence
                                                                make-application
                                                                make-conditional
                                                                make-toplevel-define
                                                                make-toplevel-set
                                                                make-toplevel-ref
                                                                make-module-set
                                                                make-module-ref
                                                                make-lexical-set
                                                                make-lexical-ref
                                                                make-primitive-ref
                                                                make-const
                                                                make-void)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i467"
                                                               "i465"
                                                               "i463"
                                                               "i461"
                                                               "i459"
                                                               "i457"
                                                               "i455"
                                                               "i453"
                                                               "i451"
                                                               "i449"
                                                               "i447"
                                                               "i445"
                                                               "i443"
                                                               "i441"
                                                               "i439"
                                                               "i437"
                                                               "i435"
                                                               "i433"
                                                               "i431"
                                                               "i429"
                                                               "i427"
                                                               "i425"
                                                               "i423"
                                                               "i421"
                                                               "i419"
                                                               "i417"
                                                               "i415"
                                                               "i413"
                                                               "i411"
                                                               "i409"
                                                               "i407"
                                                               "i405"
                                                               "i403"
                                                               "i401"
                                                               "i399"
                                                               "i398"
                                                               "i396"
                                                               "i393"
                                                               "i392"
                                                               "i391"
                                                               "i389"
                                                               "i388"
                                                               "i386"
                                                               "i384"
                                                               "i382"
                                                               "i380"
                                                               "i378"
                                                               "i376"
                                                               "i374"
                                                               "i372"
                                                               "i369"
                                                               "i367"
                                                               "i366"
                                                               "i364"
                                                               "i362"
                                                               "i360"
                                                               "i358"
                                                               "i357"
                                                               "i356"
                                                               "i355"
                                                               "i353"
                                                               "i352"
                                                               "i349"
                                                               "i347"
                                                               "i345"
                                                               "i343"
                                                               "i341"
                                                               "i339"
                                                               "i337"
                                                               "i336"
                                                               "i335"
                                                               "i333"
                                                               "i331"
                                                               "i330"
                                                               "i327"
                                                               "i326"
                                                               "i324"
                                                               "i322"
                                                               "i320"
                                                               "i318"
                                                               "i316"
                                                               "i314"
                                                               "i312"
                                                               "i310"
                                                               "i308"
                                                               "i305"
                                                               "i303"
                                                               "i301"
                                                               "i299"
                                                               "i297"
                                                               "i295"
                                                               "i293"
                                                               "i291"
                                                               "i289"
                                                               "i287"
                                                               "i285"
                                                               "i283"
                                                               "i281"
                                                               "i279"
                                                               "i277"
                                                               "i275"
                                                               "i273"
                                                               "i271"
                                                               "i269"
                                                               "i267"
                                                               "i265"
                                                               "i263"
                                                               "i261"
                                                               "i260"
                                                               "i257"
                                                               "i255"
                                                               "i254"
                                                               "i253"
                                                               "i252"
                                                               "i251"
                                                               "i249"
                                                               "i247"
                                                               "i245"
                                                               "i242"
                                                               "i240"
                                                               "i238"
                                                               "i236"
                                                               "i234"
                                                               "i232"
                                                               "i230"
                                                               "i228"
                                                               "i226"
                                                               "i224"
                                                               "i222"
                                                               "i220"
                                                               "i218"
                                                               "i216"
                                                               "i214"
                                                               "i212"
                                                               "i210"
                                                               "i208"))
                                                            #(ribcage
                                                              (define-structure
                                                                define-expansion-accessors
                                                                define-expansion-constructors)
                                                              ((top)
                                                               (top)
                                                               (top))
                                                              ("i46"
                                                               "i45"
                                                               "i44")))
                                                           (hygiene guile)))
                                                      4)
                                                 #t
                                                 #f)
                                             'eval
                                             '#(syntax-object
                                                eval
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i1754"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f when-list situations)
                                                   #((top) (top) (top))
                                                   #("i1748" "i1749" "i1750"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(e when-list w)
                                                   #((top) (top) (top))
                                                   #("i1745" "i1746" "i1747"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))))
                                    (eq? (#{id-var-name 4353}#
                                           #{x 20361}#
                                           '(()))
                                         (#{id-var-name 4353}#
                                           '#(syntax-object
                                              eval
                                              ((top)
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x)
                                                 #((top))
                                                 #("i1754"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(f when-list situations)
                                                 #((top) (top) (top))
                                                 #("i1748" "i1749" "i1750"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(e when-list w)
                                                 #((top) (top) (top))
                                                 #("i1745" "i1746" "i1747"))
                                               #(ribcage
                                                 (lambda-var-list
                                                   gen-var
                                                   strip
                                                   chi-lambda-case
                                                   lambda*-formals
                                                   chi-simple-lambda
                                                   lambda-formals
                                                   ellipsis?
                                                   chi-void
                                                   eval-local-transformer
                                                   chi-local-syntax
                                                   chi-body
                                                   chi-macro
                                                   chi-application
                                                   chi-expr
                                                   chi
                                                   syntax-type
                                                   chi-when-list
                                                   chi-install-global
                                                   chi-top-sequence
                                                   chi-sequence
                                                   source-wrap
                                                   wrap
                                                   bound-id-member?
                                                   distinct-bound-ids?
                                                   valid-bound-ids?
                                                   bound-id=?
                                                   free-id=?
                                                   id-var-name
                                                   same-marks?
                                                   join-marks
                                                   join-wraps
                                                   smart-append
                                                   make-binding-wrap
                                                   extend-ribcage!
                                                   make-empty-ribcage
                                                   new-mark
                                                   anti-mark
                                                   the-anti-mark
                                                   top-marked?
                                                   top-wrap
                                                   empty-wrap
                                                   set-ribcage-labels!
                                                   set-ribcage-marks!
                                                   set-ribcage-symnames!
                                                   ribcage-labels
                                                   ribcage-marks
                                                   ribcage-symnames
                                                   ribcage?
                                                   make-ribcage
                                                   gen-labels
                                                   gen-label
                                                   make-rename
                                                   rename-marks
                                                   rename-new
                                                   rename-old
                                                   subst-rename?
                                                   wrap-subst
                                                   wrap-marks
                                                   make-wrap
                                                   id-sym-name&marks
                                                   id-sym-name
                                                   id?
                                                   nonsymbol-id?
                                                   global-extend
                                                   lookup
                                                   macros-only-env
                                                   extend-var-env
                                                   extend-env
                                                   null-env
                                                   binding-value
                                                   binding-type
                                                   make-binding
                                                   arg-check
                                                   source-annotation
                                                   no-source
                                                   set-syntax-object-module!
                                                   set-syntax-object-wrap!
                                                   set-syntax-object-expression!
                                                   syntax-object-module
                                                   syntax-object-wrap
                                                   syntax-object-expression
                                                   syntax-object?
                                                   make-syntax-object
                                                   build-lexical-var
                                                   build-letrec
                                                   build-named-let
                                                   build-let
                                                   build-sequence
                                                   build-data
                                                   build-primref
                                                   build-lambda-case
                                                   build-case-lambda
                                                   build-simple-lambda
                                                   build-global-definition
                                                   build-global-assignment
                                                   build-global-reference
                                                   analyze-variable
                                                   build-lexical-assignment
                                                   build-lexical-reference
                                                   build-dynlet
                                                   build-conditional
                                                   build-application
                                                   build-void
                                                   maybe-name-value!
                                                   decorate-source
                                                   get-global-definition-hook
                                                   put-global-definition-hook
                                                   gensym-hook
                                                   local-eval-hook
                                                   top-level-eval-hook
                                                   fx<
                                                   fx=
                                                   fx-
                                                   fx+
                                                   set-lambda-meta!
                                                   lambda-meta
                                                   lambda?
                                                   make-dynlet
                                                   make-letrec
                                                   make-let
                                                   make-lambda-case
                                                   make-lambda
                                                   make-sequence
                                                   make-application
                                                   make-conditional
                                                   make-toplevel-define
                                                   make-toplevel-set
                                                   make-toplevel-ref
                                                   make-module-set
                                                   make-module-ref
                                                   make-lexical-set
                                                   make-lexical-ref
                                                   make-primitive-ref
                                                   make-const
                                                   make-void)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i467"
                                                  "i465"
                                                  "i463"
                                                  "i461"
                                                  "i459"
                                                  "i457"
                                                  "i455"
                                                  "i453"
                                                  "i451"
                                                  "i449"
                                                  "i447"
                                                  "i445"
                                                  "i443"
                                                  "i441"
                                                  "i439"
                                                  "i437"
                                                  "i435"
                                                  "i433"
                                                  "i431"
                                                  "i429"
                                                  "i427"
                                                  "i425"
                                                  "i423"
                                                  "i421"
                                                  "i419"
                                                  "i417"
                                                  "i415"
                                                  "i413"
                                                  "i411"
                                                  "i409"
                                                  "i407"
                                                  "i405"
                                                  "i403"
                                                  "i401"
                                                  "i399"
                                                  "i398"
                                                  "i396"
                                                  "i393"
                                                  "i392"
                                                  "i391"
                                                  "i389"
                                                  "i388"
                                                  "i386"
                                                  "i384"
                                                  "i382"
                                                  "i380"
                                                  "i378"
                                                  "i376"
                                                  "i374"
                                                  "i372"
                                                  "i369"
                                                  "i367"
                                                  "i366"
                                                  "i364"
                                                  "i362"
                                                  "i360"
                                                  "i358"
                                                  "i357"
                                                  "i356"
                                                  "i355"
                                                  "i353"
                                                  "i352"
                                                  "i349"
                                                  "i347"
                                                  "i345"
                                                  "i343"
                                                  "i341"
                                                  "i339"
                                                  "i337"
                                                  "i336"
                                                  "i335"
                                                  "i333"
                                                  "i331"
                                                  "i330"
                                                  "i327"
                                                  "i326"
                                                  "i324"
                                                  "i322"
                                                  "i320"
                                                  "i318"
                                                  "i316"
                                                  "i314"
                                                  "i312"
                                                  "i310"
                                                  "i308"
                                                  "i305"
                                                  "i303"
                                                  "i301"
                                                  "i299"
                                                  "i297"
                                                  "i295"
                                                  "i293"
                                                  "i291"
                                                  "i289"
                                                  "i287"
                                                  "i285"
                                                  "i283"
                                                  "i281"
                                                  "i279"
                                                  "i277"
                                                  "i275"
                                                  "i273"
                                                  "i271"
                                                  "i269"
                                                  "i267"
                                                  "i265"
                                                  "i263"
                                                  "i261"
                                                  "i260"
                                                  "i257"
                                                  "i255"
                                                  "i254"
                                                  "i253"
                                                  "i252"
                                                  "i251"
                                                  "i249"
                                                  "i247"
                                                  "i245"
                                                  "i242"
                                                  "i240"
                                                  "i238"
                                                  "i236"
                                                  "i234"
                                                  "i232"
                                                  "i230"
                                                  "i228"
                                                  "i226"
                                                  "i224"
                                                  "i222"
                                                  "i220"
                                                  "i218"
                                                  "i216"
                                                  "i214"
                                                  "i212"
                                                  "i210"
                                                  "i208"))
                                               #(ribcage
                                                 (define-structure
                                                   define-expansion-accessors
                                                   define-expansion-constructors)
                                                 ((top) (top) (top))
                                                 ("i46" "i45" "i44")))
                                              (hygiene guile))
                                           '(())))
                                    #f)
                                'eval
                                (if (if (eq? (if (if (vector? #{x 20361}#)
                                                   (if (= (vector-length
                                                            #{x 20361}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{x 20361}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{x 20361}# 1)
                                               #{x 20361}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             expand
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i1754"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(f
                                                                  when-list
                                                                  situations)
                                                                #((top)
                                                                  (top)
                                                                  (top))
                                                                #("i1748"
                                                                  "i1749"
                                                                  "i1750"))
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(e
                                                                  when-list
                                                                  w)
                                                                #((top)
                                                                  (top)
                                                                  (top))
                                                                #("i1745"
                                                                  "i1746"
                                                                  "i1747"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  chi-lambda-case
                                                                  lambda*-formals
                                                                  chi-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  chi-void
                                                                  eval-local-transformer
                                                                  chi-local-syntax
                                                                  chi-body
                                                                  chi-macro
                                                                  chi-application
                                                                  chi-expr
                                                                  chi
                                                                  syntax-type
                                                                  chi-when-list
                                                                  chi-install-global
                                                                  chi-top-sequence
                                                                  chi-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               'expand
                                               '#(syntax-object
                                                  expand
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i1754"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f when-list situations)
                                                     #((top) (top) (top))
                                                     #("i1748"
                                                       "i1749"
                                                       "i1750"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(e when-list w)
                                                     #((top) (top) (top))
                                                     #("i1745"
                                                       "i1746"
                                                       "i1747"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       chi-lambda-case
                                                       lambda*-formals
                                                       chi-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       chi-void
                                                       eval-local-transformer
                                                       chi-local-syntax
                                                       chi-body
                                                       chi-macro
                                                       chi-application
                                                       chi-expr
                                                       chi
                                                       syntax-type
                                                       chi-when-list
                                                       chi-install-global
                                                       chi-top-sequence
                                                       chi-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4353}#
                                             #{x 20361}#
                                             '(()))
                                           (#{id-var-name 4353}#
                                             '#(syntax-object
                                                expand
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i1754"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f when-list situations)
                                                   #((top) (top) (top))
                                                   #("i1748" "i1749" "i1750"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(e when-list w)
                                                   #((top) (top) (top))
                                                   #("i1745" "i1746" "i1747"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                  'expand
                                  (syntax-violation
                                    'eval-when
                                    "invalid situation"
                                    #{e 20353}#
                                    (#{wrap 4359}#
                                      #{x 20361}#
                                      #{w 20355}#
                                      #f)))))))
                        #{situations 20360}#))))))
         (#{f 20356}# #{when-list 20354}# '()))))
   (#{syntax-type 4365}#
     (lambda (#{e 20576}#
              #{r 20577}#
              #{w 20578}#
              #{s 20579}#
              #{rib 20580}#
              #{mod 20581}#
              #{for-car? 20582}#)
       (if (symbol? #{e 20576}#)
         (let ((#{n 20583}#
                 (#{id-var-name 4353}# #{e 20576}# #{w 20578}#)))
           (let ((#{b 20584}#
                   (let ((#{t 21159}# (assq #{n 20583}# #{r 20577}#)))
                     (if #{t 21159}#
                       (cdr #{t 21159}#)
                       (if (symbol? #{n 20583}#)
                         (let ((#{t 21164}#
                                 (begin
                                   (if (if (not #{mod 20581}#)
                                         (current-module)
                                         #f)
                                     (warn "module system is booted, we should have a module"
                                           #{n 20583}#))
                                   (let ((#{v 21201}#
                                           (module-variable
                                             (if #{mod 20581}#
                                               (resolve-module
                                                 (cdr #{mod 20581}#))
                                               (current-module))
                                             #{n 20583}#)))
                                     (if #{v 21201}#
                                       (if (variable-bound? #{v 21201}#)
                                         (let ((#{val 21210}#
                                                 (variable-ref #{v 21201}#)))
                                           (if (macro? #{val 21210}#)
                                             (if (macro-type #{val 21210}#)
                                               (cons (macro-type #{val 21210}#)
                                                     (macro-binding
                                                       #{val 21210}#))
                                               #f)
                                             #f))
                                         #f)
                                       #f)))))
                           (if #{t 21164}# #{t 21164}# '(global)))
                         '(displaced-lexical))))))
             (let ((#{type 20585}# (car #{b 20584}#)))
               (if (let ((#{t 20619}# #{type 20585}#))
                     (eqv? #{t 20619}# 'lexical))
                 (values
                   #{type 20585}#
                   (cdr #{b 20584}#)
                   #{e 20576}#
                   #{w 20578}#
                   #{s 20579}#
                   #{mod 20581}#)
                 (if (let ((#{t 20776}# #{type 20585}#))
                       (eqv? #{t 20776}# 'global))
                   (values
                     #{type 20585}#
                     #{n 20583}#
                     #{e 20576}#
                     #{w 20578}#
                     #{s 20579}#
                     #{mod 20581}#)
                   (if (let ((#{t 20902}# #{type 20585}#))
                         (eqv? #{t 20902}# 'macro))
                     (if #{for-car? 20582}#
                       (values
                         #{type 20585}#
                         (cdr #{b 20584}#)
                         #{e 20576}#
                         #{w 20578}#
                         #{s 20579}#
                         #{mod 20581}#)
                       (#{syntax-type 4365}#
                         (#{chi-macro 4369}#
                           (cdr #{b 20584}#)
                           #{e 20576}#
                           #{r 20577}#
                           #{w 20578}#
                           #{s 20579}#
                           #{rib 20580}#
                           #{mod 20581}#)
                         #{r 20577}#
                         '(())
                         #{s 20579}#
                         #{rib 20580}#
                         #{mod 20581}#
                         #f))
                     (values
                       #{type 20585}#
                       (cdr #{b 20584}#)
                       #{e 20576}#
                       #{w 20578}#
                       #{s 20579}#
                       #{mod 20581}#)))))))
         (if (pair? #{e 20576}#)
           (let ((#{first 21221}# (car #{e 20576}#)))
             (call-with-values
               (lambda ()
                 (#{syntax-type 4365}#
                   #{first 21221}#
                   #{r 20577}#
                   #{w 20578}#
                   #{s 20579}#
                   #{rib 20580}#
                   #{mod 20581}#
                   #t))
               (lambda (#{ftype 21223}#
                        #{fval 21224}#
                        #{fe 21225}#
                        #{fw 21226}#
                        #{fs 21227}#
                        #{fmod 21228}#)
                 (if (eqv? #{ftype 21223}# 'lexical)
                   (values
                     'lexical-call
                     #{fval 21224}#
                     #{e 20576}#
                     #{w 20578}#
                     #{s 20579}#
                     #{mod 20581}#)
                   (if (eqv? #{ftype 21223}# 'global)
                     (values
                       'global-call
                       (vector
                         'syntax-object
                         #{fval 21224}#
                         #{w 20578}#
                         #{fmod 21228}#)
                       #{e 20576}#
                       #{w 20578}#
                       #{s 20579}#
                       #{mod 20581}#)
                     (if (eqv? #{ftype 21223}# 'macro)
                       (#{syntax-type 4365}#
                         (#{chi-macro 4369}#
                           #{fval 21224}#
                           #{e 20576}#
                           #{r 20577}#
                           #{w 20578}#
                           #{s 20579}#
                           #{rib 20580}#
                           #{mod 20581}#)
                         #{r 20577}#
                         '(())
                         #{s 20579}#
                         #{rib 20580}#
                         #{mod 20581}#
                         #{for-car? 20582}#)
                       (if (eqv? #{ftype 21223}# 'module-ref)
                         (call-with-values
                           (lambda ()
                             (#{fval 21224}#
                               #{e 20576}#
                               #{r 20577}#
                               #{w 20578}#))
                           (lambda (#{e 21249}#
                                    #{r 21250}#
                                    #{w 21251}#
                                    #{s 21252}#
                                    #{mod 21253}#)
                             (#{syntax-type 4365}#
                               #{e 21249}#
                               #{r 21250}#
                               #{w 21251}#
                               #{s 21252}#
                               #{rib 20580}#
                               #{mod 21253}#
                               #{for-car? 20582}#)))
                         (if (eqv? #{ftype 21223}# 'core)
                           (values
                             'core-form
                             #{fval 21224}#
                             #{e 20576}#
                             #{w 20578}#
                             #{s 20579}#
                             #{mod 20581}#)
                           (if (eqv? #{ftype 21223}# 'local-syntax)
                             (values
                               'local-syntax-form
                               #{fval 21224}#
                               #{e 20576}#
                               #{w 20578}#
                               #{s 20579}#
                               #{mod 20581}#)
                             (if (eqv? #{ftype 21223}# 'begin)
                               (values
                                 'begin-form
                                 #f
                                 #{e 20576}#
                                 #{w 20578}#
                                 #{s 20579}#
                                 #{mod 20581}#)
                               (if (eqv? #{ftype 21223}# 'eval-when)
                                 (values
                                   'eval-when-form
                                   #f
                                   #{e 20576}#
                                   #{w 20578}#
                                   #{s 20579}#
                                   #{mod 20581}#)
                                 (if (eqv? #{ftype 21223}# 'define)
                                   (let ((#{tmp 21270}#
                                           ($sc-dispatch
                                             #{e 20576}#
                                             '(_ any any))))
                                     (if (if #{tmp 21270}#
                                           (@apply
                                             (lambda (#{name 21274}#
                                                      #{val 21275}#)
                                               (if (symbol? #{name 21274}#)
                                                 #t
                                                 (if (if (vector?
                                                           #{name 21274}#)
                                                       (if (= (vector-length
                                                                #{name 21274}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{name 21274}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (symbol?
                                                     (vector-ref
                                                       #{name 21274}#
                                                       1))
                                                   #f)))
                                             #{tmp 21270}#)
                                           #f)
                                       (@apply
                                         (lambda (#{name 21302}# #{val 21303}#)
                                           (values
                                             'define-form
                                             #{name 21302}#
                                             #{val 21303}#
                                             #{w 20578}#
                                             #{s 20579}#
                                             #{mod 20581}#))
                                         #{tmp 21270}#)
                                       (let ((#{tmp 21304}#
                                               ($sc-dispatch
                                                 #{e 20576}#
                                                 '(_ (any . any)
                                                     any
                                                     .
                                                     each-any))))
                                         (if (if #{tmp 21304}#
                                               (@apply
                                                 (lambda (#{name 21308}#
                                                          #{args 21309}#
                                                          #{e1 21310}#
                                                          #{e2 21311}#)
                                                   (if (if (symbol?
                                                             #{name 21308}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21308}#)
                                                               (if (= (vector-length
                                                                        #{name 21308}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21308}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21308}#
                                                               1))
                                                           #f))
                                                     (#{valid-bound-ids? 4356}#
                                                       (#{lambda-var-list 4381}#
                                                         #{args 21309}#))
                                                     #f))
                                                 #{tmp 21304}#)
                                               #f)
                                           (@apply
                                             (lambda (#{name 21410}#
                                                      #{args 21411}#
                                                      #{e1 21412}#
                                                      #{e2 21413}#)
                                               (values
                                                 'define-form
                                                 (#{wrap 4359}#
                                                   #{name 21410}#
                                                   #{w 20578}#
                                                   #{mod 20581}#)
                                                 (let ((#{e 21419}#
                                                         (cons '#(syntax-object
                                                                  lambda
                                                                  ((top)
                                                                   #(ribcage
                                                                     #(name
                                                                       args
                                                                       e1
                                                                       e2)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1855"
                                                                       "i1856"
                                                                       "i1857"
                                                                       "i1858"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(ftype
                                                                       fval
                                                                       fe
                                                                       fw
                                                                       fs
                                                                       fmod)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1808"
                                                                       "i1809"
                                                                       "i1810"
                                                                       "i1811"
                                                                       "i1812"
                                                                       "i1813"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(first)
                                                                     #((top))
                                                                     #("i1800"))
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(e
                                                                       r
                                                                       w
                                                                       s
                                                                       rib
                                                                       mod
                                                                       for-car?)
                                                                     #((top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top)
                                                                       (top))
                                                                     #("i1772"
                                                                       "i1773"
                                                                       "i1774"
                                                                       "i1775"
                                                                       "i1776"
                                                                       "i1777"
                                                                       "i1778"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-application
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile))
                                                               (#{wrap 4359}#
                                                                 (cons #{args 21411}#
                                                                       (cons #{e1 21412}#
                                                                             #{e2 21413}#))
                                                                 #{w 20578}#
                                                                 #{mod 20581}#))))
                                                   (begin
                                                     (if (if (pair? #{e 21419}#)
                                                           #{s 20579}#
                                                           #f)
                                                       (set-source-properties!
                                                         #{e 21419}#
                                                         #{s 20579}#))
                                                     #{e 21419}#))
                                                 '(())
                                                 #{s 20579}#
                                                 #{mod 20581}#))
                                             #{tmp 21304}#)
                                           (let ((#{tmp 21426}#
                                                   ($sc-dispatch
                                                     #{e 20576}#
                                                     '(_ any))))
                                             (if (if #{tmp 21426}#
                                                   (@apply
                                                     (lambda (#{name 21430}#)
                                                       (if (symbol?
                                                             #{name 21430}#)
                                                         #t
                                                         (if (if (vector?
                                                                   #{name 21430}#)
                                                               (if (= (vector-length
                                                                        #{name 21430}#)
                                                                      4)
                                                                 (eq? (vector-ref
                                                                        #{name 21430}#
                                                                        0)
                                                                      'syntax-object)
                                                                 #f)
                                                               #f)
                                                           (symbol?
                                                             (vector-ref
                                                               #{name 21430}#
                                                               1))
                                                           #f)))
                                                     #{tmp 21426}#)
                                                   #f)
                                               (@apply
                                                 (lambda (#{name 21457}#)
                                                   (values
                                                     'define-form
                                                     (#{wrap 4359}#
                                                       #{name 21457}#
                                                       #{w 20578}#
                                                       #{mod 20581}#)
                                                     '(#(syntax-object
                                                         if
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile))
                                                       #(syntax-object
                                                         #f
                                                         ((top)
                                                          #(ribcage
                                                            #(name)
                                                            #((top))
                                                            #("i1868"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(ftype
                                                              fval
                                                              fe
                                                              fw
                                                              fs
                                                              fmod)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1808"
                                                              "i1809"
                                                              "i1810"
                                                              "i1811"
                                                              "i1812"
                                                              "i1813"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(first)
                                                            #((top))
                                                            #("i1800"))
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(e
                                                              r
                                                              w
                                                              s
                                                              rib
                                                              mod
                                                              for-car?)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i1772"
                                                              "i1773"
                                                              "i1774"
                                                              "i1775"
                                                              "i1776"
                                                              "i1777"
                                                              "i1778"))
                                                          #(ribcage
                                                            (lambda-var-list
                                                              gen-var
                                                              strip
                                                              chi-lambda-case
                                                              lambda*-formals
                                                              chi-simple-lambda
                                                              lambda-formals
                                                              ellipsis?
                                                              chi-void
                                                              eval-local-transformer
                                                              chi-local-syntax
                                                              chi-body
                                                              chi-macro
                                                              chi-application
                                                              chi-expr
                                                              chi
                                                              syntax-type
                                                              chi-when-list
                                                              chi-install-global
                                                              chi-top-sequence
                                                              chi-sequence
                                                              source-wrap
                                                              wrap
                                                              bound-id-member?
                                                              distinct-bound-ids?
                                                              valid-bound-ids?
                                                              bound-id=?
                                                              free-id=?
                                                              id-var-name
                                                              same-marks?
                                                              join-marks
                                                              join-wraps
                                                              smart-append
                                                              make-binding-wrap
                                                              extend-ribcage!
                                                              make-empty-ribcage
                                                              new-mark
                                                              anti-mark
                                                              the-anti-mark
                                                              top-marked?
                                                              top-wrap
                                                              empty-wrap
                                                              set-ribcage-labels!
                                                              set-ribcage-marks!
                                                              set-ribcage-symnames!
                                                              ribcage-labels
                                                              ribcage-marks
                                                              ribcage-symnames
                                                              ribcage?
                                                              make-ribcage
                                                              gen-labels
                                                              gen-label
                                                              make-rename
                                                              rename-marks
                                                              rename-new
                                                              rename-old
                                                              subst-rename?
                                                              wrap-subst
                                                              wrap-marks
                                                              make-wrap
                                                              id-sym-name&marks
                                                              id-sym-name
                                                              id?
                                                              nonsymbol-id?
                                                              global-extend
                                                              lookup
                                                              macros-only-env
                                                              extend-var-env
                                                              extend-env
                                                              null-env
                                                              binding-value
                                                              binding-type
                                                              make-binding
                                                              arg-check
                                                              source-annotation
                                                              no-source
                                                              set-syntax-object-module!
                                                              set-syntax-object-wrap!
                                                              set-syntax-object-expression!
                                                              syntax-object-module
                                                              syntax-object-wrap
                                                              syntax-object-expression
                                                              syntax-object?
                                                              make-syntax-object
                                                              build-lexical-var
                                                              build-letrec
                                                              build-named-let
                                                              build-let
                                                              build-sequence
                                                              build-data
                                                              build-primref
                                                              build-lambda-case
                                                              build-case-lambda
                                                              build-simple-lambda
                                                              build-global-definition
                                                              build-global-assignment
                                                              build-global-reference
                                                              analyze-variable
                                                              build-lexical-assignment
                                                              build-lexical-reference
                                                              build-dynlet
                                                              build-conditional
                                                              build-application
                                                              build-void
                                                              maybe-name-value!
                                                              decorate-source
                                                              get-global-definition-hook
                                                              put-global-definition-hook
                                                              gensym-hook
                                                              local-eval-hook
                                                              top-level-eval-hook
                                                              fx<
                                                              fx=
                                                              fx-
                                                              fx+
                                                              set-lambda-meta!
                                                              lambda-meta
                                                              lambda?
                                                              make-dynlet
                                                              make-letrec
                                                              make-let
                                                              make-lambda-case
                                                              make-lambda
                                                              make-sequence
                                                              make-application
                                                              make-conditional
                                                              make-toplevel-define
                                                              make-toplevel-set
                                                              make-toplevel-ref
                                                              make-module-set
                                                              make-module-ref
                                                              make-lexical-set
                                                              make-lexical-ref
                                                              make-primitive-ref
                                                              make-const
                                                              make-void)
                                                            ((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                            ("i467"
                                                             "i465"
                                                             "i463"
                                                             "i461"
                                                             "i459"
                                                             "i457"
                                                             "i455"
                                                             "i453"
                                                             "i451"
                                                             "i449"
                                                             "i447"
                                                             "i445"
                                                             "i443"
                                                             "i441"
                                                             "i439"
                                                             "i437"
                                                             "i435"
                                                             "i433"
                                                             "i431"
                                                             "i429"
                                                             "i427"
                                                             "i425"
                                                             "i423"
                                                             "i421"
                                                             "i419"
                                                             "i417"
                                                             "i415"
                                                             "i413"
                                                             "i411"
                                                             "i409"
                                                             "i407"
                                                             "i405"
                                                             "i403"
                                                             "i401"
                                                             "i399"
                                                             "i398"
                                                             "i396"
                                                             "i393"
                                                             "i392"
                                                             "i391"
                                                             "i389"
                                                             "i388"
                                                             "i386"
                                                             "i384"
                                                             "i382"
                                                             "i380"
                                                             "i378"
                                                             "i376"
                                                             "i374"
                                                             "i372"
                                                             "i369"
                                                             "i367"
                                                             "i366"
                                                             "i364"
                                                             "i362"
                                                             "i360"
                                                             "i358"
                                                             "i357"
                                                             "i356"
                                                             "i355"
                                                             "i353"
                                                             "i352"
                                                             "i349"
                                                             "i347"
                                                             "i345"
                                                             "i343"
                                                             "i341"
                                                             "i339"
                                                             "i337"
                                                             "i336"
                                                             "i335"
                                                             "i333"
                                                             "i331"
                                                             "i330"
                                                             "i327"
                                                             "i326"
                                                             "i324"
                                                             "i322"
                                                             "i320"
                                                             "i318"
                                                             "i316"
                                                             "i314"
                                                             "i312"
                                                             "i310"
                                                             "i308"
                                                             "i305"
                                                             "i303"
                                                             "i301"
                                                             "i299"
                                                             "i297"
                                                             "i295"
                                                             "i293"
                                                             "i291"
                                                             "i289"
                                                             "i287"
                                                             "i285"
                                                             "i283"
                                                             "i281"
                                                             "i279"
                                                             "i277"
                                                             "i275"
                                                             "i273"
                                                             "i271"
                                                             "i269"
                                                             "i267"
                                                             "i265"
                                                             "i263"
                                                             "i261"
                                                             "i260"
                                                             "i257"
                                                             "i255"
                                                             "i254"
                                                             "i253"
                                                             "i252"
                                                             "i251"
                                                             "i249"
                                                             "i247"
                                                             "i245"
                                                             "i242"
                                                             "i240"
                                                             "i238"
                                                             "i236"
                                                             "i234"
                                                             "i232"
                                                             "i230"
                                                             "i228"
                                                             "i226"
                                                             "i224"
                                                             "i222"
                                                             "i220"
                                                             "i218"
                                                             "i216"
                                                             "i214"
                                                             "i212"
                                                             "i210"
                                                             "i208"))
                                                          #(ribcage
                                                            (define-structure
                                                              define-expansion-accessors
                                                              define-expansion-constructors)
                                                            ((top) (top) (top))
                                                            ("i46"
                                                             "i45"
                                                             "i44")))
                                                         (hygiene guile)))
                                                     '(())
                                                     #{s 20579}#
                                                     #{mod 20581}#))
                                                 #{tmp 21426}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{e 20576}#)))))))
                                   (if (eqv? #{ftype 21223}# 'define-syntax)
                                     (let ((#{tmp 21476}#
                                             ($sc-dispatch
                                               #{e 20576}#
                                               '(_ any any))))
                                       (if (if #{tmp 21476}#
                                             (@apply
                                               (lambda (#{name 21480}#
                                                        #{val 21481}#)
                                                 (if (symbol? #{name 21480}#)
                                                   #t
                                                   (if (if (vector?
                                                             #{name 21480}#)
                                                         (if (= (vector-length
                                                                  #{name 21480}#)
                                                                4)
                                                           (eq? (vector-ref
                                                                  #{name 21480}#
                                                                  0)
                                                                'syntax-object)
                                                           #f)
                                                         #f)
                                                     (symbol?
                                                       (vector-ref
                                                         #{name 21480}#
                                                         1))
                                                     #f)))
                                               #{tmp 21476}#)
                                             #f)
                                         (@apply
                                           (lambda (#{name 21508}#
                                                    #{val 21509}#)
                                             (values
                                               'define-syntax-form
                                               #{name 21508}#
                                               #{val 21509}#
                                               #{w 20578}#
                                               #{s 20579}#
                                               #{mod 20581}#))
                                           #{tmp 21476}#)
                                         (let ((#{tmp 21510}#
                                                 ($sc-dispatch
                                                   #{e 20576}#
                                                   '(_ (any . any)
                                                       any
                                                       .
                                                       each-any))))
                                           (if (if #{tmp 21510}#
                                                 (@apply
                                                   (lambda (#{name 21514}#
                                                            #{args 21515}#
                                                            #{e1 21516}#
                                                            #{e2 21517}#)
                                                     (if (if (symbol?
                                                               #{name 21514}#)
                                                           #t
                                                           (if (if (vector?
                                                                     #{name 21514}#)
                                                                 (if (= (vector-length
                                                                          #{name 21514}#)
                                                                        4)
                                                                   (eq? (vector-ref
                                                                          #{name 21514}#
                                                                          0)
                                                                        'syntax-object)
                                                                   #f)
                                                                 #f)
                                                             (symbol?
                                                               (vector-ref
                                                                 #{name 21514}#
                                                                 1))
                                                             #f))
                                                       (#{valid-bound-ids? 4356}#
                                                         (#{lambda-var-list 4381}#
                                                           #{args 21515}#))
                                                       #f))
                                                   #{tmp 21510}#)
                                                 #f)
                                             (@apply
                                               (lambda (#{name 21616}#
                                                        #{args 21617}#
                                                        #{e1 21618}#
                                                        #{e2 21619}#)
                                                 (values
                                                   'define-syntax-form
                                                   (#{wrap 4359}#
                                                     #{name 21616}#
                                                     #{w 20578}#
                                                     #{mod 20581}#)
                                                   (let ((#{e 21625}#
                                                           (cons '#(syntax-object
                                                                    lambda
                                                                    ((top)
                                                                     #(ribcage
                                                                       #(name
                                                                         args
                                                                         e1
                                                                         e2)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1893"
                                                                         "i1894"
                                                                         "i1895"
                                                                         "i1896"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(ftype
                                                                         fval
                                                                         fe
                                                                         fw
                                                                         fs
                                                                         fmod)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1808"
                                                                         "i1809"
                                                                         "i1810"
                                                                         "i1811"
                                                                         "i1812"
                                                                         "i1813"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(first)
                                                                       #((top))
                                                                       #("i1800"))
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       ()
                                                                       ()
                                                                       ())
                                                                     #(ribcage
                                                                       #(e
                                                                         r
                                                                         w
                                                                         s
                                                                         rib
                                                                         mod
                                                                         for-car?)
                                                                       #((top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top)
                                                                         (top))
                                                                       #("i1772"
                                                                         "i1773"
                                                                         "i1774"
                                                                         "i1775"
                                                                         "i1776"
                                                                         "i1777"
                                                                         "i1778"))
                                                                     #(ribcage
                                                                       (lambda-var-list
                                                                         gen-var
                                                                         strip
                                                                         chi-lambda-case
                                                                         lambda*-formals
                                                                         chi-simple-lambda
                                                                         lambda-formals
                                                                         ellipsis?
                                                                         chi-void
                                                                         eval-local-transformer
                                                                         chi-local-syntax
                                                                         chi-body
                                                                         chi-macro
                                                                         chi-application
                                                                         chi-expr
                                                                         chi
                                                                         syntax-type
                                                                         chi-when-list
                                                                         chi-install-global
                                                                         chi-top-sequence
                                                                         chi-sequence
                                                                         source-wrap
                                                                         wrap
                                                                         bound-id-member?
                                                                         distinct-bound-ids?
                                                                         valid-bound-ids?
                                                                         bound-id=?
                                                                         free-id=?
                                                                         id-var-name
                                                                         same-marks?
                                                                         join-marks
                                                                         join-wraps
                                                                         smart-append
                                                                         make-binding-wrap
                                                                         extend-ribcage!
                                                                         make-empty-ribcage
                                                                         new-mark
                                                                         anti-mark
                                                                         the-anti-mark
                                                                         top-marked?
                                                                         top-wrap
                                                                         empty-wrap
                                                                         set-ribcage-labels!
                                                                         set-ribcage-marks!
                                                                         set-ribcage-symnames!
                                                                         ribcage-labels
                                                                         ribcage-marks
                                                                         ribcage-symnames
                                                                         ribcage?
                                                                         make-ribcage
                                                                         gen-labels
                                                                         gen-label
                                                                         make-rename
                                                                         rename-marks
                                                                         rename-new
                                                                         rename-old
                                                                         subst-rename?
                                                                         wrap-subst
                                                                         wrap-marks
                                                                         make-wrap
                                                                         id-sym-name&marks
                                                                         id-sym-name
                                                                         id?
                                                                         nonsymbol-id?
                                                                         global-extend
                                                                         lookup
                                                                         macros-only-env
                                                                         extend-var-env
                                                                         extend-env
                                                                         null-env
                                                                         binding-value
                                                                         binding-type
                                                                         make-binding
                                                                         arg-check
                                                                         source-annotation
                                                                         no-source
                                                                         set-syntax-object-module!
                                                                         set-syntax-object-wrap!
                                                                         set-syntax-object-expression!
                                                                         syntax-object-module
                                                                         syntax-object-wrap
                                                                         syntax-object-expression
                                                                         syntax-object?
                                                                         make-syntax-object
                                                                         build-lexical-var
                                                                         build-letrec
                                                                         build-named-let
                                                                         build-let
                                                                         build-sequence
                                                                         build-data
                                                                         build-primref
                                                                         build-lambda-case
                                                                         build-case-lambda
                                                                         build-simple-lambda
                                                                         build-global-definition
                                                                         build-global-assignment
                                                                         build-global-reference
                                                                         analyze-variable
                                                                         build-lexical-assignment
                                                                         build-lexical-reference
                                                                         build-dynlet
                                                                         build-conditional
                                                                         build-application
                                                                         build-void
                                                                         maybe-name-value!
                                                                         decorate-source
                                                                         get-global-definition-hook
                                                                         put-global-definition-hook
                                                                         gensym-hook
                                                                         local-eval-hook
                                                                         top-level-eval-hook
                                                                         fx<
                                                                         fx=
                                                                         fx-
                                                                         fx+
                                                                         set-lambda-meta!
                                                                         lambda-meta
                                                                         lambda?
                                                                         make-dynlet
                                                                         make-letrec
                                                                         make-let
                                                                         make-lambda-case
                                                                         make-lambda
                                                                         make-sequence
                                                                         make-application
                                                                         make-conditional
                                                                         make-toplevel-define
                                                                         make-toplevel-set
                                                                         make-toplevel-ref
                                                                         make-module-set
                                                                         make-module-ref
                                                                         make-lexical-set
                                                                         make-lexical-ref
                                                                         make-primitive-ref
                                                                         make-const
                                                                         make-void)
                                                                       ((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                       ("i467"
                                                                        "i465"
                                                                        "i463"
                                                                        "i461"
                                                                        "i459"
                                                                        "i457"
                                                                        "i455"
                                                                        "i453"
                                                                        "i451"
                                                                        "i449"
                                                                        "i447"
                                                                        "i445"
                                                                        "i443"
                                                                        "i441"
                                                                        "i439"
                                                                        "i437"
                                                                        "i435"
                                                                        "i433"
                                                                        "i431"
                                                                        "i429"
                                                                        "i427"
                                                                        "i425"
                                                                        "i423"
                                                                        "i421"
                                                                        "i419"
                                                                        "i417"
                                                                        "i415"
                                                                        "i413"
                                                                        "i411"
                                                                        "i409"
                                                                        "i407"
                                                                        "i405"
                                                                        "i403"
                                                                        "i401"
                                                                        "i399"
                                                                        "i398"
                                                                        "i396"
                                                                        "i393"
                                                                        "i392"
                                                                        "i391"
                                                                        "i389"
                                                                        "i388"
                                                                        "i386"
                                                                        "i384"
                                                                        "i382"
                                                                        "i380"
                                                                        "i378"
                                                                        "i376"
                                                                        "i374"
                                                                        "i372"
                                                                        "i369"
                                                                        "i367"
                                                                        "i366"
                                                                        "i364"
                                                                        "i362"
                                                                        "i360"
                                                                        "i358"
                                                                        "i357"
                                                                        "i356"
                                                                        "i355"
                                                                        "i353"
                                                                        "i352"
                                                                        "i349"
                                                                        "i347"
                                                                        "i345"
                                                                        "i343"
                                                                        "i341"
                                                                        "i339"
                                                                        "i337"
                                                                        "i336"
                                                                        "i335"
                                                                        "i333"
                                                                        "i331"
                                                                        "i330"
                                                                        "i327"
                                                                        "i326"
                                                                        "i324"
                                                                        "i322"
                                                                        "i320"
                                                                        "i318"
                                                                        "i316"
                                                                        "i314"
                                                                        "i312"
                                                                        "i310"
                                                                        "i308"
                                                                        "i305"
                                                                        "i303"
                                                                        "i301"
                                                                        "i299"
                                                                        "i297"
                                                                        "i295"
                                                                        "i293"
                                                                        "i291"
                                                                        "i289"
                                                                        "i287"
                                                                        "i285"
                                                                        "i283"
                                                                        "i281"
                                                                        "i279"
                                                                        "i277"
                                                                        "i275"
                                                                        "i273"
                                                                        "i271"
                                                                        "i269"
                                                                        "i267"
                                                                        "i265"
                                                                        "i263"
                                                                        "i261"
                                                                        "i260"
                                                                        "i257"
                                                                        "i255"
                                                                        "i254"
                                                                        "i253"
                                                                        "i252"
                                                                        "i251"
                                                                        "i249"
                                                                        "i247"
                                                                        "i245"
                                                                        "i242"
                                                                        "i240"
                                                                        "i238"
                                                                        "i236"
                                                                        "i234"
                                                                        "i232"
                                                                        "i230"
                                                                        "i228"
                                                                        "i226"
                                                                        "i224"
                                                                        "i222"
                                                                        "i220"
                                                                        "i218"
                                                                        "i216"
                                                                        "i214"
                                                                        "i212"
                                                                        "i210"
                                                                        "i208"))
                                                                     #(ribcage
                                                                       (define-structure
                                                                         define-expansion-accessors
                                                                         define-expansion-constructors)
                                                                       ((top)
                                                                        (top)
                                                                        (top))
                                                                       ("i46"
                                                                        "i45"
                                                                        "i44")))
                                                                    (hygiene
                                                                      guile))
                                                                 (#{wrap 4359}#
                                                                   (cons #{args 21617}#
                                                                         (cons #{e1 21618}#
                                                                               #{e2 21619}#))
                                                                   #{w 20578}#
                                                                   #{mod 20581}#))))
                                                     (begin
                                                       (if (if (pair? #{e 21625}#)
                                                             #{s 20579}#
                                                             #f)
                                                         (set-source-properties!
                                                           #{e 21625}#
                                                           #{s 20579}#))
                                                       #{e 21625}#))
                                                   '(())
                                                   #{s 20579}#
                                                   #{mod 20581}#))
                                               #{tmp 21510}#)
                                             (syntax-violation
                                               #f
                                               "source expression failed to match any pattern"
                                               #{e 20576}#)))))
                                     (values
                                       'call
                                       #f
                                       #{e 20576}#
                                       #{w 20578}#
                                       #{s 20579}#
                                       #{mod 20581}#))))))))))))))
           (if (if (vector? #{e 20576}#)
                 (if (= (vector-length #{e 20576}#) 4)
                   (eq? (vector-ref #{e 20576}# 0) 'syntax-object)
                   #f)
                 #f)
             (#{syntax-type 4365}#
               (vector-ref #{e 20576}# 1)
               #{r 20577}#
               (#{join-wraps 4350}#
                 #{w 20578}#
                 (vector-ref #{e 20576}# 2))
               (let ((#{t 21661}#
                       (#{source-annotation 4327}# #{e 20576}#)))
                 (if #{t 21661}# #{t 21661}# #{s 20579}#))
               #{rib 20580}#
               (let ((#{t 21921}# (vector-ref #{e 20576}# 3)))
                 (if #{t 21921}# #{t 21921}# #{mod 20581}#))
               #{for-car? 20582}#)
             (if (self-evaluating? #{e 20576}#)
               (values
                 'constant
                 #f
                 #{e 20576}#
                 #{w 20578}#
                 #{s 20579}#
                 #{mod 20581}#)
               (values
                 'other
                 #f
                 #{e 20576}#
                 #{w 20578}#
                 #{s 20579}#
                 #{mod 20581}#)))))))
   (#{chi 4366}#
     (lambda (#{e 21930}#
              #{r 21931}#
              #{w 21932}#
              #{mod 21933}#)
       (call-with-values
         (lambda ()
           (#{syntax-type 4365}#
             #{e 21930}#
             #{r 21931}#
             #{w 21932}#
             (#{source-annotation 4327}# #{e 21930}#)
             #f
             #{mod 21933}#
             #f))
         (lambda (#{type 22107}#
                  #{value 22108}#
                  #{e 22109}#
                  #{w 22110}#
                  #{s 22111}#
                  #{mod 22112}#)
           (#{chi-expr 4367}#
             #{type 22107}#
             #{value 22108}#
             #{e 22109}#
             #{r 21931}#
             #{w 22110}#
             #{s 22111}#
             #{mod 22112}#)))))
   (#{chi-expr 4367}#
     (lambda (#{type 22115}#
              #{value 22116}#
              #{e 22117}#
              #{r 22118}#
              #{w 22119}#
              #{s 22120}#
              #{mod 22121}#)
       (if (eqv? #{type 22115}# 'lexical)
         (make-struct/no-tail
           (vector-ref %expanded-vtables 3)
           #{s 22120}#
           #{e 22117}#
           #{value 22116}#)
         (if (if (eqv? #{type 22115}# 'core)
               #t
               (eqv? #{type 22115}# 'core-form))
           (#{value 22116}#
             #{e 22117}#
             #{r 22118}#
             #{w 22119}#
             #{s 22120}#
             #{mod 22121}#)
           (if (eqv? #{type 22115}# 'module-ref)
             (call-with-values
               (lambda ()
                 (#{value 22116}#
                   #{e 22117}#
                   #{r 22118}#
                   #{w 22119}#))
               (lambda (#{e 22147}#
                        #{r 22148}#
                        #{w 22149}#
                        #{s 22150}#
                        #{mod 22151}#)
                 (#{chi 4366}#
                   #{e 22147}#
                   #{r 22148}#
                   #{w 22149}#
                   #{mod 22151}#)))
             (if (eqv? #{type 22115}# 'lexical-call)
               (#{chi-application 4368}#
                 (let ((#{id 22231}# (car #{e 22117}#)))
                   (#{build-lexical-reference 4304}#
                     'fun
                     (#{source-annotation 4327}# #{id 22231}#)
                     (if (if (vector? #{id 22231}#)
                           (if (= (vector-length #{id 22231}#) 4)
                             (eq? (vector-ref #{id 22231}# 0) 'syntax-object)
                             #f)
                           #f)
                       (syntax->datum #{id 22231}#)
                       #{id 22231}#)
                     #{value 22116}#))
                 #{e 22117}#
                 #{r 22118}#
                 #{w 22119}#
                 #{s 22120}#
                 #{mod 22121}#)
               (if (eqv? #{type 22115}# 'global-call)
                 (#{chi-application 4368}#
                   (#{build-global-reference 4307}#
                     (#{source-annotation 4327}# (car #{e 22117}#))
                     (if (if (vector? #{value 22116}#)
                           (if (= (vector-length #{value 22116}#) 4)
                             (eq? (vector-ref #{value 22116}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22116}# 1)
                       #{value 22116}#)
                     (if (if (vector? #{value 22116}#)
                           (if (= (vector-length #{value 22116}#) 4)
                             (eq? (vector-ref #{value 22116}# 0)
                                  'syntax-object)
                             #f)
                           #f)
                       (vector-ref #{value 22116}# 3)
                       #{mod 22121}#))
                   #{e 22117}#
                   #{r 22118}#
                   #{w 22119}#
                   #{s 22120}#
                   #{mod 22121}#)
                 (if (eqv? #{type 22115}# 'constant)
                   (let ((#{exp 22767}#
                           (#{strip 4379}#
                             (#{wrap 4359}#
                               (begin
                                 (if (if (pair? #{e 22117}#) #{s 22120}# #f)
                                   (set-source-properties!
                                     #{e 22117}#
                                     #{s 22120}#))
                                 #{e 22117}#)
                               #{w 22119}#
                               #{mod 22121}#)
                             '(()))))
                     (make-struct/no-tail
                       (vector-ref %expanded-vtables 1)
                       #{s 22120}#
                       #{exp 22767}#))
                   (if (eqv? #{type 22115}# 'global)
                     (#{analyze-variable 4306}#
                       #{mod 22121}#
                       #{value 22116}#
                       (lambda (#{mod 22803}# #{var 22804}# #{public? 22805}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #{s 22120}#
                           #{mod 22803}#
                           #{var 22804}#
                           #{public? 22805}#))
                       (lambda (#{var 22814}#)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #{s 22120}#
                           #{var 22814}#)))
                     (if (eqv? #{type 22115}# 'call)
                       (#{chi-application 4368}#
                         (#{chi 4366}#
                           (car #{e 22117}#)
                           #{r 22118}#
                           #{w 22119}#
                           #{mod 22121}#)
                         #{e 22117}#
                         #{r 22118}#
                         #{w 22119}#
                         #{s 22120}#
                         #{mod 22121}#)
                       (if (eqv? #{type 22115}# 'begin-form)
                         (let ((#{tmp 22894}#
                                 ($sc-dispatch
                                   #{e 22117}#
                                   '(_ any . each-any))))
                           (if #{tmp 22894}#
                             (@apply
                               (lambda (#{e1 22898}# #{e2 22899}#)
                                 (#{chi-sequence 4361}#
                                   (cons #{e1 22898}# #{e2 22899}#)
                                   #{r 22118}#
                                   #{w 22119}#
                                   #{s 22120}#
                                   #{mod 22121}#))
                               #{tmp 22894}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{e 22117}#)))
                         (if (eqv? #{type 22115}# 'local-syntax-form)
                           (#{chi-local-syntax 4371}#
                             #{value 22116}#
                             #{e 22117}#
                             #{r 22118}#
                             #{w 22119}#
                             #{s 22120}#
                             #{mod 22121}#
                             #{chi-sequence 4361}#)
                           (if (eqv? #{type 22115}# 'eval-when-form)
                             (let ((#{tmp 23065}#
                                     ($sc-dispatch
                                       #{e 22117}#
                                       '(_ each-any any . each-any))))
                               (if #{tmp 23065}#
                                 (@apply
                                   (lambda (#{x 23069}#
                                            #{e1 23070}#
                                            #{e2 23071}#)
                                     (let ((#{when-list 23072}#
                                             (#{chi-when-list 4364}#
                                               #{e 22117}#
                                               #{x 23069}#
                                               #{w 22119}#)))
                                       (if (memq 'eval #{when-list 23072}#)
                                         (#{chi-sequence 4361}#
                                           (cons #{e1 23070}# #{e2 23071}#)
                                           #{r 22118}#
                                           #{w 22119}#
                                           #{s 22120}#
                                           #{mod 22121}#)
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 0)
                                           #f))))
                                   #{tmp 23065}#)
                                 (syntax-violation
                                   #f
                                   "source expression failed to match any pattern"
                                   #{e 22117}#)))
                             (if (if (eqv? #{type 22115}# 'define-form)
                                   #t
                                   (eqv? #{type 22115}# 'define-syntax-form))
                               (syntax-violation
                                 #f
                                 "definition in expression context"
                                 #{e 22117}#
                                 (#{wrap 4359}#
                                   #{value 22116}#
                                   #{w 22119}#
                                   #{mod 22121}#))
                               (if (eqv? #{type 22115}# 'syntax)
                                 (syntax-violation
                                   #f
                                   "reference to pattern variable outside syntax form"
                                   (#{wrap 4359}#
                                     (begin
                                       (if (if (pair? #{e 22117}#)
                                             #{s 22120}#
                                             #f)
                                         (set-source-properties!
                                           #{e 22117}#
                                           #{s 22120}#))
                                       #{e 22117}#)
                                     #{w 22119}#
                                     #{mod 22121}#))
                                 (if (eqv? #{type 22115}# 'displaced-lexical)
                                   (syntax-violation
                                     #f
                                     "reference to identifier outside its scope"
                                     (#{wrap 4359}#
                                       (begin
                                         (if (if (pair? #{e 22117}#)
                                               #{s 22120}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22117}#
                                             #{s 22120}#))
                                         #{e 22117}#)
                                       #{w 22119}#
                                       #{mod 22121}#))
                                   (syntax-violation
                                     #f
                                     "unexpected syntax"
                                     (#{wrap 4359}#
                                       (begin
                                         (if (if (pair? #{e 22117}#)
                                               #{s 22120}#
                                               #f)
                                           (set-source-properties!
                                             #{e 22117}#
                                             #{s 22120}#))
                                         #{e 22117}#)
                                       #{w 22119}#
                                       #{mod 22121}#))))))))))))))))))
   (#{chi-application 4368}#
     (lambda (#{x 23261}#
              #{e 23262}#
              #{r 23263}#
              #{w 23264}#
              #{s 23265}#
              #{mod 23266}#)
       (let ((#{tmp 23268}#
               ($sc-dispatch #{e 23262}# '(any . each-any))))
         (if #{tmp 23268}#
           (@apply
             (lambda (#{e0 23272}# #{e1 23273}#)
               (#{build-application 4301}#
                 #{s 23265}#
                 #{x 23261}#
                 (map (lambda (#{e 23358}#)
                        (#{chi 4366}#
                          #{e 23358}#
                          #{r 23263}#
                          #{w 23264}#
                          #{mod 23266}#))
                      #{e1 23273}#)))
             #{tmp 23268}#)
           (syntax-violation
             #f
             "source expression failed to match any pattern"
             #{e 23262}#)))))
   (#{chi-macro 4369}#
     (lambda (#{p 23439}#
              #{e 23440}#
              #{r 23441}#
              #{w 23442}#
              #{s 23443}#
              #{rib 23444}#
              #{mod 23445}#)
       (letrec*
         ((#{rebuild-macro-output 23446}#
            (lambda (#{x 23477}# #{m 23478}#)
              (if (pair? #{x 23477}#)
                (let ((#{e 23482}#
                        (cons (#{rebuild-macro-output 23446}#
                                (car #{x 23477}#)
                                #{m 23478}#)
                              (#{rebuild-macro-output 23446}#
                                (cdr #{x 23477}#)
                                #{m 23478}#))))
                  (begin
                    (if (if (pair? #{e 23482}#) #{s 23443}# #f)
                      (set-source-properties! #{e 23482}# #{s 23443}#))
                    #{e 23482}#))
                (if (if (vector? #{x 23477}#)
                      (if (= (vector-length #{x 23477}#) 4)
                        (eq? (vector-ref #{x 23477}# 0) 'syntax-object)
                        #f)
                      #f)
                  (let ((#{w 23498}# (vector-ref #{x 23477}# 2)))
                    (let ((#{ms 23499}# (car #{w 23498}#))
                          (#{s 23500}# (cdr #{w 23498}#)))
                      (if (if (pair? #{ms 23499}#)
                            (eq? (car #{ms 23499}#) #f)
                            #f)
                        (let ((#{expression 23508}# (vector-ref #{x 23477}# 1))
                              (#{wrap 23509}#
                                (cons (cdr #{ms 23499}#)
                                      (if #{rib 23444}#
                                        (cons #{rib 23444}# (cdr #{s 23500}#))
                                        (cdr #{s 23500}#))))
                              (#{module 23510}# (vector-ref #{x 23477}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23508}#
                            #{wrap 23509}#
                            #{module 23510}#))
                        (let ((#{expression 23520}#
                                (let ((#{e 23525}# (vector-ref #{x 23477}# 1)))
                                  (begin
                                    (if (if (pair? #{e 23525}#) #{s 23500}# #f)
                                      (set-source-properties!
                                        #{e 23525}#
                                        #{s 23500}#))
                                    #{e 23525}#)))
                              (#{wrap 23521}#
                                (cons (cons #{m 23478}# #{ms 23499}#)
                                      (if #{rib 23444}#
                                        (cons #{rib 23444}#
                                              (cons 'shift #{s 23500}#))
                                        (cons 'shift #{s 23500}#))))
                              (#{module 23522}# (vector-ref #{x 23477}# 3)))
                          (vector
                            'syntax-object
                            #{expression 23520}#
                            #{wrap 23521}#
                            #{module 23522}#)))))
                  (if (vector? #{x 23477}#)
                    (let ((#{n 23537}# (vector-length #{x 23477}#)))
                      (let ((#{v 23538}#
                              (let ((#{e 23546}# (make-vector #{n 23537}#)))
                                (begin
                                  (if (if (pair? #{e 23546}#) #{x 23477}# #f)
                                    (set-source-properties!
                                      #{e 23546}#
                                      #{x 23477}#))
                                  #{e 23546}#))))
                        (letrec*
                          ((#{loop 23539}#
                             (lambda (#{i 23591}#)
                               (if (= #{i 23591}# #{n 23537}#)
                                 #{v 23538}#
                                 (begin
                                   (vector-set!
                                     #{v 23538}#
                                     #{i 23591}#
                                     (#{rebuild-macro-output 23446}#
                                       (vector-ref #{x 23477}# #{i 23591}#)
                                       #{m 23478}#))
                                   (#{loop 23539}# (#{1+}# #{i 23591}#)))))))
                          (#{loop 23539}# 0))))
                    (if (symbol? #{x 23477}#)
                      (syntax-violation
                        #f
                        "encountered raw symbol in macro output"
                        (let ((#{s 23597}# (cdr #{w 23442}#)))
                          (#{wrap 4359}#
                            (begin
                              (if (if (pair? #{e 23440}#) #{s 23597}# #f)
                                (set-source-properties!
                                  #{e 23440}#
                                  #{s 23597}#))
                              #{e 23440}#)
                            #{w 23442}#
                            #{mod 23445}#))
                        #{x 23477}#)
                      (begin
                        (if (if (pair? #{x 23477}#) #{s 23443}# #f)
                          (set-source-properties! #{x 23477}# #{s 23443}#))
                        #{x 23477}#))))))))
         (#{rebuild-macro-output 23446}#
           (#{p 23439}#
             (let ((#{w 23453}#
                     (cons (cons #f (car #{w 23442}#))
                           (cons 'shift (cdr #{w 23442}#)))))
               (#{wrap 4359}#
                 (begin
                   (if (if (pair? #{e 23440}#) #{s 23443}# #f)
                     (set-source-properties! #{e 23440}# #{s 23443}#))
                   #{e 23440}#)
                 #{w 23453}#
                 #{mod 23445}#)))
           (gensym "m")))))
   (#{chi-body 4370}#
     (lambda (#{body 23629}#
              #{outer-form 23630}#
              #{r 23631}#
              #{w 23632}#
              #{mod 23633}#)
       (let ((#{r 23634}#
               (cons '("placeholder" placeholder) #{r 23631}#)))
         (let ((#{ribcage 23635}# (vector 'ribcage '() '() '())))
           (let ((#{w 23636}#
                   (cons (car #{w 23632}#)
                         (cons #{ribcage 23635}# (cdr #{w 23632}#)))))
             (letrec*
               ((#{parse 23637}#
                  (lambda (#{body 23650}#
                           #{ids 23651}#
                           #{labels 23652}#
                           #{var-ids 23653}#
                           #{vars 23654}#
                           #{vals 23655}#
                           #{bindings 23656}#)
                    (if (null? #{body 23650}#)
                      (syntax-violation
                        #f
                        "no expressions in body"
                        #{outer-form 23630}#)
                      (let ((#{e 23657}# (cdr (car #{body 23650}#)))
                            (#{er 23658}# (car (car #{body 23650}#))))
                        (call-with-values
                          (lambda ()
                            (#{syntax-type 4365}#
                              #{e 23657}#
                              #{er 23658}#
                              '(())
                              (#{source-annotation 4327}# #{er 23658}#)
                              #{ribcage 23635}#
                              #{mod 23633}#
                              #f))
                          (lambda (#{type 23834}#
                                   #{value 23835}#
                                   #{e 23836}#
                                   #{w 23837}#
                                   #{s 23838}#
                                   #{mod 23839}#)
                            (if (eqv? #{type 23834}# 'define-form)
                              (let ((#{id 23843}#
                                      (#{wrap 4359}#
                                        #{value 23835}#
                                        #{w 23837}#
                                        #{mod 23839}#))
                                    (#{label 23844}#
                                      (symbol->string (gensym "i"))))
                                (let ((#{var 23845}#
                                        (let ((#{id 23905}#
                                                (if (if (vector? #{id 23843}#)
                                                      (if (= (vector-length
                                                               #{id 23843}#)
                                                             4)
                                                        (eq? (vector-ref
                                                               #{id 23843}#
                                                               0)
                                                             'syntax-object)
                                                        #f)
                                                      #f)
                                                  (vector-ref #{id 23843}# 1)
                                                  #{id 23843}#)))
                                          (gensym
                                            (string-append
                                              (symbol->string #{id 23905}#)
                                              " ")))))
                                  (begin
                                    (let ((#{update 23895}#
                                            (cons (vector-ref #{id 23843}# 1)
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        1
                                        #{update 23895}#))
                                    (let ((#{update 23897}#
                                            (cons (car (vector-ref
                                                         #{id 23843}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        2
                                        #{update 23897}#))
                                    (let ((#{update 23899}#
                                            (cons #{label 23844}#
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        3
                                        #{update 23899}#))
                                    (#{parse 23637}#
                                      (cdr #{body 23650}#)
                                      (cons #{id 23843}# #{ids 23651}#)
                                      (cons #{label 23844}# #{labels 23652}#)
                                      (cons #{id 23843}# #{var-ids 23653}#)
                                      (cons #{var 23845}# #{vars 23654}#)
                                      (cons (cons #{er 23658}#
                                                  (#{wrap 4359}#
                                                    #{e 23836}#
                                                    #{w 23837}#
                                                    #{mod 23839}#))
                                            #{vals 23655}#)
                                      (cons (cons 'lexical #{var 23845}#)
                                            #{bindings 23656}#)))))
                              (if (eqv? #{type 23834}# 'define-syntax-form)
                                (let ((#{id 23933}#
                                        (#{wrap 4359}#
                                          #{value 23835}#
                                          #{w 23837}#
                                          #{mod 23839}#))
                                      (#{label 23934}#
                                        (symbol->string (gensym "i"))))
                                  (begin
                                    (let ((#{update 23984}#
                                            (cons (vector-ref #{id 23933}# 1)
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    1))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        1
                                        #{update 23984}#))
                                    (let ((#{update 23986}#
                                            (cons (car (vector-ref
                                                         #{id 23933}#
                                                         2))
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    2))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        2
                                        #{update 23986}#))
                                    (let ((#{update 23988}#
                                            (cons #{label 23934}#
                                                  (vector-ref
                                                    #{ribcage 23635}#
                                                    3))))
                                      (vector-set!
                                        #{ribcage 23635}#
                                        3
                                        #{update 23988}#))
                                    (#{parse 23637}#
                                      (cdr #{body 23650}#)
                                      (cons #{id 23933}# #{ids 23651}#)
                                      (cons #{label 23934}# #{labels 23652}#)
                                      #{var-ids 23653}#
                                      #{vars 23654}#
                                      #{vals 23655}#
                                      (cons (cons 'macro
                                                  (cons #{er 23658}#
                                                        (#{wrap 4359}#
                                                          #{e 23836}#
                                                          #{w 23837}#
                                                          #{mod 23839}#)))
                                            #{bindings 23656}#))))
                                (if (eqv? #{type 23834}# 'begin-form)
                                  (let ((#{tmp 23996}#
                                          ($sc-dispatch
                                            #{e 23836}#
                                            '(_ . each-any))))
                                    (if #{tmp 23996}#
                                      (@apply
                                        (lambda (#{e1 24000}#)
                                          (#{parse 23637}#
                                            (letrec*
                                              ((#{f 24001}#
                                                 (lambda (#{forms 24064}#)
                                                   (if (null? #{forms 24064}#)
                                                     (cdr #{body 23650}#)
                                                     (cons (cons #{er 23658}#
                                                                 (#{wrap 4359}#
                                                                   (car #{forms 24064}#)
                                                                   #{w 23837}#
                                                                   #{mod 23839}#))
                                                           (#{f 24001}#
                                                             (cdr #{forms 24064}#)))))))
                                              (#{f 24001}# #{e1 24000}#))
                                            #{ids 23651}#
                                            #{labels 23652}#
                                            #{var-ids 23653}#
                                            #{vars 23654}#
                                            #{vals 23655}#
                                            #{bindings 23656}#))
                                        #{tmp 23996}#)
                                      (syntax-violation
                                        #f
                                        "source expression failed to match any pattern"
                                        #{e 23836}#)))
                                  (if (eqv? #{type 23834}# 'local-syntax-form)
                                    (#{chi-local-syntax 4371}#
                                      #{value 23835}#
                                      #{e 23836}#
                                      #{er 23658}#
                                      #{w 23837}#
                                      #{s 23838}#
                                      #{mod 23839}#
                                      (lambda (#{forms 24078}#
                                               #{er 24079}#
                                               #{w 24080}#
                                               #{s 24081}#
                                               #{mod 24082}#)
                                        (#{parse 23637}#
                                          (letrec*
                                            ((#{f 24083}#
                                               (lambda (#{forms 24146}#)
                                                 (if (null? #{forms 24146}#)
                                                   (cdr #{body 23650}#)
                                                   (cons (cons #{er 24079}#
                                                               (#{wrap 4359}#
                                                                 (car #{forms 24146}#)
                                                                 #{w 24080}#
                                                                 #{mod 24082}#))
                                                         (#{f 24083}#
                                                           (cdr #{forms 24146}#)))))))
                                            (#{f 24083}# #{forms 24078}#))
                                          #{ids 23651}#
                                          #{labels 23652}#
                                          #{var-ids 23653}#
                                          #{vars 23654}#
                                          #{vals 23655}#
                                          #{bindings 23656}#)))
                                    (if (null? #{ids 23651}#)
                                      (#{build-sequence 4315}#
                                        #f
                                        (map (lambda (#{x 24216}#)
                                               (#{chi 4366}#
                                                 (cdr #{x 24216}#)
                                                 (car #{x 24216}#)
                                                 '(())
                                                 #{mod 23839}#))
                                             (cons (cons #{er 23658}#
                                                         (#{wrap 4359}#
                                                           (begin
                                                             (if (if (pair? #{e 23836}#)
                                                                   #{s 23838}#
                                                                   #f)
                                                               (set-source-properties!
                                                                 #{e 23836}#
                                                                 #{s 23838}#))
                                                             #{e 23836}#)
                                                           #{w 23837}#
                                                           #{mod 23839}#))
                                                   (cdr #{body 23650}#))))
                                      (begin
                                        (if (not (#{valid-bound-ids? 4356}#
                                                   #{ids 23651}#))
                                          (syntax-violation
                                            #f
                                            "invalid or duplicate identifier in definition"
                                            #{outer-form 23630}#))
                                        (letrec*
                                          ((#{loop 24378}#
                                             (lambda (#{bs 24381}#
                                                      #{er-cache 24382}#
                                                      #{r-cache 24383}#)
                                               (if (not (null? #{bs 24381}#))
                                                 (let ((#{b 24384}#
                                                         (car #{bs 24381}#)))
                                                   (if (eq? (car #{b 24384}#)
                                                            'macro)
                                                     (let ((#{er 24386}#
                                                             (car (cdr #{b 24384}#))))
                                                       (let ((#{r-cache 24387}#
                                                               (if (eq? #{er 24386}#
                                                                        #{er-cache 24382}#)
                                                                 #{r-cache 24383}#
                                                                 (#{macros-only-env 4330}#
                                                                   #{er 24386}#))))
                                                         (begin
                                                           (set-cdr!
                                                             #{b 24384}#
                                                             (#{eval-local-transformer 4372}#
                                                               (#{chi 4366}#
                                                                 (cdr (cdr #{b 24384}#))
                                                                 #{r-cache 24387}#
                                                                 '(())
                                                                 #{mod 23839}#)
                                                               #{mod 23839}#))
                                                           (#{loop 24378}#
                                                             (cdr #{bs 24381}#)
                                                             #{er 24386}#
                                                             #{r-cache 24387}#))))
                                                     (#{loop 24378}#
                                                       (cdr #{bs 24381}#)
                                                       #{er-cache 24382}#
                                                       #{r-cache 24383}#)))))))
                                          (#{loop 24378}#
                                            #{bindings 23656}#
                                            #f
                                            #f))
                                        (set-cdr!
                                          #{r 23634}#
                                          (#{extend-env 4328}#
                                            #{labels 23652}#
                                            #{bindings 23656}#
                                            (cdr #{r 23634}#)))
                                        (#{build-letrec 4318}#
                                          #f
                                          #t
                                          (reverse
                                            (map syntax->datum
                                                 #{var-ids 23653}#))
                                          (reverse #{vars 23654}#)
                                          (map (lambda (#{x 24740}#)
                                                 (#{chi 4366}#
                                                   (cdr #{x 24740}#)
                                                   (car #{x 24740}#)
                                                   '(())
                                                   #{mod 23839}#))
                                               (reverse #{vals 23655}#))
                                          (#{build-sequence 4315}#
                                            #f
                                            (map (lambda (#{x 24870}#)
                                                   (#{chi 4366}#
                                                     (cdr #{x 24870}#)
                                                     (car #{x 24870}#)
                                                     '(())
                                                     #{mod 23839}#))
                                                 (cons (cons #{er 23658}#
                                                             (#{wrap 4359}#
                                                               (begin
                                                                 (if (if (pair? #{e 23836}#)
                                                                       #{s 23838}#
                                                                       #f)
                                                                   (set-source-properties!
                                                                     #{e 23836}#
                                                                     #{s 23838}#))
                                                                 #{e 23836}#)
                                                               #{w 23837}#
                                                               #{mod 23839}#))
                                                       (cdr #{body 23650}#))))))))))))))))))
               (#{parse 23637}#
                 (map (lambda (#{x 23640}#)
                        (cons #{r 23634}#
                              (#{wrap 4359}#
                                #{x 23640}#
                                #{w 23636}#
                                #{mod 23633}#)))
                      #{body 23629}#)
                 '()
                 '()
                 '()
                 '()
                 '()
                 '())))))))
   (#{chi-local-syntax 4371}#
     (lambda (#{rec? 24955}#
              #{e 24956}#
              #{r 24957}#
              #{w 24958}#
              #{s 24959}#
              #{mod 24960}#
              #{k 24961}#)
       (let ((#{tmp 24963}#
               ($sc-dispatch
                 #{e 24956}#
                 '(_ #(each (any any)) any . each-any))))
         (if #{tmp 24963}#
           (@apply
             (lambda (#{id 24967}#
                      #{val 24968}#
                      #{e1 24969}#
                      #{e2 24970}#)
               (if (not (#{valid-bound-ids? 4356}# #{id 24967}#))
                 (syntax-violation
                   #f
                   "duplicate bound keyword"
                   #{e 24956}#)
                 (let ((#{labels 25060}#
                         (#{gen-labels 4337}# #{id 24967}#)))
                   (let ((#{new-w 25061}#
                           (#{make-binding-wrap 4348}#
                             #{id 24967}#
                             #{labels 25060}#
                             #{w 24958}#)))
                     (#{k 24961}#
                       (cons #{e1 24969}# #{e2 24970}#)
                       (#{extend-env 4328}#
                         #{labels 25060}#
                         (let ((#{trans-r 25099}#
                                 (#{macros-only-env 4330}# #{r 24957}#)))
                           (begin
                             (if #{rec? 24955}# (if #f #f))
                             (map (lambda (#{x 25100}#)
                                    (cons 'macro
                                          (#{eval-local-transformer 4372}#
                                            (#{chi 4366}#
                                              #{x 25100}#
                                              #{trans-r 25099}#
                                              (if #{rec? 24955}#
                                                #{new-w 25061}#
                                                #{w 24958}#)
                                              #{mod 24960}#)
                                            #{mod 24960}#)))
                                  #{val 24968}#)))
                         #{r 24957}#)
                       #{new-w 25061}#
                       #{s 24959}#
                       #{mod 24960}#)))))
             #{tmp 24963}#)
           (syntax-violation
             #f
             "bad local syntax definition"
             (#{wrap 4359}#
               (begin
                 (if (if (pair? #{e 24956}#) #{s 24959}# #f)
                   (set-source-properties! #{e 24956}# #{s 24959}#))
                 #{e 24956}#)
               #{w 24958}#
               #{mod 24960}#))))))
   (#{eval-local-transformer 4372}#
     (lambda (#{expanded 25401}# #{mod 25402}#)
       (let ((#{p 25403}# (primitive-eval #{expanded 25401}#)))
         (if (procedure? #{p 25403}#)
           #{p 25403}#
           (syntax-violation
             #f
             "nonprocedure transformer"
             #{p 25403}#)))))
   (#{ellipsis? 4374}#
     (lambda (#{x 5180}#)
       (if (if (if (vector? #{x 5180}#)
                 (if (= (vector-length #{x 5180}#) 4)
                   (eq? (vector-ref #{x 5180}# 0) 'syntax-object)
                   #f)
                 #f)
             (symbol? (vector-ref #{x 5180}# 1))
             #f)
         (if (eq? (if (if (vector? #{x 5180}#)
                        (if (= (vector-length #{x 5180}#) 4)
                          (eq? (vector-ref #{x 5180}# 0) 'syntax-object)
                          #f)
                        #f)
                    (vector-ref #{x 5180}# 1)
                    #{x 5180}#)
                  (if (if (= (vector-length
                               '#(syntax-object
                                  ...
                                  ((top)
                                   #(ribcage () () ())
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i2251"))
                                   #(ribcage
                                     (lambda-var-list
                                       gen-var
                                       strip
                                       chi-lambda-case
                                       lambda*-formals
                                       chi-simple-lambda
                                       lambda-formals
                                       ellipsis?
                                       chi-void
                                       eval-local-transformer
                                       chi-local-syntax
                                       chi-body
                                       chi-macro
                                       chi-application
                                       chi-expr
                                       chi
                                       syntax-type
                                       chi-when-list
                                       chi-install-global
                                       chi-top-sequence
                                       chi-sequence
                                       source-wrap
                                       wrap
                                       bound-id-member?
                                       distinct-bound-ids?
                                       valid-bound-ids?
                                       bound-id=?
                                       free-id=?
                                       id-var-name
                                       same-marks?
                                       join-marks
                                       join-wraps
                                       smart-append
                                       make-binding-wrap
                                       extend-ribcage!
                                       make-empty-ribcage
                                       new-mark
                                       anti-mark
                                       the-anti-mark
                                       top-marked?
                                       top-wrap
                                       empty-wrap
                                       set-ribcage-labels!
                                       set-ribcage-marks!
                                       set-ribcage-symnames!
                                       ribcage-labels
                                       ribcage-marks
                                       ribcage-symnames
                                       ribcage?
                                       make-ribcage
                                       gen-labels
                                       gen-label
                                       make-rename
                                       rename-marks
                                       rename-new
                                       rename-old
                                       subst-rename?
                                       wrap-subst
                                       wrap-marks
                                       make-wrap
                                       id-sym-name&marks
                                       id-sym-name
                                       id?
                                       nonsymbol-id?
                                       global-extend
                                       lookup
                                       macros-only-env
                                       extend-var-env
                                       extend-env
                                       null-env
                                       binding-value
                                       binding-type
                                       make-binding
                                       arg-check
                                       source-annotation
                                       no-source
                                       set-syntax-object-module!
                                       set-syntax-object-wrap!
                                       set-syntax-object-expression!
                                       syntax-object-module
                                       syntax-object-wrap
                                       syntax-object-expression
                                       syntax-object?
                                       make-syntax-object
                                       build-lexical-var
                                       build-letrec
                                       build-named-let
                                       build-let
                                       build-sequence
                                       build-data
                                       build-primref
                                       build-lambda-case
                                       build-case-lambda
                                       build-simple-lambda
                                       build-global-definition
                                       build-global-assignment
                                       build-global-reference
                                       analyze-variable
                                       build-lexical-assignment
                                       build-lexical-reference
                                       build-dynlet
                                       build-conditional
                                       build-application
                                       build-void
                                       maybe-name-value!
                                       decorate-source
                                       get-global-definition-hook
                                       put-global-definition-hook
                                       gensym-hook
                                       local-eval-hook
                                       top-level-eval-hook
                                       fx<
                                       fx=
                                       fx-
                                       fx+
                                       set-lambda-meta!
                                       lambda-meta
                                       lambda?
                                       make-dynlet
                                       make-letrec
                                       make-let
                                       make-lambda-case
                                       make-lambda
                                       make-sequence
                                       make-application
                                       make-conditional
                                       make-toplevel-define
                                       make-toplevel-set
                                       make-toplevel-ref
                                       make-module-set
                                       make-module-ref
                                       make-lexical-set
                                       make-lexical-ref
                                       make-primitive-ref
                                       make-const
                                       make-void)
                                     ((top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top)
                                      (top))
                                     ("i467"
                                      "i465"
                                      "i463"
                                      "i461"
                                      "i459"
                                      "i457"
                                      "i455"
                                      "i453"
                                      "i451"
                                      "i449"
                                      "i447"
                                      "i445"
                                      "i443"
                                      "i441"
                                      "i439"
                                      "i437"
                                      "i435"
                                      "i433"
                                      "i431"
                                      "i429"
                                      "i427"
                                      "i425"
                                      "i423"
                                      "i421"
                                      "i419"
                                      "i417"
                                      "i415"
                                      "i413"
                                      "i411"
                                      "i409"
                                      "i407"
                                      "i405"
                                      "i403"
                                      "i401"
                                      "i399"
                                      "i398"
                                      "i396"
                                      "i393"
                                      "i392"
                                      "i391"
                                      "i389"
                                      "i388"
                                      "i386"
                                      "i384"
                                      "i382"
                                      "i380"
                                      "i378"
                                      "i376"
                                      "i374"
                                      "i372"
                                      "i369"
                                      "i367"
                                      "i366"
                                      "i364"
                                      "i362"
                                      "i360"
                                      "i358"
                                      "i357"
                                      "i356"
                                      "i355"
                                      "i353"
                                      "i352"
                                      "i349"
                                      "i347"
                                      "i345"
                                      "i343"
                                      "i341"
                                      "i339"
                                      "i337"
                                      "i336"
                                      "i335"
                                      "i333"
                                      "i331"
                                      "i330"
                                      "i327"
                                      "i326"
                                      "i324"
                                      "i322"
                                      "i320"
                                      "i318"
                                      "i316"
                                      "i314"
                                      "i312"
                                      "i310"
                                      "i308"
                                      "i305"
                                      "i303"
                                      "i301"
                                      "i299"
                                      "i297"
                                      "i295"
                                      "i293"
                                      "i291"
                                      "i289"
                                      "i287"
                                      "i285"
                                      "i283"
                                      "i281"
                                      "i279"
                                      "i277"
                                      "i275"
                                      "i273"
                                      "i271"
                                      "i269"
                                      "i267"
                                      "i265"
                                      "i263"
                                      "i261"
                                      "i260"
                                      "i257"
                                      "i255"
                                      "i254"
                                      "i253"
                                      "i252"
                                      "i251"
                                      "i249"
                                      "i247"
                                      "i245"
                                      "i242"
                                      "i240"
                                      "i238"
                                      "i236"
                                      "i234"
                                      "i232"
                                      "i230"
                                      "i228"
                                      "i226"
                                      "i224"
                                      "i222"
                                      "i220"
                                      "i218"
                                      "i216"
                                      "i214"
                                      "i212"
                                      "i210"
                                      "i208"))
                                   #(ribcage
                                     (define-structure
                                       define-expansion-accessors
                                       define-expansion-constructors)
                                     ((top) (top) (top))
                                     ("i46" "i45" "i44")))
                                  (hygiene guile)))
                             4)
                        #t
                        #f)
                    '...
                    '#(syntax-object
                       ...
                       ((top)
                        #(ribcage () () ())
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i2251"))
                        #(ribcage
                          (lambda-var-list
                            gen-var
                            strip
                            chi-lambda-case
                            lambda*-formals
                            chi-simple-lambda
                            lambda-formals
                            ellipsis?
                            chi-void
                            eval-local-transformer
                            chi-local-syntax
                            chi-body
                            chi-macro
                            chi-application
                            chi-expr
                            chi
                            syntax-type
                            chi-when-list
                            chi-install-global
                            chi-top-sequence
                            chi-sequence
                            source-wrap
                            wrap
                            bound-id-member?
                            distinct-bound-ids?
                            valid-bound-ids?
                            bound-id=?
                            free-id=?
                            id-var-name
                            same-marks?
                            join-marks
                            join-wraps
                            smart-append
                            make-binding-wrap
                            extend-ribcage!
                            make-empty-ribcage
                            new-mark
                            anti-mark
                            the-anti-mark
                            top-marked?
                            top-wrap
                            empty-wrap
                            set-ribcage-labels!
                            set-ribcage-marks!
                            set-ribcage-symnames!
                            ribcage-labels
                            ribcage-marks
                            ribcage-symnames
                            ribcage?
                            make-ribcage
                            gen-labels
                            gen-label
                            make-rename
                            rename-marks
                            rename-new
                            rename-old
                            subst-rename?
                            wrap-subst
                            wrap-marks
                            make-wrap
                            id-sym-name&marks
                            id-sym-name
                            id?
                            nonsymbol-id?
                            global-extend
                            lookup
                            macros-only-env
                            extend-var-env
                            extend-env
                            null-env
                            binding-value
                            binding-type
                            make-binding
                            arg-check
                            source-annotation
                            no-source
                            set-syntax-object-module!
                            set-syntax-object-wrap!
                            set-syntax-object-expression!
                            syntax-object-module
                            syntax-object-wrap
                            syntax-object-expression
                            syntax-object?
                            make-syntax-object
                            build-lexical-var
                            build-letrec
                            build-named-let
                            build-let
                            build-sequence
                            build-data
                            build-primref
                            build-lambda-case
                            build-case-lambda
                            build-simple-lambda
                            build-global-definition
                            build-global-assignment
                            build-global-reference
                            analyze-variable
                            build-lexical-assignment
                            build-lexical-reference
                            build-dynlet
                            build-conditional
                            build-application
                            build-void
                            maybe-name-value!
                            decorate-source
                            get-global-definition-hook
                            put-global-definition-hook
                            gensym-hook
                            local-eval-hook
                            top-level-eval-hook
                            fx<
                            fx=
                            fx-
                            fx+
                            set-lambda-meta!
                            lambda-meta
                            lambda?
                            make-dynlet
                            make-letrec
                            make-let
                            make-lambda-case
                            make-lambda
                            make-sequence
                            make-application
                            make-conditional
                            make-toplevel-define
                            make-toplevel-set
                            make-toplevel-ref
                            make-module-set
                            make-module-ref
                            make-lexical-set
                            make-lexical-ref
                            make-primitive-ref
                            make-const
                            make-void)
                          ((top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top)
                           (top))
                          ("i467"
                           "i465"
                           "i463"
                           "i461"
                           "i459"
                           "i457"
                           "i455"
                           "i453"
                           "i451"
                           "i449"
                           "i447"
                           "i445"
                           "i443"
                           "i441"
                           "i439"
                           "i437"
                           "i435"
                           "i433"
                           "i431"
                           "i429"
                           "i427"
                           "i425"
                           "i423"
                           "i421"
                           "i419"
                           "i417"
                           "i415"
                           "i413"
                           "i411"
                           "i409"
                           "i407"
                           "i405"
                           "i403"
                           "i401"
                           "i399"
                           "i398"
                           "i396"
                           "i393"
                           "i392"
                           "i391"
                           "i389"
                           "i388"
                           "i386"
                           "i384"
                           "i382"
                           "i380"
                           "i378"
                           "i376"
                           "i374"
                           "i372"
                           "i369"
                           "i367"
                           "i366"
                           "i364"
                           "i362"
                           "i360"
                           "i358"
                           "i357"
                           "i356"
                           "i355"
                           "i353"
                           "i352"
                           "i349"
                           "i347"
                           "i345"
                           "i343"
                           "i341"
                           "i339"
                           "i337"
                           "i336"
                           "i335"
                           "i333"
                           "i331"
                           "i330"
                           "i327"
                           "i326"
                           "i324"
                           "i322"
                           "i320"
                           "i318"
                           "i316"
                           "i314"
                           "i312"
                           "i310"
                           "i308"
                           "i305"
                           "i303"
                           "i301"
                           "i299"
                           "i297"
                           "i295"
                           "i293"
                           "i291"
                           "i289"
                           "i287"
                           "i285"
                           "i283"
                           "i281"
                           "i279"
                           "i277"
                           "i275"
                           "i273"
                           "i271"
                           "i269"
                           "i267"
                           "i265"
                           "i263"
                           "i261"
                           "i260"
                           "i257"
                           "i255"
                           "i254"
                           "i253"
                           "i252"
                           "i251"
                           "i249"
                           "i247"
                           "i245"
                           "i242"
                           "i240"
                           "i238"
                           "i236"
                           "i234"
                           "i232"
                           "i230"
                           "i228"
                           "i226"
                           "i224"
                           "i222"
                           "i220"
                           "i218"
                           "i216"
                           "i214"
                           "i212"
                           "i210"
                           "i208"))
                        #(ribcage
                          (define-structure
                            define-expansion-accessors
                            define-expansion-constructors)
                          ((top) (top) (top))
                          ("i46" "i45" "i44")))
                       (hygiene guile))))
           (eq? (#{id-var-name 4353}# #{x 5180}# '(()))
                (#{id-var-name 4353}#
                  '#(syntax-object
                     ...
                     ((top)
                      #(ribcage () () ())
                      #(ribcage () () ())
                      #(ribcage #(x) #((top)) #("i2251"))
                      #(ribcage
                        (lambda-var-list
                          gen-var
                          strip
                          chi-lambda-case
                          lambda*-formals
                          chi-simple-lambda
                          lambda-formals
                          ellipsis?
                          chi-void
                          eval-local-transformer
                          chi-local-syntax
                          chi-body
                          chi-macro
                          chi-application
                          chi-expr
                          chi
                          syntax-type
                          chi-when-list
                          chi-install-global
                          chi-top-sequence
                          chi-sequence
                          source-wrap
                          wrap
                          bound-id-member?
                          distinct-bound-ids?
                          valid-bound-ids?
                          bound-id=?
                          free-id=?
                          id-var-name
                          same-marks?
                          join-marks
                          join-wraps
                          smart-append
                          make-binding-wrap
                          extend-ribcage!
                          make-empty-ribcage
                          new-mark
                          anti-mark
                          the-anti-mark
                          top-marked?
                          top-wrap
                          empty-wrap
                          set-ribcage-labels!
                          set-ribcage-marks!
                          set-ribcage-symnames!
                          ribcage-labels
                          ribcage-marks
                          ribcage-symnames
                          ribcage?
                          make-ribcage
                          gen-labels
                          gen-label
                          make-rename
                          rename-marks
                          rename-new
                          rename-old
                          subst-rename?
                          wrap-subst
                          wrap-marks
                          make-wrap
                          id-sym-name&marks
                          id-sym-name
                          id?
                          nonsymbol-id?
                          global-extend
                          lookup
                          macros-only-env
                          extend-var-env
                          extend-env
                          null-env
                          binding-value
                          binding-type
                          make-binding
                          arg-check
                          source-annotation
                          no-source
                          set-syntax-object-module!
                          set-syntax-object-wrap!
                          set-syntax-object-expression!
                          syntax-object-module
                          syntax-object-wrap
                          syntax-object-expression
                          syntax-object?
                          make-syntax-object
                          build-lexical-var
                          build-letrec
                          build-named-let
                          build-let
                          build-sequence
                          build-data
                          build-primref
                          build-lambda-case
                          build-case-lambda
                          build-simple-lambda
                          build-global-definition
                          build-global-assignment
                          build-global-reference
                          analyze-variable
                          build-lexical-assignment
                          build-lexical-reference
                          build-dynlet
                          build-conditional
                          build-application
                          build-void
                          maybe-name-value!
                          decorate-source
                          get-global-definition-hook
                          put-global-definition-hook
                          gensym-hook
                          local-eval-hook
                          top-level-eval-hook
                          fx<
                          fx=
                          fx-
                          fx+
                          set-lambda-meta!
                          lambda-meta
                          lambda?
                          make-dynlet
                          make-letrec
                          make-let
                          make-lambda-case
                          make-lambda
                          make-sequence
                          make-application
                          make-conditional
                          make-toplevel-define
                          make-toplevel-set
                          make-toplevel-ref
                          make-module-set
                          make-module-ref
                          make-lexical-set
                          make-lexical-ref
                          make-primitive-ref
                          make-const
                          make-void)
                        ((top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top)
                         (top))
                        ("i467"
                         "i465"
                         "i463"
                         "i461"
                         "i459"
                         "i457"
                         "i455"
                         "i453"
                         "i451"
                         "i449"
                         "i447"
                         "i445"
                         "i443"
                         "i441"
                         "i439"
                         "i437"
                         "i435"
                         "i433"
                         "i431"
                         "i429"
                         "i427"
                         "i425"
                         "i423"
                         "i421"
                         "i419"
                         "i417"
                         "i415"
                         "i413"
                         "i411"
                         "i409"
                         "i407"
                         "i405"
                         "i403"
                         "i401"
                         "i399"
                         "i398"
                         "i396"
                         "i393"
                         "i392"
                         "i391"
                         "i389"
                         "i388"
                         "i386"
                         "i384"
                         "i382"
                         "i380"
                         "i378"
                         "i376"
                         "i374"
                         "i372"
                         "i369"
                         "i367"
                         "i366"
                         "i364"
                         "i362"
                         "i360"
                         "i358"
                         "i357"
                         "i356"
                         "i355"
                         "i353"
                         "i352"
                         "i349"
                         "i347"
                         "i345"
                         "i343"
                         "i341"
                         "i339"
                         "i337"
                         "i336"
                         "i335"
                         "i333"
                         "i331"
                         "i330"
                         "i327"
                         "i326"
                         "i324"
                         "i322"
                         "i320"
                         "i318"
                         "i316"
                         "i314"
                         "i312"
                         "i310"
                         "i308"
                         "i305"
                         "i303"
                         "i301"
                         "i299"
                         "i297"
                         "i295"
                         "i293"
                         "i291"
                         "i289"
                         "i287"
                         "i285"
                         "i283"
                         "i281"
                         "i279"
                         "i277"
                         "i275"
                         "i273"
                         "i271"
                         "i269"
                         "i267"
                         "i265"
                         "i263"
                         "i261"
                         "i260"
                         "i257"
                         "i255"
                         "i254"
                         "i253"
                         "i252"
                         "i251"
                         "i249"
                         "i247"
                         "i245"
                         "i242"
                         "i240"
                         "i238"
                         "i236"
                         "i234"
                         "i232"
                         "i230"
                         "i228"
                         "i226"
                         "i224"
                         "i222"
                         "i220"
                         "i218"
                         "i216"
                         "i214"
                         "i212"
                         "i210"
                         "i208"))
                      #(ribcage
                        (define-structure
                          define-expansion-accessors
                          define-expansion-constructors)
                        ((top) (top) (top))
                        ("i46" "i45" "i44")))
                     (hygiene guile))
                  '(())))
           #f)
         #f)))
   (#{lambda-formals 4375}#
     (lambda (#{orig-args 25408}#)
       (letrec*
         ((#{req 25409}#
            (lambda (#{args 25413}# #{rreq 25414}#)
              (let ((#{tmp 25416}# ($sc-dispatch #{args 25413}# '())))
                (if #{tmp 25416}#
                  (@apply
                    (lambda ()
                      (#{check 25410}# (reverse #{rreq 25414}#) #f))
                    #{tmp 25416}#)
                  (let ((#{tmp 25543}#
                          ($sc-dispatch #{args 25413}# '(any . any))))
                    (if (if #{tmp 25543}#
                          (@apply
                            (lambda (#{a 25547}# #{b 25548}#)
                              (if (symbol? #{a 25547}#)
                                #t
                                (if (if (vector? #{a 25547}#)
                                      (if (= (vector-length #{a 25547}#) 4)
                                        (eq? (vector-ref #{a 25547}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 25547}# 1))
                                  #f)))
                            #{tmp 25543}#)
                          #f)
                      (@apply
                        (lambda (#{a 25575}# #{b 25576}#)
                          (#{req 25409}#
                            #{b 25576}#
                            (cons #{a 25575}# #{rreq 25414}#)))
                        #{tmp 25543}#)
                      (let ((#{tmp 25577}# (list #{args 25413}#)))
                        (if (@apply
                              (lambda (#{r 25579}#)
                                (if (symbol? #{r 25579}#)
                                  #t
                                  (if (if (vector? #{r 25579}#)
                                        (if (= (vector-length #{r 25579}#) 4)
                                          (eq? (vector-ref #{r 25579}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{r 25579}# 1))
                                    #f)))
                              #{tmp 25577}#)
                          (@apply
                            (lambda (#{r 25609}#)
                              (#{check 25410}#
                                (reverse #{rreq 25414}#)
                                #{r 25609}#))
                            #{tmp 25577}#)
                          (syntax-violation
                            'lambda
                            "invalid argument list"
                            #{orig-args 25408}#
                            #{args 25413}#)))))))))
          (#{check 25410}#
            (lambda (#{req 25744}# #{rest 25745}#)
              (if (#{distinct-bound-ids? 4357}#
                    (if #{rest 25745}#
                      (cons #{rest 25745}# #{req 25744}#)
                      #{req 25744}#))
                (values #{req 25744}# #f #{rest 25745}# #f)
                (syntax-violation
                  'lambda
                  "duplicate identifier in argument list"
                  #{orig-args 25408}#)))))
         (#{req 25409}# #{orig-args 25408}# '()))))
   (#{chi-simple-lambda 4376}#
     (lambda (#{e 25865}#
              #{r 25866}#
              #{w 25867}#
              #{s 25868}#
              #{mod 25869}#
              #{req 25870}#
              #{rest 25871}#
              #{meta 25872}#
              #{body 25873}#)
       (let ((#{ids 25874}#
               (if #{rest 25871}#
                 (append #{req 25870}# (list #{rest 25871}#))
                 #{req 25870}#)))
         (let ((#{vars 25875}#
                 (map #{gen-var 4380}# #{ids 25874}#)))
           (let ((#{labels 25876}#
                   (#{gen-labels 4337}# #{ids 25874}#)))
             (#{build-simple-lambda 4310}#
               #{s 25868}#
               (map syntax->datum #{req 25870}#)
               (if #{rest 25871}#
                 (syntax->datum #{rest 25871}#)
                 #f)
               #{vars 25875}#
               #{meta 25872}#
               (#{chi-body 4370}#
                 #{body 25873}#
                 (#{wrap 4359}#
                   (begin
                     (if (if (pair? #{e 25865}#) #{s 25868}# #f)
                       (set-source-properties! #{e 25865}# #{s 25868}#))
                     #{e 25865}#)
                   #{w 25867}#
                   #{mod 25869}#)
                 (#{extend-var-env 4329}#
                   #{labels 25876}#
                   #{vars 25875}#
                   #{r 25866}#)
                 (#{make-binding-wrap 4348}#
                   #{ids 25874}#
                   #{labels 25876}#
                   #{w 25867}#)
                 #{mod 25869}#)))))))
   (#{lambda*-formals 4377}#
     (lambda (#{orig-args 26176}#)
       (letrec*
         ((#{req 26177}#
            (lambda (#{args 26184}# #{rreq 26185}#)
              (let ((#{tmp 26187}# ($sc-dispatch #{args 26184}# '())))
                (if #{tmp 26187}#
                  (@apply
                    (lambda ()
                      (#{check 26181}#
                        (reverse #{rreq 26185}#)
                        '()
                        #f
                        '()))
                    #{tmp 26187}#)
                  (let ((#{tmp 26193}#
                          ($sc-dispatch #{args 26184}# '(any . any))))
                    (if (if #{tmp 26193}#
                          (@apply
                            (lambda (#{a 26197}# #{b 26198}#)
                              (if (symbol? #{a 26197}#)
                                #t
                                (if (if (vector? #{a 26197}#)
                                      (if (= (vector-length #{a 26197}#) 4)
                                        (eq? (vector-ref #{a 26197}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26197}# 1))
                                  #f)))
                            #{tmp 26193}#)
                          #f)
                      (@apply
                        (lambda (#{a 26225}# #{b 26226}#)
                          (#{req 26177}#
                            #{b 26226}#
                            (cons #{a 26225}# #{rreq 26185}#)))
                        #{tmp 26193}#)
                      (let ((#{tmp 26227}#
                              ($sc-dispatch #{args 26184}# '(any . any))))
                        (if (if #{tmp 26227}#
                              (@apply
                                (lambda (#{a 26231}# #{b 26232}#)
                                  (eq? (syntax->datum #{a 26231}#) #:optional))
                                #{tmp 26227}#)
                              #f)
                          (@apply
                            (lambda (#{a 26233}# #{b 26234}#)
                              (#{opt 26178}#
                                #{b 26234}#
                                (reverse #{rreq 26185}#)
                                '()))
                            #{tmp 26227}#)
                          (let ((#{tmp 26237}#
                                  ($sc-dispatch #{args 26184}# '(any . any))))
                            (if (if #{tmp 26237}#
                                  (@apply
                                    (lambda (#{a 26241}# #{b 26242}#)
                                      (eq? (syntax->datum #{a 26241}#) #:key))
                                    #{tmp 26237}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26243}# #{b 26244}#)
                                  (#{key 26179}#
                                    #{b 26244}#
                                    (reverse #{rreq 26185}#)
                                    '()
                                    '()))
                                #{tmp 26237}#)
                              (let ((#{tmp 26247}#
                                      ($sc-dispatch
                                        #{args 26184}#
                                        '(any any))))
                                (if (if #{tmp 26247}#
                                      (@apply
                                        (lambda (#{a 26251}# #{b 26252}#)
                                          (eq? (syntax->datum #{a 26251}#)
                                               #:rest))
                                        #{tmp 26247}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26253}# #{b 26254}#)
                                      (#{rest 26180}#
                                        #{b 26254}#
                                        (reverse #{rreq 26185}#)
                                        '()
                                        '()))
                                    #{tmp 26247}#)
                                  (let ((#{tmp 26257}# (list #{args 26184}#)))
                                    (if (@apply
                                          (lambda (#{r 26259}#)
                                            (if (symbol? #{r 26259}#)
                                              #t
                                              (if (if (vector? #{r 26259}#)
                                                    (if (= (vector-length
                                                             #{r 26259}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26259}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26259}# 1))
                                                #f)))
                                          #{tmp 26257}#)
                                      (@apply
                                        (lambda (#{r 26289}#)
                                          (#{rest 26180}#
                                            #{r 26289}#
                                            (reverse #{rreq 26185}#)
                                            '()
                                            '()))
                                        #{tmp 26257}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid argument list"
                                        #{orig-args 26176}#
                                        #{args 26184}#)))))))))))))))
          (#{opt 26178}#
            (lambda (#{args 26308}# #{req 26309}# #{ropt 26310}#)
              (let ((#{tmp 26312}# ($sc-dispatch #{args 26308}# '())))
                (if #{tmp 26312}#
                  (@apply
                    (lambda ()
                      (#{check 26181}#
                        #{req 26309}#
                        (reverse #{ropt 26310}#)
                        #f
                        '()))
                    #{tmp 26312}#)
                  (let ((#{tmp 26318}#
                          ($sc-dispatch #{args 26308}# '(any . any))))
                    (if (if #{tmp 26318}#
                          (@apply
                            (lambda (#{a 26322}# #{b 26323}#)
                              (if (symbol? #{a 26322}#)
                                #t
                                (if (if (vector? #{a 26322}#)
                                      (if (= (vector-length #{a 26322}#) 4)
                                        (eq? (vector-ref #{a 26322}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26322}# 1))
                                  #f)))
                            #{tmp 26318}#)
                          #f)
                      (@apply
                        (lambda (#{a 26350}# #{b 26351}#)
                          (#{opt 26178}#
                            #{b 26351}#
                            #{req 26309}#
                            (cons (cons #{a 26350}#
                                        '(#(syntax-object
                                            #f
                                            ((top)
                                             #(ribcage
                                               #(a b)
                                               #((top) (top))
                                               #("i2390" "i2391"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(args req ropt)
                                               #((top) (top) (top))
                                               #("i2380" "i2381" "i2382"))
                                             #(ribcage
                                               (check rest key opt req)
                                               ((top) (top) (top) (top) (top))
                                               ("i2326"
                                                "i2324"
                                                "i2322"
                                                "i2320"
                                                "i2318"))
                                             #(ribcage
                                               #(orig-args)
                                               #((top))
                                               #("i2317"))
                                             #(ribcage
                                               (lambda-var-list
                                                 gen-var
                                                 strip
                                                 chi-lambda-case
                                                 lambda*-formals
                                                 chi-simple-lambda
                                                 lambda-formals
                                                 ellipsis?
                                                 chi-void
                                                 eval-local-transformer
                                                 chi-local-syntax
                                                 chi-body
                                                 chi-macro
                                                 chi-application
                                                 chi-expr
                                                 chi
                                                 syntax-type
                                                 chi-when-list
                                                 chi-install-global
                                                 chi-top-sequence
                                                 chi-sequence
                                                 source-wrap
                                                 wrap
                                                 bound-id-member?
                                                 distinct-bound-ids?
                                                 valid-bound-ids?
                                                 bound-id=?
                                                 free-id=?
                                                 id-var-name
                                                 same-marks?
                                                 join-marks
                                                 join-wraps
                                                 smart-append
                                                 make-binding-wrap
                                                 extend-ribcage!
                                                 make-empty-ribcage
                                                 new-mark
                                                 anti-mark
                                                 the-anti-mark
                                                 top-marked?
                                                 top-wrap
                                                 empty-wrap
                                                 set-ribcage-labels!
                                                 set-ribcage-marks!
                                                 set-ribcage-symnames!
                                                 ribcage-labels
                                                 ribcage-marks
                                                 ribcage-symnames
                                                 ribcage?
                                                 make-ribcage
                                                 gen-labels
                                                 gen-label
                                                 make-rename
                                                 rename-marks
                                                 rename-new
                                                 rename-old
                                                 subst-rename?
                                                 wrap-subst
                                                 wrap-marks
                                                 make-wrap
                                                 id-sym-name&marks
                                                 id-sym-name
                                                 id?
                                                 nonsymbol-id?
                                                 global-extend
                                                 lookup
                                                 macros-only-env
                                                 extend-var-env
                                                 extend-env
                                                 null-env
                                                 binding-value
                                                 binding-type
                                                 make-binding
                                                 arg-check
                                                 source-annotation
                                                 no-source
                                                 set-syntax-object-module!
                                                 set-syntax-object-wrap!
                                                 set-syntax-object-expression!
                                                 syntax-object-module
                                                 syntax-object-wrap
                                                 syntax-object-expression
                                                 syntax-object?
                                                 make-syntax-object
                                                 build-lexical-var
                                                 build-letrec
                                                 build-named-let
                                                 build-let
                                                 build-sequence
                                                 build-data
                                                 build-primref
                                                 build-lambda-case
                                                 build-case-lambda
                                                 build-simple-lambda
                                                 build-global-definition
                                                 build-global-assignment
                                                 build-global-reference
                                                 analyze-variable
                                                 build-lexical-assignment
                                                 build-lexical-reference
                                                 build-dynlet
                                                 build-conditional
                                                 build-application
                                                 build-void
                                                 maybe-name-value!
                                                 decorate-source
                                                 get-global-definition-hook
                                                 put-global-definition-hook
                                                 gensym-hook
                                                 local-eval-hook
                                                 top-level-eval-hook
                                                 fx<
                                                 fx=
                                                 fx-
                                                 fx+
                                                 set-lambda-meta!
                                                 lambda-meta
                                                 lambda?
                                                 make-dynlet
                                                 make-letrec
                                                 make-let
                                                 make-lambda-case
                                                 make-lambda
                                                 make-sequence
                                                 make-application
                                                 make-conditional
                                                 make-toplevel-define
                                                 make-toplevel-set
                                                 make-toplevel-ref
                                                 make-module-set
                                                 make-module-ref
                                                 make-lexical-set
                                                 make-lexical-ref
                                                 make-primitive-ref
                                                 make-const
                                                 make-void)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i467"
                                                "i465"
                                                "i463"
                                                "i461"
                                                "i459"
                                                "i457"
                                                "i455"
                                                "i453"
                                                "i451"
                                                "i449"
                                                "i447"
                                                "i445"
                                                "i443"
                                                "i441"
                                                "i439"
                                                "i437"
                                                "i435"
                                                "i433"
                                                "i431"
                                                "i429"
                                                "i427"
                                                "i425"
                                                "i423"
                                                "i421"
                                                "i419"
                                                "i417"
                                                "i415"
                                                "i413"
                                                "i411"
                                                "i409"
                                                "i407"
                                                "i405"
                                                "i403"
                                                "i401"
                                                "i399"
                                                "i398"
                                                "i396"
                                                "i393"
                                                "i392"
                                                "i391"
                                                "i389"
                                                "i388"
                                                "i386"
                                                "i384"
                                                "i382"
                                                "i380"
                                                "i378"
                                                "i376"
                                                "i374"
                                                "i372"
                                                "i369"
                                                "i367"
                                                "i366"
                                                "i364"
                                                "i362"
                                                "i360"
                                                "i358"
                                                "i357"
                                                "i356"
                                                "i355"
                                                "i353"
                                                "i352"
                                                "i349"
                                                "i347"
                                                "i345"
                                                "i343"
                                                "i341"
                                                "i339"
                                                "i337"
                                                "i336"
                                                "i335"
                                                "i333"
                                                "i331"
                                                "i330"
                                                "i327"
                                                "i326"
                                                "i324"
                                                "i322"
                                                "i320"
                                                "i318"
                                                "i316"
                                                "i314"
                                                "i312"
                                                "i310"
                                                "i308"
                                                "i305"
                                                "i303"
                                                "i301"
                                                "i299"
                                                "i297"
                                                "i295"
                                                "i293"
                                                "i291"
                                                "i289"
                                                "i287"
                                                "i285"
                                                "i283"
                                                "i281"
                                                "i279"
                                                "i277"
                                                "i275"
                                                "i273"
                                                "i271"
                                                "i269"
                                                "i267"
                                                "i265"
                                                "i263"
                                                "i261"
                                                "i260"
                                                "i257"
                                                "i255"
                                                "i254"
                                                "i253"
                                                "i252"
                                                "i251"
                                                "i249"
                                                "i247"
                                                "i245"
                                                "i242"
                                                "i240"
                                                "i238"
                                                "i236"
                                                "i234"
                                                "i232"
                                                "i230"
                                                "i228"
                                                "i226"
                                                "i224"
                                                "i222"
                                                "i220"
                                                "i218"
                                                "i216"
                                                "i214"
                                                "i212"
                                                "i210"
                                                "i208"))
                                             #(ribcage
                                               (define-structure
                                                 define-expansion-accessors
                                                 define-expansion-constructors)
                                               ((top) (top) (top))
                                               ("i46" "i45" "i44")))
                                            (hygiene guile))))
                                  #{ropt 26310}#)))
                        #{tmp 26318}#)
                      (let ((#{tmp 26352}#
                              ($sc-dispatch
                                #{args 26308}#
                                '((any any) . any))))
                        (if (if #{tmp 26352}#
                              (@apply
                                (lambda (#{a 26356}#
                                         #{init 26357}#
                                         #{b 26358}#)
                                  (if (symbol? #{a 26356}#)
                                    #t
                                    (if (if (vector? #{a 26356}#)
                                          (if (= (vector-length #{a 26356}#) 4)
                                            (eq? (vector-ref #{a 26356}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26356}# 1))
                                      #f)))
                                #{tmp 26352}#)
                              #f)
                          (@apply
                            (lambda (#{a 26385}# #{init 26386}# #{b 26387}#)
                              (#{opt 26178}#
                                #{b 26387}#
                                #{req 26309}#
                                (cons (list #{a 26385}# #{init 26386}#)
                                      #{ropt 26310}#)))
                            #{tmp 26352}#)
                          (let ((#{tmp 26388}#
                                  ($sc-dispatch #{args 26308}# '(any . any))))
                            (if (if #{tmp 26388}#
                                  (@apply
                                    (lambda (#{a 26392}# #{b 26393}#)
                                      (eq? (syntax->datum #{a 26392}#) #:key))
                                    #{tmp 26388}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26394}# #{b 26395}#)
                                  (#{key 26179}#
                                    #{b 26395}#
                                    #{req 26309}#
                                    (reverse #{ropt 26310}#)
                                    '()))
                                #{tmp 26388}#)
                              (let ((#{tmp 26398}#
                                      ($sc-dispatch
                                        #{args 26308}#
                                        '(any any))))
                                (if (if #{tmp 26398}#
                                      (@apply
                                        (lambda (#{a 26402}# #{b 26403}#)
                                          (eq? (syntax->datum #{a 26402}#)
                                               #:rest))
                                        #{tmp 26398}#)
                                      #f)
                                  (@apply
                                    (lambda (#{a 26404}# #{b 26405}#)
                                      (#{rest 26180}#
                                        #{b 26405}#
                                        #{req 26309}#
                                        (reverse #{ropt 26310}#)
                                        '()))
                                    #{tmp 26398}#)
                                  (let ((#{tmp 26408}# (list #{args 26308}#)))
                                    (if (@apply
                                          (lambda (#{r 26410}#)
                                            (if (symbol? #{r 26410}#)
                                              #t
                                              (if (if (vector? #{r 26410}#)
                                                    (if (= (vector-length
                                                             #{r 26410}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{r 26410}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (symbol?
                                                  (vector-ref #{r 26410}# 1))
                                                #f)))
                                          #{tmp 26408}#)
                                      (@apply
                                        (lambda (#{r 26440}#)
                                          (#{rest 26180}#
                                            #{r 26440}#
                                            #{req 26309}#
                                            (reverse #{ropt 26310}#)
                                            '()))
                                        #{tmp 26408}#)
                                      (syntax-violation
                                        'lambda*
                                        "invalid optional argument list"
                                        #{orig-args 26176}#
                                        #{args 26308}#)))))))))))))))
          (#{key 26179}#
            (lambda (#{args 26459}#
                     #{req 26460}#
                     #{opt 26461}#
                     #{rkey 26462}#)
              (let ((#{tmp 26464}# ($sc-dispatch #{args 26459}# '())))
                (if #{tmp 26464}#
                  (@apply
                    (lambda ()
                      (#{check 26181}#
                        #{req 26460}#
                        #{opt 26461}#
                        #f
                        (cons #f (reverse #{rkey 26462}#))))
                    #{tmp 26464}#)
                  (let ((#{tmp 26470}#
                          ($sc-dispatch #{args 26459}# '(any . any))))
                    (if (if #{tmp 26470}#
                          (@apply
                            (lambda (#{a 26474}# #{b 26475}#)
                              (if (symbol? #{a 26474}#)
                                #t
                                (if (if (vector? #{a 26474}#)
                                      (if (= (vector-length #{a 26474}#) 4)
                                        (eq? (vector-ref #{a 26474}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{a 26474}# 1))
                                  #f)))
                            #{tmp 26470}#)
                          #f)
                      (@apply
                        (lambda (#{a 26502}# #{b 26503}#)
                          (let ((#{tmp 26504}#
                                  (symbol->keyword
                                    (syntax->datum #{a 26502}#))))
                            (#{key 26179}#
                              #{b 26503}#
                              #{req 26460}#
                              #{opt 26461}#
                              (cons (cons #{tmp 26504}#
                                          (cons #{a 26502}#
                                                '(#(syntax-object
                                                    #f
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(k)
                                                       #((top))
                                                       #("i2453"))
                                                     #(ribcage
                                                       #(a b)
                                                       #((top) (top))
                                                       #("i2447" "i2448"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(args req opt rkey)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i2436"
                                                         "i2437"
                                                         "i2438"
                                                         "i2439"))
                                                     #(ribcage
                                                       (check rest key opt req)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i2326"
                                                        "i2324"
                                                        "i2322"
                                                        "i2320"
                                                        "i2318"))
                                                     #(ribcage
                                                       #(orig-args)
                                                       #((top))
                                                       #("i2317"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-application
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile)))))
                                    #{rkey 26462}#))))
                        #{tmp 26470}#)
                      (let ((#{tmp 26507}#
                              ($sc-dispatch
                                #{args 26459}#
                                '((any any) . any))))
                        (if (if #{tmp 26507}#
                              (@apply
                                (lambda (#{a 26511}#
                                         #{init 26512}#
                                         #{b 26513}#)
                                  (if (symbol? #{a 26511}#)
                                    #t
                                    (if (if (vector? #{a 26511}#)
                                          (if (= (vector-length #{a 26511}#) 4)
                                            (eq? (vector-ref #{a 26511}# 0)
                                                 'syntax-object)
                                            #f)
                                          #f)
                                      (symbol? (vector-ref #{a 26511}# 1))
                                      #f)))
                                #{tmp 26507}#)
                              #f)
                          (@apply
                            (lambda (#{a 26540}# #{init 26541}# #{b 26542}#)
                              (let ((#{tmp 26543}#
                                      (symbol->keyword
                                        (syntax->datum #{a 26540}#))))
                                (#{key 26179}#
                                  #{b 26542}#
                                  #{req 26460}#
                                  #{opt 26461}#
                                  (cons (list #{tmp 26543}#
                                              #{a 26540}#
                                              #{init 26541}#)
                                        #{rkey 26462}#))))
                            #{tmp 26507}#)
                          (let ((#{tmp 26546}#
                                  ($sc-dispatch
                                    #{args 26459}#
                                    '((any any any) . any))))
                            (if (if #{tmp 26546}#
                                  (@apply
                                    (lambda (#{a 26550}#
                                             #{init 26551}#
                                             #{k 26552}#
                                             #{b 26553}#)
                                      (if (if (symbol? #{a 26550}#)
                                            #t
                                            (if (if (vector? #{a 26550}#)
                                                  (if (= (vector-length
                                                           #{a 26550}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{a 26550}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{a 26550}# 1))
                                              #f))
                                        (keyword? (syntax->datum #{k 26552}#))
                                        #f))
                                    #{tmp 26546}#)
                                  #f)
                              (@apply
                                (lambda (#{a 26580}#
                                         #{init 26581}#
                                         #{k 26582}#
                                         #{b 26583}#)
                                  (#{key 26179}#
                                    #{b 26583}#
                                    #{req 26460}#
                                    #{opt 26461}#
                                    (cons (list #{k 26582}#
                                                #{a 26580}#
                                                #{init 26581}#)
                                          #{rkey 26462}#)))
                                #{tmp 26546}#)
                              (let ((#{tmp 26584}#
                                      ($sc-dispatch #{args 26459}# '(any))))
                                (if (if #{tmp 26584}#
                                      (@apply
                                        (lambda (#{aok 26588}#)
                                          (eq? (syntax->datum #{aok 26588}#)
                                               #:allow-other-keys))
                                        #{tmp 26584}#)
                                      #f)
                                  (@apply
                                    (lambda (#{aok 26589}#)
                                      (#{check 26181}#
                                        #{req 26460}#
                                        #{opt 26461}#
                                        #f
                                        (cons #t (reverse #{rkey 26462}#))))
                                    #{tmp 26584}#)
                                  (let ((#{tmp 26592}#
                                          ($sc-dispatch
                                            #{args 26459}#
                                            '(any any any))))
                                    (if (if #{tmp 26592}#
                                          (@apply
                                            (lambda (#{aok 26596}#
                                                     #{a 26597}#
                                                     #{b 26598}#)
                                              (if (eq? (syntax->datum
                                                         #{aok 26596}#)
                                                       #:allow-other-keys)
                                                (eq? (syntax->datum
                                                       #{a 26597}#)
                                                     #:rest)
                                                #f))
                                            #{tmp 26592}#)
                                          #f)
                                      (@apply
                                        (lambda (#{aok 26599}#
                                                 #{a 26600}#
                                                 #{b 26601}#)
                                          (#{rest 26180}#
                                            #{b 26601}#
                                            #{req 26460}#
                                            #{opt 26461}#
                                            (cons #t
                                                  (reverse #{rkey 26462}#))))
                                        #{tmp 26592}#)
                                      (let ((#{tmp 26604}#
                                              ($sc-dispatch
                                                #{args 26459}#
                                                '(any . any))))
                                        (if (if #{tmp 26604}#
                                              (@apply
                                                (lambda (#{aok 26608}#
                                                         #{r 26609}#)
                                                  (if (eq? (syntax->datum
                                                             #{aok 26608}#)
                                                           #:allow-other-keys)
                                                    (if (symbol? #{r 26609}#)
                                                      #t
                                                      (if (if (vector?
                                                                #{r 26609}#)
                                                            (if (= (vector-length
                                                                     #{r 26609}#)
                                                                   4)
                                                              (eq? (vector-ref
                                                                     #{r 26609}#
                                                                     0)
                                                                   'syntax-object)
                                                              #f)
                                                            #f)
                                                        (symbol?
                                                          (vector-ref
                                                            #{r 26609}#
                                                            1))
                                                        #f))
                                                    #f))
                                                #{tmp 26604}#)
                                              #f)
                                          (@apply
                                            (lambda (#{aok 26636}# #{r 26637}#)
                                              (#{rest 26180}#
                                                #{r 26637}#
                                                #{req 26460}#
                                                #{opt 26461}#
                                                (cons #t
                                                      (reverse
                                                        #{rkey 26462}#))))
                                            #{tmp 26604}#)
                                          (let ((#{tmp 26640}#
                                                  ($sc-dispatch
                                                    #{args 26459}#
                                                    '(any any))))
                                            (if (if #{tmp 26640}#
                                                  (@apply
                                                    (lambda (#{a 26644}#
                                                             #{b 26645}#)
                                                      (eq? (syntax->datum
                                                             #{a 26644}#)
                                                           #:rest))
                                                    #{tmp 26640}#)
                                                  #f)
                                              (@apply
                                                (lambda (#{a 26646}#
                                                         #{b 26647}#)
                                                  (#{rest 26180}#
                                                    #{b 26647}#
                                                    #{req 26460}#
                                                    #{opt 26461}#
                                                    (cons #f
                                                          (reverse
                                                            #{rkey 26462}#))))
                                                #{tmp 26640}#)
                                              (let ((#{tmp 26650}#
                                                      (list #{args 26459}#)))
                                                (if (@apply
                                                      (lambda (#{r 26652}#)
                                                        (if (symbol?
                                                              #{r 26652}#)
                                                          #t
                                                          (if (if (vector?
                                                                    #{r 26652}#)
                                                                (if (= (vector-length
                                                                         #{r 26652}#)
                                                                       4)
                                                                  (eq? (vector-ref
                                                                         #{r 26652}#
                                                                         0)
                                                                       'syntax-object)
                                                                  #f)
                                                                #f)
                                                            (symbol?
                                                              (vector-ref
                                                                #{r 26652}#
                                                                1))
                                                            #f)))
                                                      #{tmp 26650}#)
                                                  (@apply
                                                    (lambda (#{r 26682}#)
                                                      (#{rest 26180}#
                                                        #{r 26682}#
                                                        #{req 26460}#
                                                        #{opt 26461}#
                                                        (cons #f
                                                              (reverse
                                                                #{rkey 26462}#))))
                                                    #{tmp 26650}#)
                                                  (syntax-violation
                                                    'lambda*
                                                    "invalid keyword argument list"
                                                    #{orig-args 26176}#
                                                    #{args 26459}#)))))))))))))))))))))
          (#{rest 26180}#
            (lambda (#{args 26710}#
                     #{req 26711}#
                     #{opt 26712}#
                     #{kw 26713}#)
              (let ((#{tmp 26715}# (list #{args 26710}#)))
                (if (@apply
                      (lambda (#{r 26717}#)
                        (if (symbol? #{r 26717}#)
                          #t
                          (if (if (vector? #{r 26717}#)
                                (if (= (vector-length #{r 26717}#) 4)
                                  (eq? (vector-ref #{r 26717}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{r 26717}# 1))
                            #f)))
                      #{tmp 26715}#)
                  (@apply
                    (lambda (#{r 26747}#)
                      (#{check 26181}#
                        #{req 26711}#
                        #{opt 26712}#
                        #{r 26747}#
                        #{kw 26713}#))
                    #{tmp 26715}#)
                  (syntax-violation
                    'lambda*
                    "invalid rest argument"
                    #{orig-args 26176}#
                    #{args 26710}#)))))
          (#{check 26181}#
            (lambda (#{req 26751}#
                     #{opt 26752}#
                     #{rest 26753}#
                     #{kw 26754}#)
              (if (#{distinct-bound-ids? 4357}#
                    (append
                      #{req 26751}#
                      (map car #{opt 26752}#)
                      (if #{rest 26753}# (list #{rest 26753}#) '())
                      (if (pair? #{kw 26754}#)
                        (map cadr (cdr #{kw 26754}#))
                        '())))
                (values
                  #{req 26751}#
                  #{opt 26752}#
                  #{rest 26753}#
                  #{kw 26754}#)
                (syntax-violation
                  'lambda*
                  "duplicate identifier in argument list"
                  #{orig-args 26176}#)))))
         (#{req 26177}# #{orig-args 26176}# '()))))
   (#{chi-lambda-case 4378}#
     (lambda (#{e 26874}#
              #{r 26875}#
              #{w 26876}#
              #{s 26877}#
              #{mod 26878}#
              #{get-formals 26879}#
              #{clauses 26880}#)
       (letrec*
         ((#{expand-req 26881}#
            (lambda (#{req 27015}#
                     #{opt 27016}#
                     #{rest 27017}#
                     #{kw 27018}#
                     #{body 27019}#)
              (let ((#{vars 27020}#
                      (map #{gen-var 4380}# #{req 27015}#))
                    (#{labels 27021}#
                      (#{gen-labels 4337}# #{req 27015}#)))
                (let ((#{r* 27022}#
                        (#{extend-var-env 4329}#
                          #{labels 27021}#
                          #{vars 27020}#
                          #{r 26875}#))
                      (#{w* 27023}#
                        (#{make-binding-wrap 4348}#
                          #{req 27015}#
                          #{labels 27021}#
                          #{w 26876}#)))
                  (#{expand-opt 26882}#
                    (map syntax->datum #{req 27015}#)
                    #{opt 27016}#
                    #{rest 27017}#
                    #{kw 27018}#
                    #{body 27019}#
                    (reverse #{vars 27020}#)
                    #{r* 27022}#
                    #{w* 27023}#
                    '()
                    '())))))
          (#{expand-opt 26882}#
            (lambda (#{req 27239}#
                     #{opt 27240}#
                     #{rest 27241}#
                     #{kw 27242}#
                     #{body 27243}#
                     #{vars 27244}#
                     #{r* 27245}#
                     #{w* 27246}#
                     #{out 27247}#
                     #{inits 27248}#)
              (if (pair? #{opt 27240}#)
                (let ((#{tmp 27249}# (car #{opt 27240}#)))
                  (let ((#{tmp 27250}#
                          ($sc-dispatch #{tmp 27249}# '(any any))))
                    (if #{tmp 27250}#
                      (@apply
                        (lambda (#{id 27252}# #{i 27253}#)
                          (let ((#{v 27254}#
                                  (let ((#{id 27262}#
                                          (if (if (vector? #{id 27252}#)
                                                (if (= (vector-length
                                                         #{id 27252}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27252}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27252}# 1)
                                            #{id 27252}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27262}#)
                                        " ")))))
                            (let ((#{l 27255}#
                                    (#{gen-labels 4337}# (list #{v 27254}#))))
                              (let ((#{r** 27256}#
                                      (#{extend-var-env 4329}#
                                        #{l 27255}#
                                        (list #{v 27254}#)
                                        #{r* 27245}#)))
                                (let ((#{w** 27257}#
                                        (#{make-binding-wrap 4348}#
                                          (list #{id 27252}#)
                                          #{l 27255}#
                                          #{w* 27246}#)))
                                  (#{expand-opt 26882}#
                                    #{req 27239}#
                                    (cdr #{opt 27240}#)
                                    #{rest 27241}#
                                    #{kw 27242}#
                                    #{body 27243}#
                                    (cons #{v 27254}# #{vars 27244}#)
                                    #{r** 27256}#
                                    #{w** 27257}#
                                    (cons (syntax->datum #{id 27252}#)
                                          #{out 27247}#)
                                    (cons (#{chi 4366}#
                                            #{i 27253}#
                                            #{r* 27245}#
                                            #{w* 27246}#
                                            #{mod 26878}#)
                                          #{inits 27248}#)))))))
                        #{tmp 27250}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27249}#))))
                (if #{rest 27241}#
                  (let ((#{v 27534}#
                          (let ((#{id 27544}#
                                  (if (if (vector? #{rest 27241}#)
                                        (if (= (vector-length #{rest 27241}#)
                                               4)
                                          (eq? (vector-ref #{rest 27241}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (vector-ref #{rest 27241}# 1)
                                    #{rest 27241}#)))
                            (gensym
                              (string-append
                                (symbol->string #{id 27544}#)
                                " ")))))
                    (let ((#{l 27535}#
                            (#{gen-labels 4337}# (list #{v 27534}#))))
                      (let ((#{r* 27536}#
                              (#{extend-var-env 4329}#
                                #{l 27535}#
                                (list #{v 27534}#)
                                #{r* 27245}#)))
                        (let ((#{w* 27537}#
                                (#{make-binding-wrap 4348}#
                                  (list #{rest 27241}#)
                                  #{l 27535}#
                                  #{w* 27246}#)))
                          (#{expand-kw 26883}#
                            #{req 27239}#
                            (if (pair? #{out 27247}#)
                              (reverse #{out 27247}#)
                              #f)
                            (syntax->datum #{rest 27241}#)
                            (if (pair? #{kw 27242}#)
                              (cdr #{kw 27242}#)
                              #{kw 27242}#)
                            #{body 27243}#
                            (cons #{v 27534}# #{vars 27244}#)
                            #{r* 27536}#
                            #{w* 27537}#
                            (if (pair? #{kw 27242}#) (car #{kw 27242}#) #f)
                            '()
                            #{inits 27248}#)))))
                  (#{expand-kw 26883}#
                    #{req 27239}#
                    (if (pair? #{out 27247}#)
                      (reverse #{out 27247}#)
                      #f)
                    #f
                    (if (pair? #{kw 27242}#)
                      (cdr #{kw 27242}#)
                      #{kw 27242}#)
                    #{body 27243}#
                    #{vars 27244}#
                    #{r* 27245}#
                    #{w* 27246}#
                    (if (pair? #{kw 27242}#) (car #{kw 27242}#) #f)
                    '()
                    #{inits 27248}#)))))
          (#{expand-kw 26883}#
            (lambda (#{req 27744}#
                     #{opt 27745}#
                     #{rest 27746}#
                     #{kw 27747}#
                     #{body 27748}#
                     #{vars 27749}#
                     #{r* 27750}#
                     #{w* 27751}#
                     #{aok 27752}#
                     #{out 27753}#
                     #{inits 27754}#)
              (if (pair? #{kw 27747}#)
                (let ((#{tmp 27755}# (car #{kw 27747}#)))
                  (let ((#{tmp 27756}#
                          ($sc-dispatch #{tmp 27755}# '(any any any))))
                    (if #{tmp 27756}#
                      (@apply
                        (lambda (#{k 27758}# #{id 27759}# #{i 27760}#)
                          (let ((#{v 27761}#
                                  (let ((#{id 27769}#
                                          (if (if (vector? #{id 27759}#)
                                                (if (= (vector-length
                                                         #{id 27759}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{id 27759}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{id 27759}# 1)
                                            #{id 27759}#)))
                                    (gensym
                                      (string-append
                                        (symbol->string #{id 27769}#)
                                        " ")))))
                            (let ((#{l 27762}#
                                    (#{gen-labels 4337}# (list #{v 27761}#))))
                              (let ((#{r** 27763}#
                                      (#{extend-var-env 4329}#
                                        #{l 27762}#
                                        (list #{v 27761}#)
                                        #{r* 27750}#)))
                                (let ((#{w** 27764}#
                                        (#{make-binding-wrap 4348}#
                                          (list #{id 27759}#)
                                          #{l 27762}#
                                          #{w* 27751}#)))
                                  (#{expand-kw 26883}#
                                    #{req 27744}#
                                    #{opt 27745}#
                                    #{rest 27746}#
                                    (cdr #{kw 27747}#)
                                    #{body 27748}#
                                    (cons #{v 27761}# #{vars 27749}#)
                                    #{r** 27763}#
                                    #{w** 27764}#
                                    #{aok 27752}#
                                    (cons (list (syntax->datum #{k 27758}#)
                                                (syntax->datum #{id 27759}#)
                                                #{v 27761}#)
                                          #{out 27753}#)
                                    (cons (#{chi 4366}#
                                            #{i 27760}#
                                            #{r* 27750}#
                                            #{w* 27751}#
                                            #{mod 26878}#)
                                          #{inits 27754}#)))))))
                        #{tmp 27756}#)
                      (syntax-violation
                        #f
                        "source expression failed to match any pattern"
                        #{tmp 27755}#))))
                (#{expand-body 26884}#
                  #{req 27744}#
                  #{opt 27745}#
                  #{rest 27746}#
                  (if (if #{aok 27752}#
                        #{aok 27752}#
                        (pair? #{out 27753}#))
                    (cons #{aok 27752}# (reverse #{out 27753}#))
                    #f)
                  #{body 27748}#
                  (reverse #{vars 27749}#)
                  #{r* 27750}#
                  #{w* 27751}#
                  (reverse #{inits 27754}#)
                  '()))))
          (#{expand-body 26884}#
            (lambda (#{req 28050}#
                     #{opt 28051}#
                     #{rest 28052}#
                     #{kw 28053}#
                     #{body 28054}#
                     #{vars 28055}#
                     #{r* 28056}#
                     #{w* 28057}#
                     #{inits 28058}#
                     #{meta 28059}#)
              (let ((#{tmp 28061}#
                      ($sc-dispatch
                        #{body 28054}#
                        '(any any . each-any))))
                (if (if #{tmp 28061}#
                      (@apply
                        (lambda (#{docstring 28065}# #{e1 28066}# #{e2 28067}#)
                          (string? (syntax->datum #{docstring 28065}#)))
                        #{tmp 28061}#)
                      #f)
                  (@apply
                    (lambda (#{docstring 28068}# #{e1 28069}# #{e2 28070}#)
                      (#{expand-body 26884}#
                        #{req 28050}#
                        #{opt 28051}#
                        #{rest 28052}#
                        #{kw 28053}#
                        (cons #{e1 28069}# #{e2 28070}#)
                        #{vars 28055}#
                        #{r* 28056}#
                        #{w* 28057}#
                        #{inits 28058}#
                        (append
                          #{meta 28059}#
                          (list (cons 'documentation
                                      (syntax->datum #{docstring 28068}#))))))
                    #{tmp 28061}#)
                  (let ((#{tmp 28071}#
                          ($sc-dispatch
                            #{body 28054}#
                            '(#(vector #(each (any . any))) any . each-any))))
                    (if #{tmp 28071}#
                      (@apply
                        (lambda (#{k 28075}#
                                 #{v 28076}#
                                 #{e1 28077}#
                                 #{e2 28078}#)
                          (#{expand-body 26884}#
                            #{req 28050}#
                            #{opt 28051}#
                            #{rest 28052}#
                            #{kw 28053}#
                            (cons #{e1 28077}# #{e2 28078}#)
                            #{vars 28055}#
                            #{r* 28056}#
                            #{w* 28057}#
                            #{inits 28058}#
                            (append
                              #{meta 28059}#
                              (syntax->datum
                                (map cons #{k 28075}# #{v 28076}#)))))
                        #{tmp 28071}#)
                      (let ((#{tmp 28079}#
                              ($sc-dispatch #{body 28054}# '(any . each-any))))
                        (if #{tmp 28079}#
                          (@apply
                            (lambda (#{e1 28083}# #{e2 28084}#)
                              (values
                                #{meta 28059}#
                                #{req 28050}#
                                #{opt 28051}#
                                #{rest 28052}#
                                #{kw 28053}#
                                #{inits 28058}#
                                #{vars 28055}#
                                (#{chi-body 4370}#
                                  (cons #{e1 28083}# #{e2 28084}#)
                                  (#{wrap 4359}#
                                    (begin
                                      (if (if (pair? #{e 26874}#)
                                            #{s 26877}#
                                            #f)
                                        (set-source-properties!
                                          #{e 26874}#
                                          #{s 26877}#))
                                      #{e 26874}#)
                                    #{w 26876}#
                                    #{mod 26878}#)
                                  #{r* 28056}#
                                  #{w* 28057}#
                                  #{mod 26878}#)))
                            #{tmp 28079}#)
                          (syntax-violation
                            #f
                            "source expression failed to match any pattern"
                            #{body 28054}#))))))))))
         (let ((#{tmp 26886}#
                 ($sc-dispatch #{clauses 26880}# '())))
           (if #{tmp 26886}#
             (@apply
               (lambda () (values '() #f))
               #{tmp 26886}#)
             (let ((#{tmp 26891}#
                     ($sc-dispatch
                       #{clauses 26880}#
                       '((any any . each-any)
                         .
                         #(each (any any . each-any))))))
               (if #{tmp 26891}#
                 (@apply
                   (lambda (#{args 26895}#
                            #{e1 26896}#
                            #{e2 26897}#
                            #{args* 26898}#
                            #{e1* 26899}#
                            #{e2* 26900}#)
                     (call-with-values
                       (lambda ()
                         (#{get-formals 26879}# #{args 26895}#))
                       (lambda (#{req 26901}#
                                #{opt 26902}#
                                #{rest 26903}#
                                #{kw 26904}#)
                         (call-with-values
                           (lambda ()
                             (#{expand-req 26881}#
                               #{req 26901}#
                               #{opt 26902}#
                               #{rest 26903}#
                               #{kw 26904}#
                               (cons #{e1 26896}# #{e2 26897}#)))
                           (lambda (#{meta 26971}#
                                    #{req 26972}#
                                    #{opt 26973}#
                                    #{rest 26974}#
                                    #{kw 26975}#
                                    #{inits 26976}#
                                    #{vars 26977}#
                                    #{body 26978}#)
                             (call-with-values
                               (lambda ()
                                 (#{chi-lambda-case 4378}#
                                   #{e 26874}#
                                   #{r 26875}#
                                   #{w 26876}#
                                   #{s 26877}#
                                   #{mod 26878}#
                                   #{get-formals 26879}#
                                   (map (lambda (#{tmp 2796 26979}#
                                                 #{tmp 2795 26980}#
                                                 #{tmp 2794 26981}#)
                                          (cons #{tmp 2794 26981}#
                                                (cons #{tmp 2795 26980}#
                                                      #{tmp 2796 26979}#)))
                                        #{e2* 26900}#
                                        #{e1* 26899}#
                                        #{args* 26898}#)))
                               (lambda (#{meta* 26982}# #{else* 26983}#)
                                 (values
                                   (append #{meta 26971}# #{meta* 26982}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #{s 26877}#
                                     #{req 26972}#
                                     #{opt 26973}#
                                     #{rest 26974}#
                                     #{kw 26975}#
                                     #{inits 26976}#
                                     #{vars 26977}#
                                     #{body 26978}#
                                     #{else* 26983}#)))))))))
                   #{tmp 26891}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{clauses 26880}#))))))))
   (#{strip 4379}#
     (lambda (#{x 28121}# #{w 28122}#)
       (if (memq 'top (car #{w 28122}#))
         #{x 28121}#
         (letrec*
           ((#{f 28123}#
              (lambda (#{x 28126}#)
                (if (if (vector? #{x 28126}#)
                      (if (= (vector-length #{x 28126}#) 4)
                        (eq? (vector-ref #{x 28126}# 0) 'syntax-object)
                        #f)
                      #f)
                  (#{strip 4379}#
                    (vector-ref #{x 28126}# 1)
                    (vector-ref #{x 28126}# 2))
                  (if (pair? #{x 28126}#)
                    (let ((#{a 28145}# (#{f 28123}# (car #{x 28126}#)))
                          (#{d 28146}# (#{f 28123}# (cdr #{x 28126}#))))
                      (if (if (eq? #{a 28145}# (car #{x 28126}#))
                            (eq? #{d 28146}# (cdr #{x 28126}#))
                            #f)
                        #{x 28126}#
                        (cons #{a 28145}# #{d 28146}#)))
                    (if (vector? #{x 28126}#)
                      (let ((#{old 28149}# (vector->list #{x 28126}#)))
                        (let ((#{new 28150}# (map #{f 28123}# #{old 28149}#)))
                          (letrec*
                            ((#{lp 28151}#
                               (lambda (#{l1 28227}# #{l2 28228}#)
                                 (if (null? #{l1 28227}#)
                                   #{x 28126}#
                                   (if (eq? (car #{l1 28227}#)
                                            (car #{l2 28228}#))
                                     (#{lp 28151}#
                                       (cdr #{l1 28227}#)
                                       (cdr #{l2 28228}#))
                                     (list->vector #{new 28150}#))))))
                            (#{lp 28151}# #{old 28149}# #{new 28150}#))))
                      #{x 28126}#))))))
           (#{f 28123}# #{x 28121}#)))))
   (#{gen-var 4380}#
     (lambda (#{id 27027}#)
       (let ((#{id 27028}#
               (if (if (vector? #{id 27027}#)
                     (if (= (vector-length #{id 27027}#) 4)
                       (eq? (vector-ref #{id 27027}# 0) 'syntax-object)
                       #f)
                     #f)
                 (vector-ref #{id 27027}# 1)
                 #{id 27027}#)))
         (gensym
           (string-append (symbol->string #{id 27028}#) " ")))))
   (#{lambda-var-list 4381}#
     (lambda (#{vars 28229}#)
       (letrec*
         ((#{lvl 28230}#
            (lambda (#{vars 28233}# #{ls 28234}# #{w 28235}#)
              (if (pair? #{vars 28233}#)
                (#{lvl 28230}#
                  (cdr #{vars 28233}#)
                  (cons (#{wrap 4359}#
                          (car #{vars 28233}#)
                          #{w 28235}#
                          #f)
                        #{ls 28234}#)
                  #{w 28235}#)
                (if (if (symbol? #{vars 28233}#)
                      #t
                      (if (if (vector? #{vars 28233}#)
                            (if (= (vector-length #{vars 28233}#) 4)
                              (eq? (vector-ref #{vars 28233}# 0)
                                   'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{vars 28233}# 1))
                        #f))
                  (cons (#{wrap 4359}# #{vars 28233}# #{w 28235}# #f)
                        #{ls 28234}#)
                  (if (null? #{vars 28233}#)
                    #{ls 28234}#
                    (if (if (vector? #{vars 28233}#)
                          (if (= (vector-length #{vars 28233}#) 4)
                            (eq? (vector-ref #{vars 28233}# 0)
                                 'syntax-object)
                            #f)
                          #f)
                      (#{lvl 28230}#
                        (vector-ref #{vars 28233}# 1)
                        #{ls 28234}#
                        (#{join-wraps 4350}#
                          #{w 28235}#
                          (vector-ref #{vars 28233}# 2)))
                      (cons #{vars 28233}# #{ls 28234}#))))))))
         (#{lvl 28230}# #{vars 28229}# '() '(()))))))
  (begin
    (module-define!
      (current-module)
      'letrec-syntax
      (make-syntax-transformer
        'letrec-syntax
        'local-syntax
        #t))
    (module-define!
      (current-module)
      'let-syntax
      (make-syntax-transformer
        'let-syntax
        'local-syntax
        #f))
    (#{global-extend 4332}#
      'core
      'fluid-let-syntax
      (lambda (#{e 4501}#
               #{r 4502}#
               #{w 4503}#
               #{s 4504}#
               #{mod 4505}#)
        (let ((#{tmp 4507}#
                ($sc-dispatch
                  #{e 4501}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 4507}#
                (@apply
                  (lambda (#{var 4511}#
                           #{val 4512}#
                           #{e1 4513}#
                           #{e2 4514}#)
                    (#{valid-bound-ids? 4356}# #{var 4511}#))
                  #{tmp 4507}#)
                #f)
            (@apply
              (lambda (#{var 4592}#
                       #{val 4593}#
                       #{e1 4594}#
                       #{e2 4595}#)
                (let ((#{names 4596}#
                        (map (lambda (#{x 4786}#)
                               (#{id-var-name 4353}# #{x 4786}# #{w 4503}#))
                             #{var 4592}#)))
                  (begin
                    (for-each
                      (lambda (#{id 4597}# #{n 4598}#)
                        (let ((#{atom-key 4599}#
                                (car (let ((#{t 4723}#
                                             (assq #{n 4598}# #{r 4502}#)))
                                       (if #{t 4723}#
                                         (cdr #{t 4723}#)
                                         (if (symbol? #{n 4598}#)
                                           (let ((#{t 4728}#
                                                   (begin
                                                     (if (if (not #{mod 4505}#)
                                                           (current-module)
                                                           #f)
                                                       (warn "module system is booted, we should have a module"
                                                             #{n 4598}#))
                                                     (let ((#{v 4765}#
                                                             (module-variable
                                                               (if #{mod 4505}#
                                                                 (resolve-module
                                                                   (cdr #{mod 4505}#))
                                                                 (current-module))
                                                               #{n 4598}#)))
                                                       (if #{v 4765}#
                                                         (if (variable-bound?
                                                               #{v 4765}#)
                                                           (let ((#{val 4774}#
                                                                   (variable-ref
                                                                     #{v 4765}#)))
                                                             (if (macro?
                                                                   #{val 4774}#)
                                                               (if (macro-type
                                                                     #{val 4774}#)
                                                                 (cons (macro-type
                                                                         #{val 4774}#)
                                                                       (macro-binding
                                                                         #{val 4774}#))
                                                                 #f)
                                                               #f))
                                                           #f)
                                                         #f)))))
                                             (if #{t 4728}#
                                               #{t 4728}#
                                               '(global)))
                                           '(displaced-lexical)))))))
                          (if (let ((#{t 4632}# #{atom-key 4599}#))
                                (eqv? #{t 4632}# 'displaced-lexical))
                            (syntax-violation
                              'fluid-let-syntax
                              "identifier out of context"
                              #{e 4501}#
                              (#{wrap 4359}#
                                (begin
                                  (if (if (pair? #{id 4597}#) #{s 4504}# #f)
                                    (set-source-properties!
                                      #{id 4597}#
                                      #{s 4504}#))
                                  #{id 4597}#)
                                #{w 4503}#
                                #{mod 4505}#)))))
                      #{var 4592}#
                      #{names 4596}#)
                    (#{chi-body 4370}#
                      (cons #{e1 4594}# #{e2 4595}#)
                      (#{wrap 4359}#
                        (begin
                          (if (if (pair? #{e 4501}#) #{s 4504}# #f)
                            (set-source-properties! #{e 4501}# #{s 4504}#))
                          #{e 4501}#)
                        #{w 4503}#
                        #{mod 4505}#)
                      (#{extend-env 4328}#
                        #{names 4596}#
                        (let ((#{trans-r 4872}#
                                (#{macros-only-env 4330}# #{r 4502}#)))
                          (map (lambda (#{x 4873}#)
                                 (cons 'macro
                                       (#{eval-local-transformer 4372}#
                                         (#{chi 4366}#
                                           #{x 4873}#
                                           #{trans-r 4872}#
                                           #{w 4503}#
                                           #{mod 4505}#)
                                         #{mod 4505}#)))
                               #{val 4593}#))
                        #{r 4502}#)
                      #{w 4503}#
                      #{mod 4505}#))))
              #{tmp 4507}#)
            (syntax-violation
              'fluid-let-syntax
              "bad syntax"
              (#{wrap 4359}#
                (begin
                  (if (if (pair? #{e 4501}#) #{s 4504}# #f)
                    (set-source-properties! #{e 4501}# #{s 4504}#))
                  #{e 4501}#)
                #{w 4503}#
                #{mod 4505}#))))))
    (module-define!
      (current-module)
      'quote
      (make-syntax-transformer
        'quote
        'core
        (lambda (#{e 5087}#
                 #{r 5088}#
                 #{w 5089}#
                 #{s 5090}#
                 #{mod 5091}#)
          (let ((#{tmp 5093}# ($sc-dispatch #{e 5087}# '(_ any))))
            (if #{tmp 5093}#
              (@apply
                (lambda (#{e 5096}#)
                  (let ((#{exp 5100}#
                          (#{strip 4379}# #{e 5096}# #{w 5089}#)))
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 1)
                      #{s 5090}#
                      #{exp 5100}#)))
                #{tmp 5093}#)
              (syntax-violation
                'quote
                "bad syntax"
                (#{wrap 4359}#
                  (begin
                    (if (if (pair? #{e 5087}#) #{s 5090}# #f)
                      (set-source-properties! #{e 5087}# #{s 5090}#))
                    #{e 5087}#)
                  #{w 5089}#
                  #{mod 5091}#)))))))
    (#{global-extend 4332}#
      'core
      'syntax
      (letrec*
        ((#{gen-syntax 5327}#
           (lambda (#{src 5429}#
                    #{e 5430}#
                    #{r 5431}#
                    #{maps 5432}#
                    #{ellipsis? 5433}#
                    #{mod 5434}#)
             (if (if (symbol? #{e 5430}#)
                   #t
                   (if (if (vector? #{e 5430}#)
                         (if (= (vector-length #{e 5430}#) 4)
                           (eq? (vector-ref #{e 5430}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{e 5430}# 1))
                     #f))
               (let ((#{label 5461}#
                       (#{id-var-name 4353}# #{e 5430}# '(()))))
                 (let ((#{b 5462}#
                         (let ((#{t 5599}# (assq #{label 5461}# #{r 5431}#)))
                           (if #{t 5599}#
                             (cdr #{t 5599}#)
                             (if (symbol? #{label 5461}#)
                               (let ((#{t 5604}#
                                       (begin
                                         (if (if (not #{mod 5434}#)
                                               (current-module)
                                               #f)
                                           (warn "module system is booted, we should have a module"
                                                 #{label 5461}#))
                                         (let ((#{v 5641}#
                                                 (module-variable
                                                   (if #{mod 5434}#
                                                     (resolve-module
                                                       (cdr #{mod 5434}#))
                                                     (current-module))
                                                   #{label 5461}#)))
                                           (if #{v 5641}#
                                             (if (variable-bound? #{v 5641}#)
                                               (let ((#{val 5650}#
                                                       (variable-ref
                                                         #{v 5641}#)))
                                                 (if (macro? #{val 5650}#)
                                                   (if (macro-type
                                                         #{val 5650}#)
                                                     (cons (macro-type
                                                             #{val 5650}#)
                                                           (macro-binding
                                                             #{val 5650}#))
                                                     #f)
                                                   #f))
                                               #f)
                                             #f)))))
                                 (if #{t 5604}# #{t 5604}# '(global)))
                               '(displaced-lexical))))))
                   (if (eq? (car #{b 5462}#) 'syntax)
                     (call-with-values
                       (lambda ()
                         (let ((#{var.lev 5495}# (cdr #{b 5462}#)))
                           (#{gen-ref 5328}#
                             #{src 5429}#
                             (car #{var.lev 5495}#)
                             (cdr #{var.lev 5495}#)
                             #{maps 5432}#)))
                       (lambda (#{var 5591}# #{maps 5592}#)
                         (values (list 'ref #{var 5591}#) #{maps 5592}#)))
                     (if (#{ellipsis? 5433}# #{e 5430}#)
                       (syntax-violation
                         'syntax
                         "misplaced ellipsis"
                         #{src 5429}#)
                       (values (list 'quote #{e 5430}#) #{maps 5432}#)))))
               (let ((#{tmp 5662}#
                       ($sc-dispatch #{e 5430}# '(any any))))
                 (if (if #{tmp 5662}#
                       (@apply
                         (lambda (#{dots 5666}# #{e 5667}#)
                           (#{ellipsis? 5433}# #{dots 5666}#))
                         #{tmp 5662}#)
                       #f)
                   (@apply
                     (lambda (#{dots 5668}# #{e 5669}#)
                       (#{gen-syntax 5327}#
                         #{src 5429}#
                         #{e 5669}#
                         #{r 5431}#
                         #{maps 5432}#
                         (lambda (#{x 5670}#) #f)
                         #{mod 5434}#))
                     #{tmp 5662}#)
                   (let ((#{tmp 5671}#
                           ($sc-dispatch #{e 5430}# '(any any . any))))
                     (if (if #{tmp 5671}#
                           (@apply
                             (lambda (#{x 5675}# #{dots 5676}# #{y 5677}#)
                               (#{ellipsis? 5433}# #{dots 5676}#))
                             #{tmp 5671}#)
                           #f)
                       (@apply
                         (lambda (#{x 5678}# #{dots 5679}# #{y 5680}#)
                           (letrec*
                             ((#{f 5681}#
                                (lambda (#{y 5689}# #{k 5690}#)
                                  (let ((#{tmp 5692}#
                                          ($sc-dispatch
                                            #{y 5689}#
                                            '(any . any))))
                                    (if (if #{tmp 5692}#
                                          (@apply
                                            (lambda (#{dots 5696}# #{y 5697}#)
                                              (#{ellipsis? 5433}#
                                                #{dots 5696}#))
                                            #{tmp 5692}#)
                                          #f)
                                      (@apply
                                        (lambda (#{dots 5698}# #{y 5699}#)
                                          (#{f 5681}#
                                            #{y 5699}#
                                            (lambda (#{maps 5700}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{k 5690}#
                                                    (cons '() #{maps 5700}#)))
                                                (lambda (#{x 5701}#
                                                         #{maps 5702}#)
                                                  (if (null? (car #{maps 5702}#))
                                                    (syntax-violation
                                                      'syntax
                                                      "extra ellipsis"
                                                      #{src 5429}#)
                                                    (values
                                                      (let ((#{map-env 5706}#
                                                              (car #{maps 5702}#)))
                                                        (list 'apply
                                                              '(primitive
                                                                 append)
                                                              (#{gen-map 5330}#
                                                                #{x 5701}#
                                                                #{map-env 5706}#)))
                                                      (cdr #{maps 5702}#))))))))
                                        #{tmp 5692}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{gen-syntax 5327}#
                                            #{src 5429}#
                                            #{y 5689}#
                                            #{r 5431}#
                                            #{maps 5432}#
                                            #{ellipsis? 5433}#
                                            #{mod 5434}#))
                                        (lambda (#{y 5709}# #{maps 5710}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{k 5690}# #{maps 5710}#))
                                            (lambda (#{x 5711}# #{maps 5712}#)
                                              (values
                                                (if (equal? #{y 5709}# ''())
                                                  #{x 5711}#
                                                  (list 'append
                                                        #{x 5711}#
                                                        #{y 5709}#))
                                                #{maps 5712}#))))))))))
                             (#{f 5681}#
                               #{y 5680}#
                               (lambda (#{maps 5684}#)
                                 (call-with-values
                                   (lambda ()
                                     (#{gen-syntax 5327}#
                                       #{src 5429}#
                                       #{x 5678}#
                                       #{r 5431}#
                                       (cons '() #{maps 5684}#)
                                       #{ellipsis? 5433}#
                                       #{mod 5434}#))
                                   (lambda (#{x 5685}# #{maps 5686}#)
                                     (if (null? (car #{maps 5686}#))
                                       (syntax-violation
                                         'syntax
                                         "extra ellipsis"
                                         #{src 5429}#)
                                       (values
                                         (#{gen-map 5330}#
                                           #{x 5685}#
                                           (car #{maps 5686}#))
                                         (cdr #{maps 5686}#)))))))))
                         #{tmp 5671}#)
                       (let ((#{tmp 5728}#
                               ($sc-dispatch #{e 5430}# '(any . any))))
                         (if #{tmp 5728}#
                           (@apply
                             (lambda (#{x 5732}# #{y 5733}#)
                               (call-with-values
                                 (lambda ()
                                   (#{gen-syntax 5327}#
                                     #{src 5429}#
                                     #{x 5732}#
                                     #{r 5431}#
                                     #{maps 5432}#
                                     #{ellipsis? 5433}#
                                     #{mod 5434}#))
                                 (lambda (#{x 5734}# #{maps 5735}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5327}#
                                         #{src 5429}#
                                         #{y 5733}#
                                         #{r 5431}#
                                         #{maps 5735}#
                                         #{ellipsis? 5433}#
                                         #{mod 5434}#))
                                     (lambda (#{y 5736}# #{maps 5737}#)
                                       (values
                                         (let ((#{atom-key 5742}#
                                                 (car #{y 5736}#)))
                                           (if (eqv? #{atom-key 5742}# 'quote)
                                             (if (eq? (car #{x 5734}#) 'quote)
                                               (list 'quote
                                                     (cons (car (cdr #{x 5734}#))
                                                           (car (cdr #{y 5736}#))))
                                               (if (eq? (car (cdr #{y 5736}#))
                                                        '())
                                                 (list 'list #{x 5734}#)
                                                 (list 'cons
                                                       #{x 5734}#
                                                       #{y 5736}#)))
                                             (if (eqv? #{atom-key 5742}# 'list)
                                               (cons 'list
                                                     (cons #{x 5734}#
                                                           (cdr #{y 5736}#)))
                                               (list 'cons
                                                     #{x 5734}#
                                                     #{y 5736}#))))
                                         #{maps 5737}#))))))
                             #{tmp 5728}#)
                           (let ((#{tmp 5771}#
                                   ($sc-dispatch
                                     #{e 5430}#
                                     '#(vector (any . each-any)))))
                             (if #{tmp 5771}#
                               (@apply
                                 (lambda (#{e1 5775}# #{e2 5776}#)
                                   (call-with-values
                                     (lambda ()
                                       (#{gen-syntax 5327}#
                                         #{src 5429}#
                                         (cons #{e1 5775}# #{e2 5776}#)
                                         #{r 5431}#
                                         #{maps 5432}#
                                         #{ellipsis? 5433}#
                                         #{mod 5434}#))
                                     (lambda (#{e 5777}# #{maps 5778}#)
                                       (values
                                         (if (eq? (car #{e 5777}#) 'list)
                                           (cons 'vector (cdr #{e 5777}#))
                                           (if (eq? (car #{e 5777}#) 'quote)
                                             (list 'quote
                                                   (list->vector
                                                     (car (cdr #{e 5777}#))))
                                             (list 'list->vector #{e 5777}#)))
                                         #{maps 5778}#))))
                                 #{tmp 5771}#)
                               (values
                                 (list 'quote #{e 5430}#)
                                 #{maps 5432}#))))))))))))
         (#{gen-ref 5328}#
           (lambda (#{src 5805}#
                    #{var 5806}#
                    #{level 5807}#
                    #{maps 5808}#)
             (if (= #{level 5807}# 0)
               (values #{var 5806}# #{maps 5808}#)
               (if (null? #{maps 5808}#)
                 (syntax-violation
                   'syntax
                   "missing ellipsis"
                   #{src 5805}#)
                 (call-with-values
                   (lambda ()
                     (#{gen-ref 5328}#
                       #{src 5805}#
                       #{var 5806}#
                       (#{1-}# #{level 5807}#)
                       (cdr #{maps 5808}#)))
                   (lambda (#{outer-var 5809}# #{outer-maps 5810}#)
                     (let ((#{b 5811}#
                             (assq #{outer-var 5809}# (car #{maps 5808}#))))
                       (if #{b 5811}#
                         (values (cdr #{b 5811}#) #{maps 5808}#)
                         (let ((#{inner-var 5813}#
                                 (gensym
                                   (string-append (symbol->string 'tmp) " "))))
                           (values
                             #{inner-var 5813}#
                             (cons (cons (cons #{outer-var 5809}#
                                               #{inner-var 5813}#)
                                         (car #{maps 5808}#))
                                   #{outer-maps 5810}#)))))))))))
         (#{gen-map 5330}#
           (lambda (#{e 5827}# #{map-env 5828}#)
             (let ((#{formals 5829}# (map cdr #{map-env 5828}#))
                   (#{actuals 5830}#
                     (map (lambda (#{x 5832}#)
                            (list 'ref (car #{x 5832}#)))
                          #{map-env 5828}#)))
               (if (eq? (car #{e 5827}#) 'ref)
                 (car #{actuals 5830}#)
                 (if (and-map
                       (lambda (#{x 5833}#)
                         (if (eq? (car #{x 5833}#) 'ref)
                           (memq (car (cdr #{x 5833}#)) #{formals 5829}#)
                           #f))
                       (cdr #{e 5827}#))
                   (cons 'map
                         (cons (list 'primitive (car #{e 5827}#))
                               (map (let ((#{r 5835}#
                                            (map cons
                                                 #{formals 5829}#
                                                 #{actuals 5830}#)))
                                      (lambda (#{x 5836}#)
                                        (cdr (assq (car (cdr #{x 5836}#))
                                                   #{r 5835}#))))
                                    (cdr #{e 5827}#))))
                   (cons 'map
                         (cons (list 'lambda #{formals 5829}# #{e 5827}#)
                               #{actuals 5830}#)))))))
         (#{regen 5334}#
           (lambda (#{x 5838}#)
             (let ((#{atom-key 5839}# (car #{x 5838}#)))
               (if (eqv? #{atom-key 5839}# 'ref)
                 (let ((#{name 5849}# (car (cdr #{x 5838}#)))
                       (#{var 5850}# (car (cdr #{x 5838}#))))
                   (make-struct/no-tail
                     (vector-ref %expanded-vtables 3)
                     #f
                     #{name 5849}#
                     #{var 5850}#))
                 (if (eqv? #{atom-key 5839}# 'primitive)
                   (let ((#{name 5862}# (car (cdr #{x 5838}#))))
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         #{name 5862}#)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         #{name 5862}#
                         #f)))
                   (if (eqv? #{atom-key 5839}# 'quote)
                     (let ((#{exp 5880}# (car (cdr #{x 5838}#))))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 1)
                         #f
                         #{exp 5880}#))
                     (if (eqv? #{atom-key 5839}# 'lambda)
                       (if (list? (car (cdr #{x 5838}#)))
                         (let ((#{req 5891}# (car (cdr #{x 5838}#)))
                               (#{vars 5893}# (car (cdr #{x 5838}#)))
                               (#{exp 5895}#
                                 (#{regen 5334}#
                                   (car (cdr (cdr #{x 5838}#))))))
                           (let ((#{body 5900}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 5891}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 5893}#
                                     #{exp 5895}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 5900}#)))
                         (error "how did we get here" #{x 5838}#))
                       (let ((#{fun-exp 5916}#
                               (let ((#{name 5925}# (car #{x 5838}#)))
                                 (if (equal?
                                       (module-name (current-module))
                                       '(guile))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 7)
                                     #f
                                     #{name 5925}#)
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 5)
                                     #f
                                     '(guile)
                                     #{name 5925}#
                                     #f))))
                             (#{arg-exps 5917}#
                               (map #{regen 5334}# (cdr #{x 5838}#))))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 11)
                           #f
                           #{fun-exp 5916}#
                           #{arg-exps 5917}#))))))))))
        (lambda (#{e 5335}#
                 #{r 5336}#
                 #{w 5337}#
                 #{s 5338}#
                 #{mod 5339}#)
          (let ((#{e 5340}#
                  (#{wrap 4359}#
                    (begin
                      (if (if (pair? #{e 5335}#) #{s 5338}# #f)
                        (set-source-properties! #{e 5335}# #{s 5338}#))
                      #{e 5335}#)
                    #{w 5337}#
                    #{mod 5339}#)))
            (let ((#{tmp 5342}# ($sc-dispatch #{e 5340}# '(_ any))))
              (if #{tmp 5342}#
                (@apply
                  (lambda (#{x 5367}#)
                    (call-with-values
                      (lambda ()
                        (#{gen-syntax 5327}#
                          #{e 5340}#
                          #{x 5367}#
                          #{r 5336}#
                          '()
                          #{ellipsis? 4374}#
                          #{mod 5339}#))
                      (lambda (#{e 5421}# #{maps 5422}#)
                        (#{regen 5334}# #{e 5421}#))))
                  #{tmp 5342}#)
                (syntax-violation
                  'syntax
                  "bad `syntax' form"
                  #{e 5340}#)))))))
    (#{global-extend 4332}#
      'core
      'lambda
      (lambda (#{e 6120}#
               #{r 6121}#
               #{w 6122}#
               #{s 6123}#
               #{mod 6124}#)
        (let ((#{tmp 6126}#
                ($sc-dispatch #{e 6120}# '(_ any any . each-any))))
          (if #{tmp 6126}#
            (@apply
              (lambda (#{args 6130}# #{e1 6131}# #{e2 6132}#)
                (call-with-values
                  (lambda ()
                    (#{lambda-formals 4375}# #{args 6130}#))
                  (lambda (#{req 6135}#
                           #{opt 6136}#
                           #{rest 6137}#
                           #{kw 6138}#)
                    (letrec*
                      ((#{lp 6139}#
                         (lambda (#{body 6142}# #{meta 6143}#)
                           (let ((#{tmp 6145}#
                                   ($sc-dispatch
                                     #{body 6142}#
                                     '(any any . each-any))))
                             (if (if #{tmp 6145}#
                                   (@apply
                                     (lambda (#{docstring 6149}#
                                              #{e1 6150}#
                                              #{e2 6151}#)
                                       (string?
                                         (syntax->datum #{docstring 6149}#)))
                                     #{tmp 6145}#)
                                   #f)
                               (@apply
                                 (lambda (#{docstring 6152}#
                                          #{e1 6153}#
                                          #{e2 6154}#)
                                   (#{lp 6139}#
                                     (cons #{e1 6153}# #{e2 6154}#)
                                     (append
                                       #{meta 6143}#
                                       (list (cons 'documentation
                                                   (syntax->datum
                                                     #{docstring 6152}#))))))
                                 #{tmp 6145}#)
                               (let ((#{tmp 6155}#
                                       ($sc-dispatch
                                         #{body 6142}#
                                         '(#(vector #(each (any . any)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 6155}#
                                   (@apply
                                     (lambda (#{k 6159}#
                                              #{v 6160}#
                                              #{e1 6161}#
                                              #{e2 6162}#)
                                       (#{lp 6139}#
                                         (cons #{e1 6161}# #{e2 6162}#)
                                         (append
                                           #{meta 6143}#
                                           (syntax->datum
                                             (map cons
                                                  #{k 6159}#
                                                  #{v 6160}#)))))
                                     #{tmp 6155}#)
                                   (#{chi-simple-lambda 4376}#
                                     #{e 6120}#
                                     #{r 6121}#
                                     #{w 6122}#
                                     #{s 6123}#
                                     #{mod 6124}#
                                     #{req 6135}#
                                     #{rest 6137}#
                                     #{meta 6143}#
                                     #{body 6142}#))))))))
                      (#{lp 6139}# (cons #{e1 6131}# #{e2 6132}#) '())))))
              #{tmp 6126}#)
            (syntax-violation
              'lambda
              "bad lambda"
              #{e 6120}#)))))
    (#{global-extend 4332}#
      'core
      'lambda*
      (lambda (#{e 6454}#
               #{r 6455}#
               #{w 6456}#
               #{s 6457}#
               #{mod 6458}#)
        (let ((#{tmp 6460}#
                ($sc-dispatch #{e 6454}# '(_ any any . each-any))))
          (if #{tmp 6460}#
            (@apply
              (lambda (#{args 6464}# #{e1 6465}# #{e2 6466}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4378}#
                      #{e 6454}#
                      #{r 6455}#
                      #{w 6456}#
                      #{s 6457}#
                      #{mod 6458}#
                      #{lambda*-formals 4377}#
                      (list (cons #{args 6464}#
                                  (cons #{e1 6465}# #{e2 6466}#)))))
                  (lambda (#{meta 6469}# #{lcase 6470}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6457}#
                      #{meta 6469}#
                      #{lcase 6470}#))))
              #{tmp 6460}#)
            (syntax-violation
              'lambda
              "bad lambda*"
              #{e 6454}#)))))
    (#{global-extend 4332}#
      'core
      'case-lambda
      (lambda (#{e 6644}#
               #{r 6645}#
               #{w 6646}#
               #{s 6647}#
               #{mod 6648}#)
        (let ((#{tmp 6650}#
                ($sc-dispatch
                  #{e 6644}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6650}#
            (@apply
              (lambda (#{args 6654}#
                       #{e1 6655}#
                       #{e2 6656}#
                       #{args* 6657}#
                       #{e1* 6658}#
                       #{e2* 6659}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4378}#
                      #{e 6644}#
                      #{r 6645}#
                      #{w 6646}#
                      #{s 6647}#
                      #{mod 6648}#
                      #{lambda-formals 4375}#
                      (cons (cons #{args 6654}#
                                  (cons #{e1 6655}# #{e2 6656}#))
                            (map (lambda (#{tmp 3295 6662}#
                                          #{tmp 3294 6663}#
                                          #{tmp 3293 6664}#)
                                   (cons #{tmp 3293 6664}#
                                         (cons #{tmp 3294 6663}#
                                               #{tmp 3295 6662}#)))
                                 #{e2* 6659}#
                                 #{e1* 6658}#
                                 #{args* 6657}#))))
                  (lambda (#{meta 6665}# #{lcase 6666}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6647}#
                      #{meta 6665}#
                      #{lcase 6666}#))))
              #{tmp 6650}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda"
              #{e 6644}#)))))
    (#{global-extend 4332}#
      'core
      'case-lambda*
      (lambda (#{e 6829}#
               #{r 6830}#
               #{w 6831}#
               #{s 6832}#
               #{mod 6833}#)
        (let ((#{tmp 6835}#
                ($sc-dispatch
                  #{e 6829}#
                  '(_ (any any . each-any)
                      .
                      #(each (any any . each-any))))))
          (if #{tmp 6835}#
            (@apply
              (lambda (#{args 6839}#
                       #{e1 6840}#
                       #{e2 6841}#
                       #{args* 6842}#
                       #{e1* 6843}#
                       #{e2* 6844}#)
                (call-with-values
                  (lambda ()
                    (#{chi-lambda-case 4378}#
                      #{e 6829}#
                      #{r 6830}#
                      #{w 6831}#
                      #{s 6832}#
                      #{mod 6833}#
                      #{lambda*-formals 4377}#
                      (cons (cons #{args 6839}#
                                  (cons #{e1 6840}# #{e2 6841}#))
                            (map (lambda (#{tmp 3330 6847}#
                                          #{tmp 3329 6848}#
                                          #{tmp 3328 6849}#)
                                   (cons #{tmp 3328 6849}#
                                         (cons #{tmp 3329 6848}#
                                               #{tmp 3330 6847}#)))
                                 #{e2* 6844}#
                                 #{e1* 6843}#
                                 #{args* 6842}#))))
                  (lambda (#{meta 6850}# #{lcase 6851}#)
                    (make-struct/no-tail
                      (vector-ref %expanded-vtables 13)
                      #{s 6832}#
                      #{meta 6850}#
                      #{lcase 6851}#))))
              #{tmp 6835}#)
            (syntax-violation
              'case-lambda
              "bad case-lambda*"
              #{e 6829}#)))))
    (#{global-extend 4332}#
      'core
      'let
      (letrec*
        ((#{chi-let 7043}#
           (lambda (#{e 7192}#
                    #{r 7193}#
                    #{w 7194}#
                    #{s 7195}#
                    #{mod 7196}#
                    #{constructor 7197}#
                    #{ids 7198}#
                    #{vals 7199}#
                    #{exps 7200}#)
             (if (not (#{valid-bound-ids? 4356}# #{ids 7198}#))
               (syntax-violation
                 'let
                 "duplicate bound variable"
                 #{e 7192}#)
               (let ((#{labels 7278}#
                       (#{gen-labels 4337}# #{ids 7198}#))
                     (#{new-vars 7279}#
                       (map #{gen-var 4380}# #{ids 7198}#)))
                 (let ((#{nw 7280}#
                         (#{make-binding-wrap 4348}#
                           #{ids 7198}#
                           #{labels 7278}#
                           #{w 7194}#))
                       (#{nr 7281}#
                         (#{extend-var-env 4329}#
                           #{labels 7278}#
                           #{new-vars 7279}#
                           #{r 7193}#)))
                   (#{constructor 7197}#
                     #{s 7195}#
                     (map syntax->datum #{ids 7198}#)
                     #{new-vars 7279}#
                     (map (lambda (#{x 7298}#)
                            (#{chi 4366}#
                              #{x 7298}#
                              #{r 7193}#
                              #{w 7194}#
                              #{mod 7196}#))
                          #{vals 7199}#)
                     (#{chi-body 4370}#
                       #{exps 7200}#
                       (#{source-wrap 4360}#
                         #{e 7192}#
                         #{nw 7280}#
                         #{s 7195}#
                         #{mod 7196}#)
                       #{nr 7281}#
                       #{nw 7280}#
                       #{mod 7196}#))))))))
        (lambda (#{e 7044}#
                 #{r 7045}#
                 #{w 7046}#
                 #{s 7047}#
                 #{mod 7048}#)
          (let ((#{tmp 7050}#
                  ($sc-dispatch
                    #{e 7044}#
                    '(_ #(each (any any)) any . each-any))))
            (if (if #{tmp 7050}#
                  (@apply
                    (lambda (#{id 7054}#
                             #{val 7055}#
                             #{e1 7056}#
                             #{e2 7057}#)
                      (and-map #{id? 4334}# #{id 7054}#))
                    #{tmp 7050}#)
                  #f)
              (@apply
                (lambda (#{id 7073}#
                         #{val 7074}#
                         #{e1 7075}#
                         #{e2 7076}#)
                  (#{chi-let 7043}#
                    #{e 7044}#
                    #{r 7045}#
                    #{w 7046}#
                    #{s 7047}#
                    #{mod 7048}#
                    #{build-let 4316}#
                    #{id 7073}#
                    #{val 7074}#
                    (cons #{e1 7075}# #{e2 7076}#)))
                #{tmp 7050}#)
              (let ((#{tmp 7106}#
                      ($sc-dispatch
                        #{e 7044}#
                        '(_ any #(each (any any)) any . each-any))))
                (if (if #{tmp 7106}#
                      (@apply
                        (lambda (#{f 7110}#
                                 #{id 7111}#
                                 #{val 7112}#
                                 #{e1 7113}#
                                 #{e2 7114}#)
                          (if (if (symbol? #{f 7110}#)
                                #t
                                (if (if (vector? #{f 7110}#)
                                      (if (= (vector-length #{f 7110}#) 4)
                                        (eq? (vector-ref #{f 7110}# 0)
                                             'syntax-object)
                                        #f)
                                      #f)
                                  (symbol? (vector-ref #{f 7110}# 1))
                                  #f))
                            (and-map #{id? 4334}# #{id 7111}#)
                            #f))
                        #{tmp 7106}#)
                      #f)
                  (@apply
                    (lambda (#{f 7156}#
                             #{id 7157}#
                             #{val 7158}#
                             #{e1 7159}#
                             #{e2 7160}#)
                      (#{chi-let 7043}#
                        #{e 7044}#
                        #{r 7045}#
                        #{w 7046}#
                        #{s 7047}#
                        #{mod 7048}#
                        #{build-named-let 4317}#
                        (cons #{f 7156}# #{id 7157}#)
                        #{val 7158}#
                        (cons #{e1 7159}# #{e2 7160}#)))
                    #{tmp 7106}#)
                  (syntax-violation
                    'let
                    "bad let"
                    (#{wrap 4359}#
                      (begin
                        (if (if (pair? #{e 7044}#) #{s 7047}# #f)
                          (set-source-properties! #{e 7044}# #{s 7047}#))
                        #{e 7044}#)
                      #{w 7046}#
                      #{mod 7048}#)))))))))
    (#{global-extend 4332}#
      'core
      'letrec
      (lambda (#{e 7747}#
               #{r 7748}#
               #{w 7749}#
               #{s 7750}#
               #{mod 7751}#)
        (let ((#{tmp 7753}#
                ($sc-dispatch
                  #{e 7747}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 7753}#
                (@apply
                  (lambda (#{id 7757}#
                           #{val 7758}#
                           #{e1 7759}#
                           #{e2 7760}#)
                    (and-map #{id? 4334}# #{id 7757}#))
                  #{tmp 7753}#)
                #f)
            (@apply
              (lambda (#{id 7776}#
                       #{val 7777}#
                       #{e1 7778}#
                       #{e2 7779}#)
                (if (not (#{valid-bound-ids? 4356}# #{id 7776}#))
                  (syntax-violation
                    'letrec
                    "duplicate bound variable"
                    #{e 7747}#)
                  (let ((#{labels 7869}#
                          (#{gen-labels 4337}# #{id 7776}#))
                        (#{new-vars 7870}#
                          (map #{gen-var 4380}# #{id 7776}#)))
                    (let ((#{w 7871}#
                            (#{make-binding-wrap 4348}#
                              #{id 7776}#
                              #{labels 7869}#
                              #{w 7749}#))
                          (#{r 7872}#
                            (#{extend-var-env 4329}#
                              #{labels 7869}#
                              #{new-vars 7870}#
                              #{r 7748}#)))
                      (#{build-letrec 4318}#
                        #{s 7750}#
                        #f
                        (map syntax->datum #{id 7776}#)
                        #{new-vars 7870}#
                        (map (lambda (#{x 7959}#)
                               (#{chi 4366}#
                                 #{x 7959}#
                                 #{r 7872}#
                                 #{w 7871}#
                                 #{mod 7751}#))
                             #{val 7777}#)
                        (#{chi-body 4370}#
                          (cons #{e1 7778}# #{e2 7779}#)
                          (#{wrap 4359}#
                            (begin
                              (if (if (pair? #{e 7747}#) #{s 7750}# #f)
                                (set-source-properties! #{e 7747}# #{s 7750}#))
                              #{e 7747}#)
                            #{w 7871}#
                            #{mod 7751}#)
                          #{r 7872}#
                          #{w 7871}#
                          #{mod 7751}#))))))
              #{tmp 7753}#)
            (syntax-violation
              'letrec
              "bad letrec"
              (#{wrap 4359}#
                (begin
                  (if (if (pair? #{e 7747}#) #{s 7750}# #f)
                    (set-source-properties! #{e 7747}# #{s 7750}#))
                  #{e 7747}#)
                #{w 7749}#
                #{mod 7751}#))))))
    (#{global-extend 4332}#
      'core
      'letrec*
      (lambda (#{e 8376}#
               #{r 8377}#
               #{w 8378}#
               #{s 8379}#
               #{mod 8380}#)
        (let ((#{tmp 8382}#
                ($sc-dispatch
                  #{e 8376}#
                  '(_ #(each (any any)) any . each-any))))
          (if (if #{tmp 8382}#
                (@apply
                  (lambda (#{id 8386}#
                           #{val 8387}#
                           #{e1 8388}#
                           #{e2 8389}#)
                    (and-map #{id? 4334}# #{id 8386}#))
                  #{tmp 8382}#)
                #f)
            (@apply
              (lambda (#{id 8405}#
                       #{val 8406}#
                       #{e1 8407}#
                       #{e2 8408}#)
                (if (not (#{valid-bound-ids? 4356}# #{id 8405}#))
                  (syntax-violation
                    'letrec*
                    "duplicate bound variable"
                    #{e 8376}#)
                  (let ((#{labels 8498}#
                          (#{gen-labels 4337}# #{id 8405}#))
                        (#{new-vars 8499}#
                          (map #{gen-var 4380}# #{id 8405}#)))
                    (let ((#{w 8500}#
                            (#{make-binding-wrap 4348}#
                              #{id 8405}#
                              #{labels 8498}#
                              #{w 8378}#))
                          (#{r 8501}#
                            (#{extend-var-env 4329}#
                              #{labels 8498}#
                              #{new-vars 8499}#
                              #{r 8377}#)))
                      (#{build-letrec 4318}#
                        #{s 8379}#
                        #t
                        (map syntax->datum #{id 8405}#)
                        #{new-vars 8499}#
                        (map (lambda (#{x 8588}#)
                               (#{chi 4366}#
                                 #{x 8588}#
                                 #{r 8501}#
                                 #{w 8500}#
                                 #{mod 8380}#))
                             #{val 8406}#)
                        (#{chi-body 4370}#
                          (cons #{e1 8407}# #{e2 8408}#)
                          (#{wrap 4359}#
                            (begin
                              (if (if (pair? #{e 8376}#) #{s 8379}# #f)
                                (set-source-properties! #{e 8376}# #{s 8379}#))
                              #{e 8376}#)
                            #{w 8500}#
                            #{mod 8380}#)
                          #{r 8501}#
                          #{w 8500}#
                          #{mod 8380}#))))))
              #{tmp 8382}#)
            (syntax-violation
              'letrec*
              "bad letrec*"
              (#{wrap 4359}#
                (begin
                  (if (if (pair? #{e 8376}#) #{s 8379}# #f)
                    (set-source-properties! #{e 8376}# #{s 8379}#))
                  #{e 8376}#)
                #{w 8378}#
                #{mod 8380}#))))))
    (#{global-extend 4332}#
      'core
      'set!
      (lambda (#{e 9059}#
               #{r 9060}#
               #{w 9061}#
               #{s 9062}#
               #{mod 9063}#)
        (let ((#{tmp 9065}#
                ($sc-dispatch #{e 9059}# '(_ any any))))
          (if (if #{tmp 9065}#
                (@apply
                  (lambda (#{id 9069}# #{val 9070}#)
                    (if (symbol? #{id 9069}#)
                      #t
                      (if (if (vector? #{id 9069}#)
                            (if (= (vector-length #{id 9069}#) 4)
                              (eq? (vector-ref #{id 9069}# 0) 'syntax-object)
                              #f)
                            #f)
                        (symbol? (vector-ref #{id 9069}# 1))
                        #f)))
                  #{tmp 9065}#)
                #f)
            (@apply
              (lambda (#{id 9097}# #{val 9098}#)
                (let ((#{n 9099}#
                        (#{id-var-name 4353}# #{id 9097}# #{w 9061}#))
                      (#{id-mod 9100}#
                        (if (if (vector? #{id 9097}#)
                              (if (= (vector-length #{id 9097}#) 4)
                                (eq? (vector-ref #{id 9097}# 0) 'syntax-object)
                                #f)
                              #f)
                          (vector-ref #{id 9097}# 3)
                          #{mod 9063}#)))
                  (let ((#{b 9101}#
                          (let ((#{t 9788}# (assq #{n 9099}# #{r 9060}#)))
                            (if #{t 9788}#
                              (cdr #{t 9788}#)
                              (if (symbol? #{n 9099}#)
                                (let ((#{t 9793}#
                                        (begin
                                          (if (if (not #{id-mod 9100}#)
                                                (current-module)
                                                #f)
                                            (warn "module system is booted, we should have a module"
                                                  #{n 9099}#))
                                          (let ((#{v 9830}#
                                                  (module-variable
                                                    (if #{id-mod 9100}#
                                                      (resolve-module
                                                        (cdr #{id-mod 9100}#))
                                                      (current-module))
                                                    #{n 9099}#)))
                                            (if #{v 9830}#
                                              (if (variable-bound? #{v 9830}#)
                                                (let ((#{val 9839}#
                                                        (variable-ref
                                                          #{v 9830}#)))
                                                  (if (macro? #{val 9839}#)
                                                    (if (macro-type
                                                          #{val 9839}#)
                                                      (cons (macro-type
                                                              #{val 9839}#)
                                                            (macro-binding
                                                              #{val 9839}#))
                                                      #f)
                                                    #f))
                                                #f)
                                              #f)))))
                                  (if #{t 9793}# #{t 9793}# '(global)))
                                '(displaced-lexical))))))
                    (let ((#{atom-key 9102}# (car #{b 9101}#)))
                      (if (let ((#{t 9139}# #{atom-key 9102}#))
                            (eqv? #{t 9139}# 'lexical))
                        (#{build-lexical-assignment 4305}#
                          #{s 9062}#
                          (syntax->datum #{id 9097}#)
                          (cdr #{b 9101}#)
                          (#{chi 4366}#
                            #{val 9098}#
                            #{r 9060}#
                            #{w 9061}#
                            #{mod 9063}#))
                        (if (let ((#{t 9424}# #{atom-key 9102}#))
                              (eqv? #{t 9424}# 'global))
                          (#{build-global-assignment 4308}#
                            #{s 9062}#
                            #{n 9099}#
                            (#{chi 4366}#
                              #{val 9098}#
                              #{r 9060}#
                              #{w 9061}#
                              #{mod 9063}#)
                            #{id-mod 9100}#)
                          (if (let ((#{t 9679}# #{atom-key 9102}#))
                                (eqv? #{t 9679}# 'macro))
                            (let ((#{p 9742}# (cdr #{b 9101}#)))
                              (if (procedure-property
                                    #{p 9742}#
                                    'variable-transformer)
                                (#{chi 4366}#
                                  (#{chi-macro 4369}#
                                    #{p 9742}#
                                    #{e 9059}#
                                    #{r 9060}#
                                    #{w 9061}#
                                    #{s 9062}#
                                    #f
                                    #{mod 9063}#)
                                  #{r 9060}#
                                  '(())
                                  #{mod 9063}#)
                                (syntax-violation
                                  'set!
                                  "not a variable transformer"
                                  (#{wrap 4359}#
                                    #{e 9059}#
                                    #{w 9061}#
                                    #{mod 9063}#)
                                  (#{wrap 4359}#
                                    #{id 9097}#
                                    #{w 9061}#
                                    #{id-mod 9100}#))))
                            (if (eqv? #{atom-key 9102}# 'displaced-lexical)
                              (syntax-violation
                                'set!
                                "identifier out of context"
                                (#{wrap 4359}#
                                  #{id 9097}#
                                  #{w 9061}#
                                  #{mod 9063}#))
                              (syntax-violation
                                'set!
                                "bad set!"
                                (#{wrap 4359}#
                                  (begin
                                    (if (if (pair? #{e 9059}#) #{s 9062}# #f)
                                      (set-source-properties!
                                        #{e 9059}#
                                        #{s 9062}#))
                                    #{e 9059}#)
                                  #{w 9061}#
                                  #{mod 9063}#))))))))))
              #{tmp 9065}#)
            (let ((#{tmp 9940}#
                    ($sc-dispatch
                      #{e 9059}#
                      '(_ (any . each-any) any))))
              (if #{tmp 9940}#
                (@apply
                  (lambda (#{head 9944}# #{tail 9945}# #{val 9946}#)
                    (call-with-values
                      (lambda ()
                        (#{syntax-type 4365}#
                          #{head 9944}#
                          #{r 9060}#
                          '(())
                          #f
                          #f
                          #{mod 9063}#
                          #t))
                      (lambda (#{type 9949}#
                               #{value 9950}#
                               #{ee 9951}#
                               #{ww 9952}#
                               #{ss 9953}#
                               #{modmod 9954}#)
                        (if (eqv? #{type 9949}# 'module-ref)
                          (let ((#{val 9958}#
                                  (#{chi 4366}#
                                    #{val 9946}#
                                    #{r 9060}#
                                    #{w 9061}#
                                    #{mod 9063}#)))
                            (call-with-values
                              (lambda ()
                                (#{value 9950}#
                                  (cons #{head 9944}# #{tail 9945}#)
                                  #{r 9060}#
                                  #{w 9061}#))
                              (lambda (#{e 9959}#
                                       #{r 9960}#
                                       #{w 9961}#
                                       #{s* 9962}#
                                       #{mod 9963}#)
                                (let ((#{tmp 9965}# (list #{e 9959}#)))
                                  (if (@apply
                                        (lambda (#{e 9967}#)
                                          (if (symbol? #{e 9967}#)
                                            #t
                                            (if (if (vector? #{e 9967}#)
                                                  (if (= (vector-length
                                                           #{e 9967}#)
                                                         4)
                                                    (eq? (vector-ref
                                                           #{e 9967}#
                                                           0)
                                                         'syntax-object)
                                                    #f)
                                                  #f)
                                              (symbol?
                                                (vector-ref #{e 9967}# 1))
                                              #f)))
                                        #{tmp 9965}#)
                                    (@apply
                                      (lambda (#{e 9997}#)
                                        (#{build-global-assignment 4308}#
                                          #{s 9062}#
                                          (syntax->datum #{e 9997}#)
                                          #{val 9958}#
                                          #{mod 9963}#))
                                      #{tmp 9965}#)
                                    (syntax-violation
                                      #f
                                      "source expression failed to match any pattern"
                                      #{e 9959}#))))))
                          (#{build-application 4301}#
                            #{s 9062}#
                            (#{chi 4366}#
                              (list '#(syntax-object
                                       setter
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(type value ee ww ss modmod)
                                          #((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                          #("i3576"
                                            "i3577"
                                            "i3578"
                                            "i3579"
                                            "i3580"
                                            "i3581"))
                                        #(ribcage
                                          #(head tail val)
                                          #((top) (top) (top))
                                          #("i3562" "i3563" "i3564"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(e r w s mod)
                                          #((top) (top) (top) (top) (top))
                                          #("i3526"
                                            "i3527"
                                            "i3528"
                                            "i3529"
                                            "i3530"))
                                        #(ribcage
                                          (lambda-var-list
                                            gen-var
                                            strip
                                            chi-lambda-case
                                            lambda*-formals
                                            chi-simple-lambda
                                            lambda-formals
                                            ellipsis?
                                            chi-void
                                            eval-local-transformer
                                            chi-local-syntax
                                            chi-body
                                            chi-macro
                                            chi-application
                                            chi-expr
                                            chi
                                            syntax-type
                                            chi-when-list
                                            chi-install-global
                                            chi-top-sequence
                                            chi-sequence
                                            source-wrap
                                            wrap
                                            bound-id-member?
                                            distinct-bound-ids?
                                            valid-bound-ids?
                                            bound-id=?
                                            free-id=?
                                            id-var-name
                                            same-marks?
                                            join-marks
                                            join-wraps
                                            smart-append
                                            make-binding-wrap
                                            extend-ribcage!
                                            make-empty-ribcage
                                            new-mark
                                            anti-mark
                                            the-anti-mark
                                            top-marked?
                                            top-wrap
                                            empty-wrap
                                            set-ribcage-labels!
                                            set-ribcage-marks!
                                            set-ribcage-symnames!
                                            ribcage-labels
                                            ribcage-marks
                                            ribcage-symnames
                                            ribcage?
                                            make-ribcage
                                            gen-labels
                                            gen-label
                                            make-rename
                                            rename-marks
                                            rename-new
                                            rename-old
                                            subst-rename?
                                            wrap-subst
                                            wrap-marks
                                            make-wrap
                                            id-sym-name&marks
                                            id-sym-name
                                            id?
                                            nonsymbol-id?
                                            global-extend
                                            lookup
                                            macros-only-env
                                            extend-var-env
                                            extend-env
                                            null-env
                                            binding-value
                                            binding-type
                                            make-binding
                                            arg-check
                                            source-annotation
                                            no-source
                                            set-syntax-object-module!
                                            set-syntax-object-wrap!
                                            set-syntax-object-expression!
                                            syntax-object-module
                                            syntax-object-wrap
                                            syntax-object-expression
                                            syntax-object?
                                            make-syntax-object
                                            build-lexical-var
                                            build-letrec
                                            build-named-let
                                            build-let
                                            build-sequence
                                            build-data
                                            build-primref
                                            build-lambda-case
                                            build-case-lambda
                                            build-simple-lambda
                                            build-global-definition
                                            build-global-assignment
                                            build-global-reference
                                            analyze-variable
                                            build-lexical-assignment
                                            build-lexical-reference
                                            build-dynlet
                                            build-conditional
                                            build-application
                                            build-void
                                            maybe-name-value!
                                            decorate-source
                                            get-global-definition-hook
                                            put-global-definition-hook
                                            gensym-hook
                                            local-eval-hook
                                            top-level-eval-hook
                                            fx<
                                            fx=
                                            fx-
                                            fx+
                                            set-lambda-meta!
                                            lambda-meta
                                            lambda?
                                            make-dynlet
                                            make-letrec
                                            make-let
                                            make-lambda-case
                                            make-lambda
                                            make-sequence
                                            make-application
                                            make-conditional
                                            make-toplevel-define
                                            make-toplevel-set
                                            make-toplevel-ref
                                            make-module-set
                                            make-module-ref
                                            make-lexical-set
                                            make-lexical-ref
                                            make-primitive-ref
                                            make-const
                                            make-void)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i467"
                                           "i465"
                                           "i463"
                                           "i461"
                                           "i459"
                                           "i457"
                                           "i455"
                                           "i453"
                                           "i451"
                                           "i449"
                                           "i447"
                                           "i445"
                                           "i443"
                                           "i441"
                                           "i439"
                                           "i437"
                                           "i435"
                                           "i433"
                                           "i431"
                                           "i429"
                                           "i427"
                                           "i425"
                                           "i423"
                                           "i421"
                                           "i419"
                                           "i417"
                                           "i415"
                                           "i413"
                                           "i411"
                                           "i409"
                                           "i407"
                                           "i405"
                                           "i403"
                                           "i401"
                                           "i399"
                                           "i398"
                                           "i396"
                                           "i393"
                                           "i392"
                                           "i391"
                                           "i389"
                                           "i388"
                                           "i386"
                                           "i384"
                                           "i382"
                                           "i380"
                                           "i378"
                                           "i376"
                                           "i374"
                                           "i372"
                                           "i369"
                                           "i367"
                                           "i366"
                                           "i364"
                                           "i362"
                                           "i360"
                                           "i358"
                                           "i357"
                                           "i356"
                                           "i355"
                                           "i353"
                                           "i352"
                                           "i349"
                                           "i347"
                                           "i345"
                                           "i343"
                                           "i341"
                                           "i339"
                                           "i337"
                                           "i336"
                                           "i335"
                                           "i333"
                                           "i331"
                                           "i330"
                                           "i327"
                                           "i326"
                                           "i324"
                                           "i322"
                                           "i320"
                                           "i318"
                                           "i316"
                                           "i314"
                                           "i312"
                                           "i310"
                                           "i308"
                                           "i305"
                                           "i303"
                                           "i301"
                                           "i299"
                                           "i297"
                                           "i295"
                                           "i293"
                                           "i291"
                                           "i289"
                                           "i287"
                                           "i285"
                                           "i283"
                                           "i281"
                                           "i279"
                                           "i277"
                                           "i275"
                                           "i273"
                                           "i271"
                                           "i269"
                                           "i267"
                                           "i265"
                                           "i263"
                                           "i261"
                                           "i260"
                                           "i257"
                                           "i255"
                                           "i254"
                                           "i253"
                                           "i252"
                                           "i251"
                                           "i249"
                                           "i247"
                                           "i245"
                                           "i242"
                                           "i240"
                                           "i238"
                                           "i236"
                                           "i234"
                                           "i232"
                                           "i230"
                                           "i228"
                                           "i226"
                                           "i224"
                                           "i222"
                                           "i220"
                                           "i218"
                                           "i216"
                                           "i214"
                                           "i212"
                                           "i210"
                                           "i208"))
                                        #(ribcage
                                          (define-structure
                                            define-expansion-accessors
                                            define-expansion-constructors)
                                          ((top) (top) (top))
                                          ("i46" "i45" "i44")))
                                       (hygiene guile))
                                    #{head 9944}#)
                              #{r 9060}#
                              #{w 9061}#
                              #{mod 9063}#)
                            (map (lambda (#{e 10298}#)
                                   (#{chi 4366}#
                                     #{e 10298}#
                                     #{r 9060}#
                                     #{w 9061}#
                                     #{mod 9063}#))
                                 (append
                                   #{tail 9945}#
                                   (list #{val 9946}#))))))))
                  #{tmp 9940}#)
                (syntax-violation
                  'set!
                  "bad set!"
                  (#{wrap 4359}#
                    (begin
                      (if (if (pair? #{e 9059}#) #{s 9062}# #f)
                        (set-source-properties! #{e 9059}# #{s 9062}#))
                      #{e 9059}#)
                    #{w 9061}#
                    #{mod 9063}#))))))))
    (module-define!
      (current-module)
      '@
      (make-syntax-transformer
        '@
        'module-ref
        (lambda (#{e 10412}# #{r 10413}# #{w 10414}#)
          (let ((#{tmp 10416}#
                  ($sc-dispatch #{e 10412}# '(_ each-any any))))
            (if (if #{tmp 10416}#
                  (@apply
                    (lambda (#{mod 10419}# #{id 10420}#)
                      (if (and-map #{id? 4334}# #{mod 10419}#)
                        (if (symbol? #{id 10420}#)
                          #t
                          (if (if (vector? #{id 10420}#)
                                (if (= (vector-length #{id 10420}#) 4)
                                  (eq? (vector-ref #{id 10420}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{id 10420}# 1))
                            #f))
                        #f))
                    #{tmp 10416}#)
                  #f)
              (@apply
                (lambda (#{mod 10460}# #{id 10461}#)
                  (values
                    (syntax->datum #{id 10461}#)
                    #{r 10413}#
                    #{w 10414}#
                    #f
                    (syntax->datum
                      (cons '#(syntax-object
                               public
                               ((top)
                                #(ribcage
                                  #(mod id)
                                  #((top) (top))
                                  #("i3623" "i3624"))
                                #(ribcage () () ())
                                #(ribcage
                                  #(e r w)
                                  #((top) (top) (top))
                                  #("i3611" "i3612" "i3613"))
                                #(ribcage
                                  (lambda-var-list
                                    gen-var
                                    strip
                                    chi-lambda-case
                                    lambda*-formals
                                    chi-simple-lambda
                                    lambda-formals
                                    ellipsis?
                                    chi-void
                                    eval-local-transformer
                                    chi-local-syntax
                                    chi-body
                                    chi-macro
                                    chi-application
                                    chi-expr
                                    chi
                                    syntax-type
                                    chi-when-list
                                    chi-install-global
                                    chi-top-sequence
                                    chi-sequence
                                    source-wrap
                                    wrap
                                    bound-id-member?
                                    distinct-bound-ids?
                                    valid-bound-ids?
                                    bound-id=?
                                    free-id=?
                                    id-var-name
                                    same-marks?
                                    join-marks
                                    join-wraps
                                    smart-append
                                    make-binding-wrap
                                    extend-ribcage!
                                    make-empty-ribcage
                                    new-mark
                                    anti-mark
                                    the-anti-mark
                                    top-marked?
                                    top-wrap
                                    empty-wrap
                                    set-ribcage-labels!
                                    set-ribcage-marks!
                                    set-ribcage-symnames!
                                    ribcage-labels
                                    ribcage-marks
                                    ribcage-symnames
                                    ribcage?
                                    make-ribcage
                                    gen-labels
                                    gen-label
                                    make-rename
                                    rename-marks
                                    rename-new
                                    rename-old
                                    subst-rename?
                                    wrap-subst
                                    wrap-marks
                                    make-wrap
                                    id-sym-name&marks
                                    id-sym-name
                                    id?
                                    nonsymbol-id?
                                    global-extend
                                    lookup
                                    macros-only-env
                                    extend-var-env
                                    extend-env
                                    null-env
                                    binding-value
                                    binding-type
                                    make-binding
                                    arg-check
                                    source-annotation
                                    no-source
                                    set-syntax-object-module!
                                    set-syntax-object-wrap!
                                    set-syntax-object-expression!
                                    syntax-object-module
                                    syntax-object-wrap
                                    syntax-object-expression
                                    syntax-object?
                                    make-syntax-object
                                    build-lexical-var
                                    build-letrec
                                    build-named-let
                                    build-let
                                    build-sequence
                                    build-data
                                    build-primref
                                    build-lambda-case
                                    build-case-lambda
                                    build-simple-lambda
                                    build-global-definition
                                    build-global-assignment
                                    build-global-reference
                                    analyze-variable
                                    build-lexical-assignment
                                    build-lexical-reference
                                    build-dynlet
                                    build-conditional
                                    build-application
                                    build-void
                                    maybe-name-value!
                                    decorate-source
                                    get-global-definition-hook
                                    put-global-definition-hook
                                    gensym-hook
                                    local-eval-hook
                                    top-level-eval-hook
                                    fx<
                                    fx=
                                    fx-
                                    fx+
                                    set-lambda-meta!
                                    lambda-meta
                                    lambda?
                                    make-dynlet
                                    make-letrec
                                    make-let
                                    make-lambda-case
                                    make-lambda
                                    make-sequence
                                    make-application
                                    make-conditional
                                    make-toplevel-define
                                    make-toplevel-set
                                    make-toplevel-ref
                                    make-module-set
                                    make-module-ref
                                    make-lexical-set
                                    make-lexical-ref
                                    make-primitive-ref
                                    make-const
                                    make-void)
                                  ((top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top)
                                   (top))
                                  ("i467"
                                   "i465"
                                   "i463"
                                   "i461"
                                   "i459"
                                   "i457"
                                   "i455"
                                   "i453"
                                   "i451"
                                   "i449"
                                   "i447"
                                   "i445"
                                   "i443"
                                   "i441"
                                   "i439"
                                   "i437"
                                   "i435"
                                   "i433"
                                   "i431"
                                   "i429"
                                   "i427"
                                   "i425"
                                   "i423"
                                   "i421"
                                   "i419"
                                   "i417"
                                   "i415"
                                   "i413"
                                   "i411"
                                   "i409"
                                   "i407"
                                   "i405"
                                   "i403"
                                   "i401"
                                   "i399"
                                   "i398"
                                   "i396"
                                   "i393"
                                   "i392"
                                   "i391"
                                   "i389"
                                   "i388"
                                   "i386"
                                   "i384"
                                   "i382"
                                   "i380"
                                   "i378"
                                   "i376"
                                   "i374"
                                   "i372"
                                   "i369"
                                   "i367"
                                   "i366"
                                   "i364"
                                   "i362"
                                   "i360"
                                   "i358"
                                   "i357"
                                   "i356"
                                   "i355"
                                   "i353"
                                   "i352"
                                   "i349"
                                   "i347"
                                   "i345"
                                   "i343"
                                   "i341"
                                   "i339"
                                   "i337"
                                   "i336"
                                   "i335"
                                   "i333"
                                   "i331"
                                   "i330"
                                   "i327"
                                   "i326"
                                   "i324"
                                   "i322"
                                   "i320"
                                   "i318"
                                   "i316"
                                   "i314"
                                   "i312"
                                   "i310"
                                   "i308"
                                   "i305"
                                   "i303"
                                   "i301"
                                   "i299"
                                   "i297"
                                   "i295"
                                   "i293"
                                   "i291"
                                   "i289"
                                   "i287"
                                   "i285"
                                   "i283"
                                   "i281"
                                   "i279"
                                   "i277"
                                   "i275"
                                   "i273"
                                   "i271"
                                   "i269"
                                   "i267"
                                   "i265"
                                   "i263"
                                   "i261"
                                   "i260"
                                   "i257"
                                   "i255"
                                   "i254"
                                   "i253"
                                   "i252"
                                   "i251"
                                   "i249"
                                   "i247"
                                   "i245"
                                   "i242"
                                   "i240"
                                   "i238"
                                   "i236"
                                   "i234"
                                   "i232"
                                   "i230"
                                   "i228"
                                   "i226"
                                   "i224"
                                   "i222"
                                   "i220"
                                   "i218"
                                   "i216"
                                   "i214"
                                   "i212"
                                   "i210"
                                   "i208"))
                                #(ribcage
                                  (define-structure
                                    define-expansion-accessors
                                    define-expansion-constructors)
                                  ((top) (top) (top))
                                  ("i46" "i45" "i44")))
                               (hygiene guile))
                            #{mod 10460}#))))
                #{tmp 10416}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10412}#))))))
    (#{global-extend 4332}#
      'module-ref
      '@@
      (lambda (#{e 10558}# #{r 10559}# #{w 10560}#)
        (letrec*
          ((#{remodulate 10561}#
             (lambda (#{x 10767}# #{mod 10768}#)
               (if (pair? #{x 10767}#)
                 (cons (#{remodulate 10561}#
                         (car #{x 10767}#)
                         #{mod 10768}#)
                       (#{remodulate 10561}#
                         (cdr #{x 10767}#)
                         #{mod 10768}#))
                 (if (if (vector? #{x 10767}#)
                       (if (= (vector-length #{x 10767}#) 4)
                         (eq? (vector-ref #{x 10767}# 0) 'syntax-object)
                         #f)
                       #f)
                   (let ((#{expression 10782}#
                           (#{remodulate 10561}#
                             (vector-ref #{x 10767}# 1)
                             #{mod 10768}#))
                         (#{wrap 10783}# (vector-ref #{x 10767}# 2)))
                     (vector
                       'syntax-object
                       #{expression 10782}#
                       #{wrap 10783}#
                       #{mod 10768}#))
                   (if (vector? #{x 10767}#)
                     (let ((#{n 10791}# (vector-length #{x 10767}#)))
                       (let ((#{v 10792}# (make-vector #{n 10791}#)))
                         (letrec*
                           ((#{loop 10793}#
                              (lambda (#{i 10840}#)
                                (if (= #{i 10840}# #{n 10791}#)
                                  #{v 10792}#
                                  (begin
                                    (vector-set!
                                      #{v 10792}#
                                      #{i 10840}#
                                      (#{remodulate 10561}#
                                        (vector-ref #{x 10767}# #{i 10840}#)
                                        #{mod 10768}#))
                                    (#{loop 10793}# (#{1+}# #{i 10840}#)))))))
                           (#{loop 10793}# 0))))
                     #{x 10767}#))))))
          (let ((#{tmp 10563}#
                  ($sc-dispatch #{e 10558}# '(_ each-any any))))
            (if (if #{tmp 10563}#
                  (@apply
                    (lambda (#{mod 10567}# #{exp 10568}#)
                      (and-map #{id? 4334}# #{mod 10567}#))
                    #{tmp 10563}#)
                  #f)
              (@apply
                (lambda (#{mod 10584}# #{exp 10585}#)
                  (let ((#{mod 10586}#
                          (syntax->datum
                            (cons '#(syntax-object
                                     private
                                     ((top)
                                      #(ribcage
                                        #(mod exp)
                                        #((top) (top))
                                        #("i3667" "i3668"))
                                      #(ribcage (remodulate) ((top)) ("i3634"))
                                      #(ribcage
                                        #(e r w)
                                        #((top) (top) (top))
                                        #("i3631" "i3632" "i3633"))
                                      #(ribcage
                                        (lambda-var-list
                                          gen-var
                                          strip
                                          chi-lambda-case
                                          lambda*-formals
                                          chi-simple-lambda
                                          lambda-formals
                                          ellipsis?
                                          chi-void
                                          eval-local-transformer
                                          chi-local-syntax
                                          chi-body
                                          chi-macro
                                          chi-application
                                          chi-expr
                                          chi
                                          syntax-type
                                          chi-when-list
                                          chi-install-global
                                          chi-top-sequence
                                          chi-sequence
                                          source-wrap
                                          wrap
                                          bound-id-member?
                                          distinct-bound-ids?
                                          valid-bound-ids?
                                          bound-id=?
                                          free-id=?
                                          id-var-name
                                          same-marks?
                                          join-marks
                                          join-wraps
                                          smart-append
                                          make-binding-wrap
                                          extend-ribcage!
                                          make-empty-ribcage
                                          new-mark
                                          anti-mark
                                          the-anti-mark
                                          top-marked?
                                          top-wrap
                                          empty-wrap
                                          set-ribcage-labels!
                                          set-ribcage-marks!
                                          set-ribcage-symnames!
                                          ribcage-labels
                                          ribcage-marks
                                          ribcage-symnames
                                          ribcage?
                                          make-ribcage
                                          gen-labels
                                          gen-label
                                          make-rename
                                          rename-marks
                                          rename-new
                                          rename-old
                                          subst-rename?
                                          wrap-subst
                                          wrap-marks
                                          make-wrap
                                          id-sym-name&marks
                                          id-sym-name
                                          id?
                                          nonsymbol-id?
                                          global-extend
                                          lookup
                                          macros-only-env
                                          extend-var-env
                                          extend-env
                                          null-env
                                          binding-value
                                          binding-type
                                          make-binding
                                          arg-check
                                          source-annotation
                                          no-source
                                          set-syntax-object-module!
                                          set-syntax-object-wrap!
                                          set-syntax-object-expression!
                                          syntax-object-module
                                          syntax-object-wrap
                                          syntax-object-expression
                                          syntax-object?
                                          make-syntax-object
                                          build-lexical-var
                                          build-letrec
                                          build-named-let
                                          build-let
                                          build-sequence
                                          build-data
                                          build-primref
                                          build-lambda-case
                                          build-case-lambda
                                          build-simple-lambda
                                          build-global-definition
                                          build-global-assignment
                                          build-global-reference
                                          analyze-variable
                                          build-lexical-assignment
                                          build-lexical-reference
                                          build-dynlet
                                          build-conditional
                                          build-application
                                          build-void
                                          maybe-name-value!
                                          decorate-source
                                          get-global-definition-hook
                                          put-global-definition-hook
                                          gensym-hook
                                          local-eval-hook
                                          top-level-eval-hook
                                          fx<
                                          fx=
                                          fx-
                                          fx+
                                          set-lambda-meta!
                                          lambda-meta
                                          lambda?
                                          make-dynlet
                                          make-letrec
                                          make-let
                                          make-lambda-case
                                          make-lambda
                                          make-sequence
                                          make-application
                                          make-conditional
                                          make-toplevel-define
                                          make-toplevel-set
                                          make-toplevel-ref
                                          make-module-set
                                          make-module-ref
                                          make-lexical-set
                                          make-lexical-ref
                                          make-primitive-ref
                                          make-const
                                          make-void)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i467"
                                         "i465"
                                         "i463"
                                         "i461"
                                         "i459"
                                         "i457"
                                         "i455"
                                         "i453"
                                         "i451"
                                         "i449"
                                         "i447"
                                         "i445"
                                         "i443"
                                         "i441"
                                         "i439"
                                         "i437"
                                         "i435"
                                         "i433"
                                         "i431"
                                         "i429"
                                         "i427"
                                         "i425"
                                         "i423"
                                         "i421"
                                         "i419"
                                         "i417"
                                         "i415"
                                         "i413"
                                         "i411"
                                         "i409"
                                         "i407"
                                         "i405"
                                         "i403"
                                         "i401"
                                         "i399"
                                         "i398"
                                         "i396"
                                         "i393"
                                         "i392"
                                         "i391"
                                         "i389"
                                         "i388"
                                         "i386"
                                         "i384"
                                         "i382"
                                         "i380"
                                         "i378"
                                         "i376"
                                         "i374"
                                         "i372"
                                         "i369"
                                         "i367"
                                         "i366"
                                         "i364"
                                         "i362"
                                         "i360"
                                         "i358"
                                         "i357"
                                         "i356"
                                         "i355"
                                         "i353"
                                         "i352"
                                         "i349"
                                         "i347"
                                         "i345"
                                         "i343"
                                         "i341"
                                         "i339"
                                         "i337"
                                         "i336"
                                         "i335"
                                         "i333"
                                         "i331"
                                         "i330"
                                         "i327"
                                         "i326"
                                         "i324"
                                         "i322"
                                         "i320"
                                         "i318"
                                         "i316"
                                         "i314"
                                         "i312"
                                         "i310"
                                         "i308"
                                         "i305"
                                         "i303"
                                         "i301"
                                         "i299"
                                         "i297"
                                         "i295"
                                         "i293"
                                         "i291"
                                         "i289"
                                         "i287"
                                         "i285"
                                         "i283"
                                         "i281"
                                         "i279"
                                         "i277"
                                         "i275"
                                         "i273"
                                         "i271"
                                         "i269"
                                         "i267"
                                         "i265"
                                         "i263"
                                         "i261"
                                         "i260"
                                         "i257"
                                         "i255"
                                         "i254"
                                         "i253"
                                         "i252"
                                         "i251"
                                         "i249"
                                         "i247"
                                         "i245"
                                         "i242"
                                         "i240"
                                         "i238"
                                         "i236"
                                         "i234"
                                         "i232"
                                         "i230"
                                         "i228"
                                         "i226"
                                         "i224"
                                         "i222"
                                         "i220"
                                         "i218"
                                         "i216"
                                         "i214"
                                         "i212"
                                         "i210"
                                         "i208"))
                                      #(ribcage
                                        (define-structure
                                          define-expansion-accessors
                                          define-expansion-constructors)
                                        ((top) (top) (top))
                                        ("i46" "i45" "i44")))
                                     (hygiene guile))
                                  #{mod 10584}#))))
                    (values
                      (#{remodulate 10561}#
                        #{exp 10585}#
                        #{mod 10586}#)
                      #{r 10559}#
                      #{w 10560}#
                      (#{source-annotation 4327}# #{exp 10585}#)
                      #{mod 10586}#)))
                #{tmp 10563}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{e 10558}#))))))
    (#{global-extend 4332}#
      'core
      'if
      (lambda (#{e 10946}#
               #{r 10947}#
               #{w 10948}#
               #{s 10949}#
               #{mod 10950}#)
        (let ((#{tmp 10952}#
                ($sc-dispatch #{e 10946}# '(_ any any))))
          (if #{tmp 10952}#
            (@apply
              (lambda (#{test 10956}# #{then 10957}#)
                (#{build-conditional 4302}#
                  #{s 10949}#
                  (#{chi 4366}#
                    #{test 10956}#
                    #{r 10947}#
                    #{w 10948}#
                    #{mod 10950}#)
                  (#{chi 4366}#
                    #{then 10957}#
                    #{r 10947}#
                    #{w 10948}#
                    #{mod 10950}#)
                  (make-struct/no-tail
                    (vector-ref %expanded-vtables 0)
                    #f)))
              #{tmp 10952}#)
            (let ((#{tmp 11197}#
                    ($sc-dispatch #{e 10946}# '(_ any any any))))
              (if #{tmp 11197}#
                (@apply
                  (lambda (#{test 11201}# #{then 11202}# #{else 11203}#)
                    (#{build-conditional 4302}#
                      #{s 10949}#
                      (#{chi 4366}#
                        #{test 11201}#
                        #{r 10947}#
                        #{w 10948}#
                        #{mod 10950}#)
                      (#{chi 4366}#
                        #{then 11202}#
                        #{r 10947}#
                        #{w 10948}#
                        #{mod 10950}#)
                      (#{chi 4366}#
                        #{else 11203}#
                        #{r 10947}#
                        #{w 10948}#
                        #{mod 10950}#)))
                  #{tmp 11197}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 10946}#)))))))
    (#{global-extend 4332}#
      'core
      'with-fluids
      (lambda (#{e 11627}#
               #{r 11628}#
               #{w 11629}#
               #{s 11630}#
               #{mod 11631}#)
        (let ((#{tmp 11633}#
                ($sc-dispatch
                  #{e 11627}#
                  '(_ #(each (any any)) any . each-any))))
          (if #{tmp 11633}#
            (@apply
              (lambda (#{fluid 11637}#
                       #{val 11638}#
                       #{b 11639}#
                       #{b* 11640}#)
                (#{build-dynlet 4303}#
                  #{s 11630}#
                  (map (lambda (#{x 11726}#)
                         (#{chi 4366}#
                           #{x 11726}#
                           #{r 11628}#
                           #{w 11629}#
                           #{mod 11631}#))
                       #{fluid 11637}#)
                  (map (lambda (#{x 11801}#)
                         (#{chi 4366}#
                           #{x 11801}#
                           #{r 11628}#
                           #{w 11629}#
                           #{mod 11631}#))
                       #{val 11638}#)
                  (#{chi-body 4370}#
                    (cons #{b 11639}# #{b* 11640}#)
                    (#{wrap 4359}#
                      (begin
                        (if (if (pair? #{e 11627}#) #{s 11630}# #f)
                          (set-source-properties! #{e 11627}# #{s 11630}#))
                        #{e 11627}#)
                      #{w 11629}#
                      #{mod 11631}#)
                    #{r 11628}#
                    #{w 11629}#
                    #{mod 11631}#)))
              #{tmp 11633}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{e 11627}#)))))
    (module-define!
      (current-module)
      'begin
      (make-syntax-transformer 'begin 'begin '()))
    (module-define!
      (current-module)
      'define
      (make-syntax-transformer 'define 'define '()))
    (module-define!
      (current-module)
      'define-syntax
      (make-syntax-transformer
        'define-syntax
        'define-syntax
        '()))
    (module-define!
      (current-module)
      'eval-when
      (make-syntax-transformer
        'eval-when
        'eval-when
        '()))
    (#{global-extend 4332}#
      'core
      'syntax-case
      (letrec*
        ((#{convert-pattern 12175}#
           (lambda (#{pattern 13798}# #{keys 13799}#)
             (letrec*
               ((#{cvt* 13800}#
                  (lambda (#{p* 14426}# #{n 14427}# #{ids 14428}#)
                    (if (not (pair? #{p* 14426}#))
                      (#{cvt 13802}#
                        #{p* 14426}#
                        #{n 14427}#
                        #{ids 14428}#)
                      (call-with-values
                        (lambda ()
                          (#{cvt* 13800}#
                            (cdr #{p* 14426}#)
                            #{n 14427}#
                            #{ids 14428}#))
                        (lambda (#{y 14431}# #{ids 14432}#)
                          (call-with-values
                            (lambda ()
                              (#{cvt 13802}#
                                (car #{p* 14426}#)
                                #{n 14427}#
                                #{ids 14432}#))
                            (lambda (#{x 14435}# #{ids 14436}#)
                              (values
                                (cons #{x 14435}# #{y 14431}#)
                                #{ids 14436}#))))))))
                (#{v-reverse 13801}#
                  (lambda (#{x 14437}#)
                    (letrec*
                      ((#{loop 14438}#
                         (lambda (#{r 14515}# #{x 14516}#)
                           (if (not (pair? #{x 14516}#))
                             (values #{r 14515}# #{x 14516}#)
                             (#{loop 14438}#
                               (cons (car #{x 14516}#) #{r 14515}#)
                               (cdr #{x 14516}#))))))
                      (#{loop 14438}# '() #{x 14437}#))))
                (#{cvt 13802}#
                  (lambda (#{p 13805}# #{n 13806}# #{ids 13807}#)
                    (if (if (symbol? #{p 13805}#)
                          #t
                          (if (if (vector? #{p 13805}#)
                                (if (= (vector-length #{p 13805}#) 4)
                                  (eq? (vector-ref #{p 13805}# 0)
                                       'syntax-object)
                                  #f)
                                #f)
                            (symbol? (vector-ref #{p 13805}# 1))
                            #f))
                      (if (#{bound-id-member? 4358}#
                            #{p 13805}#
                            #{keys 13799}#)
                        (values
                          (vector 'free-id #{p 13805}#)
                          #{ids 13807}#)
                        (if (if (eq? (if (if (vector? #{p 13805}#)
                                           (if (= (vector-length #{p 13805}#)
                                                  4)
                                             (eq? (vector-ref #{p 13805}# 0)
                                                  'syntax-object)
                                             #f)
                                           #f)
                                       (vector-ref #{p 13805}# 1)
                                       #{p 13805}#)
                                     (if (if (= (vector-length
                                                  '#(syntax-object
                                                     _
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(p n ids)
                                                        #((top) (top) (top))
                                                        #("i3768"
                                                          "i3769"
                                                          "i3770"))
                                                      #(ribcage
                                                        (cvt v-reverse cvt*)
                                                        ((top) (top) (top))
                                                        ("i3741"
                                                         "i3739"
                                                         "i3737"))
                                                      #(ribcage
                                                        #(pattern keys)
                                                        #((top) (top))
                                                        #("i3735" "i3736"))
                                                      #(ribcage
                                                        (gen-syntax-case
                                                          gen-clause
                                                          build-dispatch-call
                                                          convert-pattern)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i3731"
                                                         "i3729"
                                                         "i3727"
                                                         "i3725"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile)))
                                                4)
                                           #t
                                           #f)
                                       '_
                                       '#(syntax-object
                                          _
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(p n ids)
                                             #((top) (top) (top))
                                             #("i3768" "i3769" "i3770"))
                                           #(ribcage
                                             (cvt v-reverse cvt*)
                                             ((top) (top) (top))
                                             ("i3741" "i3739" "i3737"))
                                           #(ribcage
                                             #(pattern keys)
                                             #((top) (top))
                                             #("i3735" "i3736"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3731" "i3729" "i3727" "i3725"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-application
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))))
                              (eq? (#{id-var-name 4353}# #{p 13805}# '(()))
                                   (#{id-var-name 4353}#
                                     '#(syntax-object
                                        _
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(p n ids)
                                           #((top) (top) (top))
                                           #("i3768" "i3769" "i3770"))
                                         #(ribcage
                                           (cvt v-reverse cvt*)
                                           ((top) (top) (top))
                                           ("i3741" "i3739" "i3737"))
                                         #(ribcage
                                           #(pattern keys)
                                           #((top) (top))
                                           #("i3735" "i3736"))
                                         #(ribcage
                                           (gen-syntax-case
                                             gen-clause
                                             build-dispatch-call
                                             convert-pattern)
                                           ((top) (top) (top) (top))
                                           ("i3731" "i3729" "i3727" "i3725"))
                                         #(ribcage
                                           (lambda-var-list
                                             gen-var
                                             strip
                                             chi-lambda-case
                                             lambda*-formals
                                             chi-simple-lambda
                                             lambda-formals
                                             ellipsis?
                                             chi-void
                                             eval-local-transformer
                                             chi-local-syntax
                                             chi-body
                                             chi-macro
                                             chi-application
                                             chi-expr
                                             chi
                                             syntax-type
                                             chi-when-list
                                             chi-install-global
                                             chi-top-sequence
                                             chi-sequence
                                             source-wrap
                                             wrap
                                             bound-id-member?
                                             distinct-bound-ids?
                                             valid-bound-ids?
                                             bound-id=?
                                             free-id=?
                                             id-var-name
                                             same-marks?
                                             join-marks
                                             join-wraps
                                             smart-append
                                             make-binding-wrap
                                             extend-ribcage!
                                             make-empty-ribcage
                                             new-mark
                                             anti-mark
                                             the-anti-mark
                                             top-marked?
                                             top-wrap
                                             empty-wrap
                                             set-ribcage-labels!
                                             set-ribcage-marks!
                                             set-ribcage-symnames!
                                             ribcage-labels
                                             ribcage-marks
                                             ribcage-symnames
                                             ribcage?
                                             make-ribcage
                                             gen-labels
                                             gen-label
                                             make-rename
                                             rename-marks
                                             rename-new
                                             rename-old
                                             subst-rename?
                                             wrap-subst
                                             wrap-marks
                                             make-wrap
                                             id-sym-name&marks
                                             id-sym-name
                                             id?
                                             nonsymbol-id?
                                             global-extend
                                             lookup
                                             macros-only-env
                                             extend-var-env
                                             extend-env
                                             null-env
                                             binding-value
                                             binding-type
                                             make-binding
                                             arg-check
                                             source-annotation
                                             no-source
                                             set-syntax-object-module!
                                             set-syntax-object-wrap!
                                             set-syntax-object-expression!
                                             syntax-object-module
                                             syntax-object-wrap
                                             syntax-object-expression
                                             syntax-object?
                                             make-syntax-object
                                             build-lexical-var
                                             build-letrec
                                             build-named-let
                                             build-let
                                             build-sequence
                                             build-data
                                             build-primref
                                             build-lambda-case
                                             build-case-lambda
                                             build-simple-lambda
                                             build-global-definition
                                             build-global-assignment
                                             build-global-reference
                                             analyze-variable
                                             build-lexical-assignment
                                             build-lexical-reference
                                             build-dynlet
                                             build-conditional
                                             build-application
                                             build-void
                                             maybe-name-value!
                                             decorate-source
                                             get-global-definition-hook
                                             put-global-definition-hook
                                             gensym-hook
                                             local-eval-hook
                                             top-level-eval-hook
                                             fx<
                                             fx=
                                             fx-
                                             fx+
                                             set-lambda-meta!
                                             lambda-meta
                                             lambda?
                                             make-dynlet
                                             make-letrec
                                             make-let
                                             make-lambda-case
                                             make-lambda
                                             make-sequence
                                             make-application
                                             make-conditional
                                             make-toplevel-define
                                             make-toplevel-set
                                             make-toplevel-ref
                                             make-module-set
                                             make-module-ref
                                             make-lexical-set
                                             make-lexical-ref
                                             make-primitive-ref
                                             make-const
                                             make-void)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i467"
                                            "i465"
                                            "i463"
                                            "i461"
                                            "i459"
                                            "i457"
                                            "i455"
                                            "i453"
                                            "i451"
                                            "i449"
                                            "i447"
                                            "i445"
                                            "i443"
                                            "i441"
                                            "i439"
                                            "i437"
                                            "i435"
                                            "i433"
                                            "i431"
                                            "i429"
                                            "i427"
                                            "i425"
                                            "i423"
                                            "i421"
                                            "i419"
                                            "i417"
                                            "i415"
                                            "i413"
                                            "i411"
                                            "i409"
                                            "i407"
                                            "i405"
                                            "i403"
                                            "i401"
                                            "i399"
                                            "i398"
                                            "i396"
                                            "i393"
                                            "i392"
                                            "i391"
                                            "i389"
                                            "i388"
                                            "i386"
                                            "i384"
                                            "i382"
                                            "i380"
                                            "i378"
                                            "i376"
                                            "i374"
                                            "i372"
                                            "i369"
                                            "i367"
                                            "i366"
                                            "i364"
                                            "i362"
                                            "i360"
                                            "i358"
                                            "i357"
                                            "i356"
                                            "i355"
                                            "i353"
                                            "i352"
                                            "i349"
                                            "i347"
                                            "i345"
                                            "i343"
                                            "i341"
                                            "i339"
                                            "i337"
                                            "i336"
                                            "i335"
                                            "i333"
                                            "i331"
                                            "i330"
                                            "i327"
                                            "i326"
                                            "i324"
                                            "i322"
                                            "i320"
                                            "i318"
                                            "i316"
                                            "i314"
                                            "i312"
                                            "i310"
                                            "i308"
                                            "i305"
                                            "i303"
                                            "i301"
                                            "i299"
                                            "i297"
                                            "i295"
                                            "i293"
                                            "i291"
                                            "i289"
                                            "i287"
                                            "i285"
                                            "i283"
                                            "i281"
                                            "i279"
                                            "i277"
                                            "i275"
                                            "i273"
                                            "i271"
                                            "i269"
                                            "i267"
                                            "i265"
                                            "i263"
                                            "i261"
                                            "i260"
                                            "i257"
                                            "i255"
                                            "i254"
                                            "i253"
                                            "i252"
                                            "i251"
                                            "i249"
                                            "i247"
                                            "i245"
                                            "i242"
                                            "i240"
                                            "i238"
                                            "i236"
                                            "i234"
                                            "i232"
                                            "i230"
                                            "i228"
                                            "i226"
                                            "i224"
                                            "i222"
                                            "i220"
                                            "i218"
                                            "i216"
                                            "i214"
                                            "i212"
                                            "i210"
                                            "i208"))
                                         #(ribcage
                                           (define-structure
                                             define-expansion-accessors
                                             define-expansion-constructors)
                                           ((top) (top) (top))
                                           ("i46" "i45" "i44")))
                                        (hygiene guile))
                                     '(())))
                              #f)
                          (values '_ #{ids 13807}#)
                          (values
                            'any
                            (cons (cons #{p 13805}# #{n 13806}#)
                                  #{ids 13807}#))))
                      (let ((#{tmp 14129}#
                              ($sc-dispatch #{p 13805}# '(any any))))
                        (if (if #{tmp 14129}#
                              (@apply
                                (lambda (#{x 14133}# #{dots 14134}#)
                                  (if (if (if (vector? #{dots 14134}#)
                                            (if (= (vector-length
                                                     #{dots 14134}#)
                                                   4)
                                              (eq? (vector-ref
                                                     #{dots 14134}#
                                                     0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (symbol? (vector-ref #{dots 14134}# 1))
                                        #f)
                                    (if (eq? (if (if (vector? #{dots 14134}#)
                                                   (if (= (vector-length
                                                            #{dots 14134}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{dots 14134}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{dots 14134}# 1)
                                               #{dots 14134}#)
                                             (if (if (= (vector-length
                                                          '#(syntax-object
                                                             ...
                                                             ((top)
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                ()
                                                                ()
                                                                ())
                                                              #(ribcage
                                                                #(x)
                                                                #((top))
                                                                #("i2251"))
                                                              #(ribcage
                                                                (lambda-var-list
                                                                  gen-var
                                                                  strip
                                                                  chi-lambda-case
                                                                  lambda*-formals
                                                                  chi-simple-lambda
                                                                  lambda-formals
                                                                  ellipsis?
                                                                  chi-void
                                                                  eval-local-transformer
                                                                  chi-local-syntax
                                                                  chi-body
                                                                  chi-macro
                                                                  chi-application
                                                                  chi-expr
                                                                  chi
                                                                  syntax-type
                                                                  chi-when-list
                                                                  chi-install-global
                                                                  chi-top-sequence
                                                                  chi-sequence
                                                                  source-wrap
                                                                  wrap
                                                                  bound-id-member?
                                                                  distinct-bound-ids?
                                                                  valid-bound-ids?
                                                                  bound-id=?
                                                                  free-id=?
                                                                  id-var-name
                                                                  same-marks?
                                                                  join-marks
                                                                  join-wraps
                                                                  smart-append
                                                                  make-binding-wrap
                                                                  extend-ribcage!
                                                                  make-empty-ribcage
                                                                  new-mark
                                                                  anti-mark
                                                                  the-anti-mark
                                                                  top-marked?
                                                                  top-wrap
                                                                  empty-wrap
                                                                  set-ribcage-labels!
                                                                  set-ribcage-marks!
                                                                  set-ribcage-symnames!
                                                                  ribcage-labels
                                                                  ribcage-marks
                                                                  ribcage-symnames
                                                                  ribcage?
                                                                  make-ribcage
                                                                  gen-labels
                                                                  gen-label
                                                                  make-rename
                                                                  rename-marks
                                                                  rename-new
                                                                  rename-old
                                                                  subst-rename?
                                                                  wrap-subst
                                                                  wrap-marks
                                                                  make-wrap
                                                                  id-sym-name&marks
                                                                  id-sym-name
                                                                  id?
                                                                  nonsymbol-id?
                                                                  global-extend
                                                                  lookup
                                                                  macros-only-env
                                                                  extend-var-env
                                                                  extend-env
                                                                  null-env
                                                                  binding-value
                                                                  binding-type
                                                                  make-binding
                                                                  arg-check
                                                                  source-annotation
                                                                  no-source
                                                                  set-syntax-object-module!
                                                                  set-syntax-object-wrap!
                                                                  set-syntax-object-expression!
                                                                  syntax-object-module
                                                                  syntax-object-wrap
                                                                  syntax-object-expression
                                                                  syntax-object?
                                                                  make-syntax-object
                                                                  build-lexical-var
                                                                  build-letrec
                                                                  build-named-let
                                                                  build-let
                                                                  build-sequence
                                                                  build-data
                                                                  build-primref
                                                                  build-lambda-case
                                                                  build-case-lambda
                                                                  build-simple-lambda
                                                                  build-global-definition
                                                                  build-global-assignment
                                                                  build-global-reference
                                                                  analyze-variable
                                                                  build-lexical-assignment
                                                                  build-lexical-reference
                                                                  build-dynlet
                                                                  build-conditional
                                                                  build-application
                                                                  build-void
                                                                  maybe-name-value!
                                                                  decorate-source
                                                                  get-global-definition-hook
                                                                  put-global-definition-hook
                                                                  gensym-hook
                                                                  local-eval-hook
                                                                  top-level-eval-hook
                                                                  fx<
                                                                  fx=
                                                                  fx-
                                                                  fx+
                                                                  set-lambda-meta!
                                                                  lambda-meta
                                                                  lambda?
                                                                  make-dynlet
                                                                  make-letrec
                                                                  make-let
                                                                  make-lambda-case
                                                                  make-lambda
                                                                  make-sequence
                                                                  make-application
                                                                  make-conditional
                                                                  make-toplevel-define
                                                                  make-toplevel-set
                                                                  make-toplevel-ref
                                                                  make-module-set
                                                                  make-module-ref
                                                                  make-lexical-set
                                                                  make-lexical-ref
                                                                  make-primitive-ref
                                                                  make-const
                                                                  make-void)
                                                                ((top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                                ("i467"
                                                                 "i465"
                                                                 "i463"
                                                                 "i461"
                                                                 "i459"
                                                                 "i457"
                                                                 "i455"
                                                                 "i453"
                                                                 "i451"
                                                                 "i449"
                                                                 "i447"
                                                                 "i445"
                                                                 "i443"
                                                                 "i441"
                                                                 "i439"
                                                                 "i437"
                                                                 "i435"
                                                                 "i433"
                                                                 "i431"
                                                                 "i429"
                                                                 "i427"
                                                                 "i425"
                                                                 "i423"
                                                                 "i421"
                                                                 "i419"
                                                                 "i417"
                                                                 "i415"
                                                                 "i413"
                                                                 "i411"
                                                                 "i409"
                                                                 "i407"
                                                                 "i405"
                                                                 "i403"
                                                                 "i401"
                                                                 "i399"
                                                                 "i398"
                                                                 "i396"
                                                                 "i393"
                                                                 "i392"
                                                                 "i391"
                                                                 "i389"
                                                                 "i388"
                                                                 "i386"
                                                                 "i384"
                                                                 "i382"
                                                                 "i380"
                                                                 "i378"
                                                                 "i376"
                                                                 "i374"
                                                                 "i372"
                                                                 "i369"
                                                                 "i367"
                                                                 "i366"
                                                                 "i364"
                                                                 "i362"
                                                                 "i360"
                                                                 "i358"
                                                                 "i357"
                                                                 "i356"
                                                                 "i355"
                                                                 "i353"
                                                                 "i352"
                                                                 "i349"
                                                                 "i347"
                                                                 "i345"
                                                                 "i343"
                                                                 "i341"
                                                                 "i339"
                                                                 "i337"
                                                                 "i336"
                                                                 "i335"
                                                                 "i333"
                                                                 "i331"
                                                                 "i330"
                                                                 "i327"
                                                                 "i326"
                                                                 "i324"
                                                                 "i322"
                                                                 "i320"
                                                                 "i318"
                                                                 "i316"
                                                                 "i314"
                                                                 "i312"
                                                                 "i310"
                                                                 "i308"
                                                                 "i305"
                                                                 "i303"
                                                                 "i301"
                                                                 "i299"
                                                                 "i297"
                                                                 "i295"
                                                                 "i293"
                                                                 "i291"
                                                                 "i289"
                                                                 "i287"
                                                                 "i285"
                                                                 "i283"
                                                                 "i281"
                                                                 "i279"
                                                                 "i277"
                                                                 "i275"
                                                                 "i273"
                                                                 "i271"
                                                                 "i269"
                                                                 "i267"
                                                                 "i265"
                                                                 "i263"
                                                                 "i261"
                                                                 "i260"
                                                                 "i257"
                                                                 "i255"
                                                                 "i254"
                                                                 "i253"
                                                                 "i252"
                                                                 "i251"
                                                                 "i249"
                                                                 "i247"
                                                                 "i245"
                                                                 "i242"
                                                                 "i240"
                                                                 "i238"
                                                                 "i236"
                                                                 "i234"
                                                                 "i232"
                                                                 "i230"
                                                                 "i228"
                                                                 "i226"
                                                                 "i224"
                                                                 "i222"
                                                                 "i220"
                                                                 "i218"
                                                                 "i216"
                                                                 "i214"
                                                                 "i212"
                                                                 "i210"
                                                                 "i208"))
                                                              #(ribcage
                                                                (define-structure
                                                                  define-expansion-accessors
                                                                  define-expansion-constructors)
                                                                ((top)
                                                                 (top)
                                                                 (top))
                                                                ("i46"
                                                                 "i45"
                                                                 "i44")))
                                                             (hygiene guile)))
                                                        4)
                                                   #t
                                                   #f)
                                               '...
                                               '#(syntax-object
                                                  ...
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i2251"))
                                                   #(ribcage
                                                     (lambda-var-list
                                                       gen-var
                                                       strip
                                                       chi-lambda-case
                                                       lambda*-formals
                                                       chi-simple-lambda
                                                       lambda-formals
                                                       ellipsis?
                                                       chi-void
                                                       eval-local-transformer
                                                       chi-local-syntax
                                                       chi-body
                                                       chi-macro
                                                       chi-application
                                                       chi-expr
                                                       chi
                                                       syntax-type
                                                       chi-when-list
                                                       chi-install-global
                                                       chi-top-sequence
                                                       chi-sequence
                                                       source-wrap
                                                       wrap
                                                       bound-id-member?
                                                       distinct-bound-ids?
                                                       valid-bound-ids?
                                                       bound-id=?
                                                       free-id=?
                                                       id-var-name
                                                       same-marks?
                                                       join-marks
                                                       join-wraps
                                                       smart-append
                                                       make-binding-wrap
                                                       extend-ribcage!
                                                       make-empty-ribcage
                                                       new-mark
                                                       anti-mark
                                                       the-anti-mark
                                                       top-marked?
                                                       top-wrap
                                                       empty-wrap
                                                       set-ribcage-labels!
                                                       set-ribcage-marks!
                                                       set-ribcage-symnames!
                                                       ribcage-labels
                                                       ribcage-marks
                                                       ribcage-symnames
                                                       ribcage?
                                                       make-ribcage
                                                       gen-labels
                                                       gen-label
                                                       make-rename
                                                       rename-marks
                                                       rename-new
                                                       rename-old
                                                       subst-rename?
                                                       wrap-subst
                                                       wrap-marks
                                                       make-wrap
                                                       id-sym-name&marks
                                                       id-sym-name
                                                       id?
                                                       nonsymbol-id?
                                                       global-extend
                                                       lookup
                                                       macros-only-env
                                                       extend-var-env
                                                       extend-env
                                                       null-env
                                                       binding-value
                                                       binding-type
                                                       make-binding
                                                       arg-check
                                                       source-annotation
                                                       no-source
                                                       set-syntax-object-module!
                                                       set-syntax-object-wrap!
                                                       set-syntax-object-expression!
                                                       syntax-object-module
                                                       syntax-object-wrap
                                                       syntax-object-expression
                                                       syntax-object?
                                                       make-syntax-object
                                                       build-lexical-var
                                                       build-letrec
                                                       build-named-let
                                                       build-let
                                                       build-sequence
                                                       build-data
                                                       build-primref
                                                       build-lambda-case
                                                       build-case-lambda
                                                       build-simple-lambda
                                                       build-global-definition
                                                       build-global-assignment
                                                       build-global-reference
                                                       analyze-variable
                                                       build-lexical-assignment
                                                       build-lexical-reference
                                                       build-dynlet
                                                       build-conditional
                                                       build-application
                                                       build-void
                                                       maybe-name-value!
                                                       decorate-source
                                                       get-global-definition-hook
                                                       put-global-definition-hook
                                                       gensym-hook
                                                       local-eval-hook
                                                       top-level-eval-hook
                                                       fx<
                                                       fx=
                                                       fx-
                                                       fx+
                                                       set-lambda-meta!
                                                       lambda-meta
                                                       lambda?
                                                       make-dynlet
                                                       make-letrec
                                                       make-let
                                                       make-lambda-case
                                                       make-lambda
                                                       make-sequence
                                                       make-application
                                                       make-conditional
                                                       make-toplevel-define
                                                       make-toplevel-set
                                                       make-toplevel-ref
                                                       make-module-set
                                                       make-module-ref
                                                       make-lexical-set
                                                       make-lexical-ref
                                                       make-primitive-ref
                                                       make-const
                                                       make-void)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i467"
                                                      "i465"
                                                      "i463"
                                                      "i461"
                                                      "i459"
                                                      "i457"
                                                      "i455"
                                                      "i453"
                                                      "i451"
                                                      "i449"
                                                      "i447"
                                                      "i445"
                                                      "i443"
                                                      "i441"
                                                      "i439"
                                                      "i437"
                                                      "i435"
                                                      "i433"
                                                      "i431"
                                                      "i429"
                                                      "i427"
                                                      "i425"
                                                      "i423"
                                                      "i421"
                                                      "i419"
                                                      "i417"
                                                      "i415"
                                                      "i413"
                                                      "i411"
                                                      "i409"
                                                      "i407"
                                                      "i405"
                                                      "i403"
                                                      "i401"
                                                      "i399"
                                                      "i398"
                                                      "i396"
                                                      "i393"
                                                      "i392"
                                                      "i391"
                                                      "i389"
                                                      "i388"
                                                      "i386"
                                                      "i384"
                                                      "i382"
                                                      "i380"
                                                      "i378"
                                                      "i376"
                                                      "i374"
                                                      "i372"
                                                      "i369"
                                                      "i367"
                                                      "i366"
                                                      "i364"
                                                      "i362"
                                                      "i360"
                                                      "i358"
                                                      "i357"
                                                      "i356"
                                                      "i355"
                                                      "i353"
                                                      "i352"
                                                      "i349"
                                                      "i347"
                                                      "i345"
                                                      "i343"
                                                      "i341"
                                                      "i339"
                                                      "i337"
                                                      "i336"
                                                      "i335"
                                                      "i333"
                                                      "i331"
                                                      "i330"
                                                      "i327"
                                                      "i326"
                                                      "i324"
                                                      "i322"
                                                      "i320"
                                                      "i318"
                                                      "i316"
                                                      "i314"
                                                      "i312"
                                                      "i310"
                                                      "i308"
                                                      "i305"
                                                      "i303"
                                                      "i301"
                                                      "i299"
                                                      "i297"
                                                      "i295"
                                                      "i293"
                                                      "i291"
                                                      "i289"
                                                      "i287"
                                                      "i285"
                                                      "i283"
                                                      "i281"
                                                      "i279"
                                                      "i277"
                                                      "i275"
                                                      "i273"
                                                      "i271"
                                                      "i269"
                                                      "i267"
                                                      "i265"
                                                      "i263"
                                                      "i261"
                                                      "i260"
                                                      "i257"
                                                      "i255"
                                                      "i254"
                                                      "i253"
                                                      "i252"
                                                      "i251"
                                                      "i249"
                                                      "i247"
                                                      "i245"
                                                      "i242"
                                                      "i240"
                                                      "i238"
                                                      "i236"
                                                      "i234"
                                                      "i232"
                                                      "i230"
                                                      "i228"
                                                      "i226"
                                                      "i224"
                                                      "i222"
                                                      "i220"
                                                      "i218"
                                                      "i216"
                                                      "i214"
                                                      "i212"
                                                      "i210"
                                                      "i208"))
                                                   #(ribcage
                                                     (define-structure
                                                       define-expansion-accessors
                                                       define-expansion-constructors)
                                                     ((top) (top) (top))
                                                     ("i46" "i45" "i44")))
                                                  (hygiene guile))))
                                      (eq? (#{id-var-name 4353}#
                                             #{dots 14134}#
                                             '(()))
                                           (#{id-var-name 4353}#
                                             '#(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage () () ())
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i2251"))
                                                 #(ribcage
                                                   (lambda-var-list
                                                     gen-var
                                                     strip
                                                     chi-lambda-case
                                                     lambda*-formals
                                                     chi-simple-lambda
                                                     lambda-formals
                                                     ellipsis?
                                                     chi-void
                                                     eval-local-transformer
                                                     chi-local-syntax
                                                     chi-body
                                                     chi-macro
                                                     chi-application
                                                     chi-expr
                                                     chi
                                                     syntax-type
                                                     chi-when-list
                                                     chi-install-global
                                                     chi-top-sequence
                                                     chi-sequence
                                                     source-wrap
                                                     wrap
                                                     bound-id-member?
                                                     distinct-bound-ids?
                                                     valid-bound-ids?
                                                     bound-id=?
                                                     free-id=?
                                                     id-var-name
                                                     same-marks?
                                                     join-marks
                                                     join-wraps
                                                     smart-append
                                                     make-binding-wrap
                                                     extend-ribcage!
                                                     make-empty-ribcage
                                                     new-mark
                                                     anti-mark
                                                     the-anti-mark
                                                     top-marked?
                                                     top-wrap
                                                     empty-wrap
                                                     set-ribcage-labels!
                                                     set-ribcage-marks!
                                                     set-ribcage-symnames!
                                                     ribcage-labels
                                                     ribcage-marks
                                                     ribcage-symnames
                                                     ribcage?
                                                     make-ribcage
                                                     gen-labels
                                                     gen-label
                                                     make-rename
                                                     rename-marks
                                                     rename-new
                                                     rename-old
                                                     subst-rename?
                                                     wrap-subst
                                                     wrap-marks
                                                     make-wrap
                                                     id-sym-name&marks
                                                     id-sym-name
                                                     id?
                                                     nonsymbol-id?
                                                     global-extend
                                                     lookup
                                                     macros-only-env
                                                     extend-var-env
                                                     extend-env
                                                     null-env
                                                     binding-value
                                                     binding-type
                                                     make-binding
                                                     arg-check
                                                     source-annotation
                                                     no-source
                                                     set-syntax-object-module!
                                                     set-syntax-object-wrap!
                                                     set-syntax-object-expression!
                                                     syntax-object-module
                                                     syntax-object-wrap
                                                     syntax-object-expression
                                                     syntax-object?
                                                     make-syntax-object
                                                     build-lexical-var
                                                     build-letrec
                                                     build-named-let
                                                     build-let
                                                     build-sequence
                                                     build-data
                                                     build-primref
                                                     build-lambda-case
                                                     build-case-lambda
                                                     build-simple-lambda
                                                     build-global-definition
                                                     build-global-assignment
                                                     build-global-reference
                                                     analyze-variable
                                                     build-lexical-assignment
                                                     build-lexical-reference
                                                     build-dynlet
                                                     build-conditional
                                                     build-application
                                                     build-void
                                                     maybe-name-value!
                                                     decorate-source
                                                     get-global-definition-hook
                                                     put-global-definition-hook
                                                     gensym-hook
                                                     local-eval-hook
                                                     top-level-eval-hook
                                                     fx<
                                                     fx=
                                                     fx-
                                                     fx+
                                                     set-lambda-meta!
                                                     lambda-meta
                                                     lambda?
                                                     make-dynlet
                                                     make-letrec
                                                     make-let
                                                     make-lambda-case
                                                     make-lambda
                                                     make-sequence
                                                     make-application
                                                     make-conditional
                                                     make-toplevel-define
                                                     make-toplevel-set
                                                     make-toplevel-ref
                                                     make-module-set
                                                     make-module-ref
                                                     make-lexical-set
                                                     make-lexical-ref
                                                     make-primitive-ref
                                                     make-const
                                                     make-void)
                                                   ((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                   ("i467"
                                                    "i465"
                                                    "i463"
                                                    "i461"
                                                    "i459"
                                                    "i457"
                                                    "i455"
                                                    "i453"
                                                    "i451"
                                                    "i449"
                                                    "i447"
                                                    "i445"
                                                    "i443"
                                                    "i441"
                                                    "i439"
                                                    "i437"
                                                    "i435"
                                                    "i433"
                                                    "i431"
                                                    "i429"
                                                    "i427"
                                                    "i425"
                                                    "i423"
                                                    "i421"
                                                    "i419"
                                                    "i417"
                                                    "i415"
                                                    "i413"
                                                    "i411"
                                                    "i409"
                                                    "i407"
                                                    "i405"
                                                    "i403"
                                                    "i401"
                                                    "i399"
                                                    "i398"
                                                    "i396"
                                                    "i393"
                                                    "i392"
                                                    "i391"
                                                    "i389"
                                                    "i388"
                                                    "i386"
                                                    "i384"
                                                    "i382"
                                                    "i380"
                                                    "i378"
                                                    "i376"
                                                    "i374"
                                                    "i372"
                                                    "i369"
                                                    "i367"
                                                    "i366"
                                                    "i364"
                                                    "i362"
                                                    "i360"
                                                    "i358"
                                                    "i357"
                                                    "i356"
                                                    "i355"
                                                    "i353"
                                                    "i352"
                                                    "i349"
                                                    "i347"
                                                    "i345"
                                                    "i343"
                                                    "i341"
                                                    "i339"
                                                    "i337"
                                                    "i336"
                                                    "i335"
                                                    "i333"
                                                    "i331"
                                                    "i330"
                                                    "i327"
                                                    "i326"
                                                    "i324"
                                                    "i322"
                                                    "i320"
                                                    "i318"
                                                    "i316"
                                                    "i314"
                                                    "i312"
                                                    "i310"
                                                    "i308"
                                                    "i305"
                                                    "i303"
                                                    "i301"
                                                    "i299"
                                                    "i297"
                                                    "i295"
                                                    "i293"
                                                    "i291"
                                                    "i289"
                                                    "i287"
                                                    "i285"
                                                    "i283"
                                                    "i281"
                                                    "i279"
                                                    "i277"
                                                    "i275"
                                                    "i273"
                                                    "i271"
                                                    "i269"
                                                    "i267"
                                                    "i265"
                                                    "i263"
                                                    "i261"
                                                    "i260"
                                                    "i257"
                                                    "i255"
                                                    "i254"
                                                    "i253"
                                                    "i252"
                                                    "i251"
                                                    "i249"
                                                    "i247"
                                                    "i245"
                                                    "i242"
                                                    "i240"
                                                    "i238"
                                                    "i236"
                                                    "i234"
                                                    "i232"
                                                    "i230"
                                                    "i228"
                                                    "i226"
                                                    "i224"
                                                    "i222"
                                                    "i220"
                                                    "i218"
                                                    "i216"
                                                    "i214"
                                                    "i212"
                                                    "i210"
                                                    "i208"))
                                                 #(ribcage
                                                   (define-structure
                                                     define-expansion-accessors
                                                     define-expansion-constructors)
                                                   ((top) (top) (top))
                                                   ("i46" "i45" "i44")))
                                                (hygiene guile))
                                             '(())))
                                      #f)
                                    #f))
                                #{tmp 14129}#)
                              #f)
                          (@apply
                            (lambda (#{x 14234}# #{dots 14235}#)
                              (call-with-values
                                (lambda ()
                                  (#{cvt 13802}#
                                    #{x 14234}#
                                    (#{1+}# #{n 13806}#)
                                    #{ids 13807}#))
                                (lambda (#{p 14236}# #{ids 14237}#)
                                  (values
                                    (if (eq? #{p 14236}# 'any)
                                      'each-any
                                      (vector 'each #{p 14236}#))
                                    #{ids 14237}#))))
                            #{tmp 14129}#)
                          (let ((#{tmp 14238}#
                                  ($sc-dispatch #{p 13805}# '(any any . any))))
                            (if (if #{tmp 14238}#
                                  (@apply
                                    (lambda (#{x 14242}#
                                             #{dots 14243}#
                                             #{ys 14244}#)
                                      (if (if (if (vector? #{dots 14243}#)
                                                (if (= (vector-length
                                                         #{dots 14243}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{dots 14243}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (symbol?
                                              (vector-ref #{dots 14243}# 1))
                                            #f)
                                        (if (eq? (if (if (vector?
                                                           #{dots 14243}#)
                                                       (if (= (vector-length
                                                                #{dots 14243}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{dots 14243}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref
                                                     #{dots 14243}#
                                                     1)
                                                   #{dots 14243}#)
                                                 (if (if (= (vector-length
                                                              '#(syntax-object
                                                                 ...
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i2251"))
                                                                  #(ribcage
                                                                    (lambda-var-list
                                                                      gen-var
                                                                      strip
                                                                      chi-lambda-case
                                                                      lambda*-formals
                                                                      chi-simple-lambda
                                                                      lambda-formals
                                                                      ellipsis?
                                                                      chi-void
                                                                      eval-local-transformer
                                                                      chi-local-syntax
                                                                      chi-body
                                                                      chi-macro
                                                                      chi-application
                                                                      chi-expr
                                                                      chi
                                                                      syntax-type
                                                                      chi-when-list
                                                                      chi-install-global
                                                                      chi-top-sequence
                                                                      chi-sequence
                                                                      source-wrap
                                                                      wrap
                                                                      bound-id-member?
                                                                      distinct-bound-ids?
                                                                      valid-bound-ids?
                                                                      bound-id=?
                                                                      free-id=?
                                                                      id-var-name
                                                                      same-marks?
                                                                      join-marks
                                                                      join-wraps
                                                                      smart-append
                                                                      make-binding-wrap
                                                                      extend-ribcage!
                                                                      make-empty-ribcage
                                                                      new-mark
                                                                      anti-mark
                                                                      the-anti-mark
                                                                      top-marked?
                                                                      top-wrap
                                                                      empty-wrap
                                                                      set-ribcage-labels!
                                                                      set-ribcage-marks!
                                                                      set-ribcage-symnames!
                                                                      ribcage-labels
                                                                      ribcage-marks
                                                                      ribcage-symnames
                                                                      ribcage?
                                                                      make-ribcage
                                                                      gen-labels
                                                                      gen-label
                                                                      make-rename
                                                                      rename-marks
                                                                      rename-new
                                                                      rename-old
                                                                      subst-rename?
                                                                      wrap-subst
                                                                      wrap-marks
                                                                      make-wrap
                                                                      id-sym-name&marks
                                                                      id-sym-name
                                                                      id?
                                                                      nonsymbol-id?
                                                                      global-extend
                                                                      lookup
                                                                      macros-only-env
                                                                      extend-var-env
                                                                      extend-env
                                                                      null-env
                                                                      binding-value
                                                                      binding-type
                                                                      make-binding
                                                                      arg-check
                                                                      source-annotation
                                                                      no-source
                                                                      set-syntax-object-module!
                                                                      set-syntax-object-wrap!
                                                                      set-syntax-object-expression!
                                                                      syntax-object-module
                                                                      syntax-object-wrap
                                                                      syntax-object-expression
                                                                      syntax-object?
                                                                      make-syntax-object
                                                                      build-lexical-var
                                                                      build-letrec
                                                                      build-named-let
                                                                      build-let
                                                                      build-sequence
                                                                      build-data
                                                                      build-primref
                                                                      build-lambda-case
                                                                      build-case-lambda
                                                                      build-simple-lambda
                                                                      build-global-definition
                                                                      build-global-assignment
                                                                      build-global-reference
                                                                      analyze-variable
                                                                      build-lexical-assignment
                                                                      build-lexical-reference
                                                                      build-dynlet
                                                                      build-conditional
                                                                      build-application
                                                                      build-void
                                                                      maybe-name-value!
                                                                      decorate-source
                                                                      get-global-definition-hook
                                                                      put-global-definition-hook
                                                                      gensym-hook
                                                                      local-eval-hook
                                                                      top-level-eval-hook
                                                                      fx<
                                                                      fx=
                                                                      fx-
                                                                      fx+
                                                                      set-lambda-meta!
                                                                      lambda-meta
                                                                      lambda?
                                                                      make-dynlet
                                                                      make-letrec
                                                                      make-let
                                                                      make-lambda-case
                                                                      make-lambda
                                                                      make-sequence
                                                                      make-application
                                                                      make-conditional
                                                                      make-toplevel-define
                                                                      make-toplevel-set
                                                                      make-toplevel-ref
                                                                      make-module-set
                                                                      make-module-ref
                                                                      make-lexical-set
                                                                      make-lexical-ref
                                                                      make-primitive-ref
                                                                      make-const
                                                                      make-void)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i467"
                                                                     "i465"
                                                                     "i463"
                                                                     "i461"
                                                                     "i459"
                                                                     "i457"
                                                                     "i455"
                                                                     "i453"
                                                                     "i451"
                                                                     "i449"
                                                                     "i447"
                                                                     "i445"
                                                                     "i443"
                                                                     "i441"
                                                                     "i439"
                                                                     "i437"
                                                                     "i435"
                                                                     "i433"
                                                                     "i431"
                                                                     "i429"
                                                                     "i427"
                                                                     "i425"
                                                                     "i423"
                                                                     "i421"
                                                                     "i419"
                                                                     "i417"
                                                                     "i415"
                                                                     "i413"
                                                                     "i411"
                                                                     "i409"
                                                                     "i407"
                                                                     "i405"
                                                                     "i403"
                                                                     "i401"
                                                                     "i399"
                                                                     "i398"
                                                                     "i396"
                                                                     "i393"
                                                                     "i392"
                                                                     "i391"
                                                                     "i389"
                                                                     "i388"
                                                                     "i386"
                                                                     "i384"
                                                                     "i382"
                                                                     "i380"
                                                                     "i378"
                                                                     "i376"
                                                                     "i374"
                                                                     "i372"
                                                                     "i369"
                                                                     "i367"
                                                                     "i366"
                                                                     "i364"
                                                                     "i362"
                                                                     "i360"
                                                                     "i358"
                                                                     "i357"
                                                                     "i356"
                                                                     "i355"
                                                                     "i353"
                                                                     "i352"
                                                                     "i349"
                                                                     "i347"
                                                                     "i345"
                                                                     "i343"
                                                                     "i341"
                                                                     "i339"
                                                                     "i337"
                                                                     "i336"
                                                                     "i335"
                                                                     "i333"
                                                                     "i331"
                                                                     "i330"
                                                                     "i327"
                                                                     "i326"
                                                                     "i324"
                                                                     "i322"
                                                                     "i320"
                                                                     "i318"
                                                                     "i316"
                                                                     "i314"
                                                                     "i312"
                                                                     "i310"
                                                                     "i308"
                                                                     "i305"
                                                                     "i303"
                                                                     "i301"
                                                                     "i299"
                                                                     "i297"
                                                                     "i295"
                                                                     "i293"
                                                                     "i291"
                                                                     "i289"
                                                                     "i287"
                                                                     "i285"
                                                                     "i283"
                                                                     "i281"
                                                                     "i279"
                                                                     "i277"
                                                                     "i275"
                                                                     "i273"
                                                                     "i271"
                                                                     "i269"
                                                                     "i267"
                                                                     "i265"
                                                                     "i263"
                                                                     "i261"
                                                                     "i260"
                                                                     "i257"
                                                                     "i255"
                                                                     "i254"
                                                                     "i253"
                                                                     "i252"
                                                                     "i251"
                                                                     "i249"
                                                                     "i247"
                                                                     "i245"
                                                                     "i242"
                                                                     "i240"
                                                                     "i238"
                                                                     "i236"
                                                                     "i234"
                                                                     "i232"
                                                                     "i230"
                                                                     "i228"
                                                                     "i226"
                                                                     "i224"
                                                                     "i222"
                                                                     "i220"
                                                                     "i218"
                                                                     "i216"
                                                                     "i214"
                                                                     "i212"
                                                                     "i210"
                                                                     "i208"))
                                                                  #(ribcage
                                                                    (define-structure
                                                                      define-expansion-accessors
                                                                      define-expansion-constructors)
                                                                    ((top)
                                                                     (top)
                                                                     (top))
                                                                    ("i46"
                                                                     "i45"
                                                                     "i44")))
                                                                 (hygiene
                                                                   guile)))
                                                            4)
                                                       #t
                                                       #f)
                                                   '...
                                                   '#(syntax-object
                                                      ...
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i2251"))
                                                       #(ribcage
                                                         (lambda-var-list
                                                           gen-var
                                                           strip
                                                           chi-lambda-case
                                                           lambda*-formals
                                                           chi-simple-lambda
                                                           lambda-formals
                                                           ellipsis?
                                                           chi-void
                                                           eval-local-transformer
                                                           chi-local-syntax
                                                           chi-body
                                                           chi-macro
                                                           chi-application
                                                           chi-expr
                                                           chi
                                                           syntax-type
                                                           chi-when-list
                                                           chi-install-global
                                                           chi-top-sequence
                                                           chi-sequence
                                                           source-wrap
                                                           wrap
                                                           bound-id-member?
                                                           distinct-bound-ids?
                                                           valid-bound-ids?
                                                           bound-id=?
                                                           free-id=?
                                                           id-var-name
                                                           same-marks?
                                                           join-marks
                                                           join-wraps
                                                           smart-append
                                                           make-binding-wrap
                                                           extend-ribcage!
                                                           make-empty-ribcage
                                                           new-mark
                                                           anti-mark
                                                           the-anti-mark
                                                           top-marked?
                                                           top-wrap
                                                           empty-wrap
                                                           set-ribcage-labels!
                                                           set-ribcage-marks!
                                                           set-ribcage-symnames!
                                                           ribcage-labels
                                                           ribcage-marks
                                                           ribcage-symnames
                                                           ribcage?
                                                           make-ribcage
                                                           gen-labels
                                                           gen-label
                                                           make-rename
                                                           rename-marks
                                                           rename-new
                                                           rename-old
                                                           subst-rename?
                                                           wrap-subst
                                                           wrap-marks
                                                           make-wrap
                                                           id-sym-name&marks
                                                           id-sym-name
                                                           id?
                                                           nonsymbol-id?
                                                           global-extend
                                                           lookup
                                                           macros-only-env
                                                           extend-var-env
                                                           extend-env
                                                           null-env
                                                           binding-value
                                                           binding-type
                                                           make-binding
                                                           arg-check
                                                           source-annotation
                                                           no-source
                                                           set-syntax-object-module!
                                                           set-syntax-object-wrap!
                                                           set-syntax-object-expression!
                                                           syntax-object-module
                                                           syntax-object-wrap
                                                           syntax-object-expression
                                                           syntax-object?
                                                           make-syntax-object
                                                           build-lexical-var
                                                           build-letrec
                                                           build-named-let
                                                           build-let
                                                           build-sequence
                                                           build-data
                                                           build-primref
                                                           build-lambda-case
                                                           build-case-lambda
                                                           build-simple-lambda
                                                           build-global-definition
                                                           build-global-assignment
                                                           build-global-reference
                                                           analyze-variable
                                                           build-lexical-assignment
                                                           build-lexical-reference
                                                           build-dynlet
                                                           build-conditional
                                                           build-application
                                                           build-void
                                                           maybe-name-value!
                                                           decorate-source
                                                           get-global-definition-hook
                                                           put-global-definition-hook
                                                           gensym-hook
                                                           local-eval-hook
                                                           top-level-eval-hook
                                                           fx<
                                                           fx=
                                                           fx-
                                                           fx+
                                                           set-lambda-meta!
                                                           lambda-meta
                                                           lambda?
                                                           make-dynlet
                                                           make-letrec
                                                           make-let
                                                           make-lambda-case
                                                           make-lambda
                                                           make-sequence
                                                           make-application
                                                           make-conditional
                                                           make-toplevel-define
                                                           make-toplevel-set
                                                           make-toplevel-ref
                                                           make-module-set
                                                           make-module-ref
                                                           make-lexical-set
                                                           make-lexical-ref
                                                           make-primitive-ref
                                                           make-const
                                                           make-void)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i467"
                                                          "i465"
                                                          "i463"
                                                          "i461"
                                                          "i459"
                                                          "i457"
                                                          "i455"
                                                          "i453"
                                                          "i451"
                                                          "i449"
                                                          "i447"
                                                          "i445"
                                                          "i443"
                                                          "i441"
                                                          "i439"
                                                          "i437"
                                                          "i435"
                                                          "i433"
                                                          "i431"
                                                          "i429"
                                                          "i427"
                                                          "i425"
                                                          "i423"
                                                          "i421"
                                                          "i419"
                                                          "i417"
                                                          "i415"
                                                          "i413"
                                                          "i411"
                                                          "i409"
                                                          "i407"
                                                          "i405"
                                                          "i403"
                                                          "i401"
                                                          "i399"
                                                          "i398"
                                                          "i396"
                                                          "i393"
                                                          "i392"
                                                          "i391"
                                                          "i389"
                                                          "i388"
                                                          "i386"
                                                          "i384"
                                                          "i382"
                                                          "i380"
                                                          "i378"
                                                          "i376"
                                                          "i374"
                                                          "i372"
                                                          "i369"
                                                          "i367"
                                                          "i366"
                                                          "i364"
                                                          "i362"
                                                          "i360"
                                                          "i358"
                                                          "i357"
                                                          "i356"
                                                          "i355"
                                                          "i353"
                                                          "i352"
                                                          "i349"
                                                          "i347"
                                                          "i345"
                                                          "i343"
                                                          "i341"
                                                          "i339"
                                                          "i337"
                                                          "i336"
                                                          "i335"
                                                          "i333"
                                                          "i331"
                                                          "i330"
                                                          "i327"
                                                          "i326"
                                                          "i324"
                                                          "i322"
                                                          "i320"
                                                          "i318"
                                                          "i316"
                                                          "i314"
                                                          "i312"
                                                          "i310"
                                                          "i308"
                                                          "i305"
                                                          "i303"
                                                          "i301"
                                                          "i299"
                                                          "i297"
                                                          "i295"
                                                          "i293"
                                                          "i291"
                                                          "i289"
                                                          "i287"
                                                          "i285"
                                                          "i283"
                                                          "i281"
                                                          "i279"
                                                          "i277"
                                                          "i275"
                                                          "i273"
                                                          "i271"
                                                          "i269"
                                                          "i267"
                                                          "i265"
                                                          "i263"
                                                          "i261"
                                                          "i260"
                                                          "i257"
                                                          "i255"
                                                          "i254"
                                                          "i253"
                                                          "i252"
                                                          "i251"
                                                          "i249"
                                                          "i247"
                                                          "i245"
                                                          "i242"
                                                          "i240"
                                                          "i238"
                                                          "i236"
                                                          "i234"
                                                          "i232"
                                                          "i230"
                                                          "i228"
                                                          "i226"
                                                          "i224"
                                                          "i222"
                                                          "i220"
                                                          "i218"
                                                          "i216"
                                                          "i214"
                                                          "i212"
                                                          "i210"
                                                          "i208"))
                                                       #(ribcage
                                                         (define-structure
                                                           define-expansion-accessors
                                                           define-expansion-constructors)
                                                         ((top) (top) (top))
                                                         ("i46" "i45" "i44")))
                                                      (hygiene guile))))
                                          (eq? (#{id-var-name 4353}#
                                                 #{dots 14243}#
                                                 '(()))
                                               (#{id-var-name 4353}#
                                                 '#(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage () () ())
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i2251"))
                                                     #(ribcage
                                                       (lambda-var-list
                                                         gen-var
                                                         strip
                                                         chi-lambda-case
                                                         lambda*-formals
                                                         chi-simple-lambda
                                                         lambda-formals
                                                         ellipsis?
                                                         chi-void
                                                         eval-local-transformer
                                                         chi-local-syntax
                                                         chi-body
                                                         chi-macro
                                                         chi-application
                                                         chi-expr
                                                         chi
                                                         syntax-type
                                                         chi-when-list
                                                         chi-install-global
                                                         chi-top-sequence
                                                         chi-sequence
                                                         source-wrap
                                                         wrap
                                                         bound-id-member?
                                                         distinct-bound-ids?
                                                         valid-bound-ids?
                                                         bound-id=?
                                                         free-id=?
                                                         id-var-name
                                                         same-marks?
                                                         join-marks
                                                         join-wraps
                                                         smart-append
                                                         make-binding-wrap
                                                         extend-ribcage!
                                                         make-empty-ribcage
                                                         new-mark
                                                         anti-mark
                                                         the-anti-mark
                                                         top-marked?
                                                         top-wrap
                                                         empty-wrap
                                                         set-ribcage-labels!
                                                         set-ribcage-marks!
                                                         set-ribcage-symnames!
                                                         ribcage-labels
                                                         ribcage-marks
                                                         ribcage-symnames
                                                         ribcage?
                                                         make-ribcage
                                                         gen-labels
                                                         gen-label
                                                         make-rename
                                                         rename-marks
                                                         rename-new
                                                         rename-old
                                                         subst-rename?
                                                         wrap-subst
                                                         wrap-marks
                                                         make-wrap
                                                         id-sym-name&marks
                                                         id-sym-name
                                                         id?
                                                         nonsymbol-id?
                                                         global-extend
                                                         lookup
                                                         macros-only-env
                                                         extend-var-env
                                                         extend-env
                                                         null-env
                                                         binding-value
                                                         binding-type
                                                         make-binding
                                                         arg-check
                                                         source-annotation
                                                         no-source
                                                         set-syntax-object-module!
                                                         set-syntax-object-wrap!
                                                         set-syntax-object-expression!
                                                         syntax-object-module
                                                         syntax-object-wrap
                                                         syntax-object-expression
                                                         syntax-object?
                                                         make-syntax-object
                                                         build-lexical-var
                                                         build-letrec
                                                         build-named-let
                                                         build-let
                                                         build-sequence
                                                         build-data
                                                         build-primref
                                                         build-lambda-case
                                                         build-case-lambda
                                                         build-simple-lambda
                                                         build-global-definition
                                                         build-global-assignment
                                                         build-global-reference
                                                         analyze-variable
                                                         build-lexical-assignment
                                                         build-lexical-reference
                                                         build-dynlet
                                                         build-conditional
                                                         build-application
                                                         build-void
                                                         maybe-name-value!
                                                         decorate-source
                                                         get-global-definition-hook
                                                         put-global-definition-hook
                                                         gensym-hook
                                                         local-eval-hook
                                                         top-level-eval-hook
                                                         fx<
                                                         fx=
                                                         fx-
                                                         fx+
                                                         set-lambda-meta!
                                                         lambda-meta
                                                         lambda?
                                                         make-dynlet
                                                         make-letrec
                                                         make-let
                                                         make-lambda-case
                                                         make-lambda
                                                         make-sequence
                                                         make-application
                                                         make-conditional
                                                         make-toplevel-define
                                                         make-toplevel-set
                                                         make-toplevel-ref
                                                         make-module-set
                                                         make-module-ref
                                                         make-lexical-set
                                                         make-lexical-ref
                                                         make-primitive-ref
                                                         make-const
                                                         make-void)
                                                       ((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                       ("i467"
                                                        "i465"
                                                        "i463"
                                                        "i461"
                                                        "i459"
                                                        "i457"
                                                        "i455"
                                                        "i453"
                                                        "i451"
                                                        "i449"
                                                        "i447"
                                                        "i445"
                                                        "i443"
                                                        "i441"
                                                        "i439"
                                                        "i437"
                                                        "i435"
                                                        "i433"
                                                        "i431"
                                                        "i429"
                                                        "i427"
                                                        "i425"
                                                        "i423"
                                                        "i421"
                                                        "i419"
                                                        "i417"
                                                        "i415"
                                                        "i413"
                                                        "i411"
                                                        "i409"
                                                        "i407"
                                                        "i405"
                                                        "i403"
                                                        "i401"
                                                        "i399"
                                                        "i398"
                                                        "i396"
                                                        "i393"
                                                        "i392"
                                                        "i391"
                                                        "i389"
                                                        "i388"
                                                        "i386"
                                                        "i384"
                                                        "i382"
                                                        "i380"
                                                        "i378"
                                                        "i376"
                                                        "i374"
                                                        "i372"
                                                        "i369"
                                                        "i367"
                                                        "i366"
                                                        "i364"
                                                        "i362"
                                                        "i360"
                                                        "i358"
                                                        "i357"
                                                        "i356"
                                                        "i355"
                                                        "i353"
                                                        "i352"
                                                        "i349"
                                                        "i347"
                                                        "i345"
                                                        "i343"
                                                        "i341"
                                                        "i339"
                                                        "i337"
                                                        "i336"
                                                        "i335"
                                                        "i333"
                                                        "i331"
                                                        "i330"
                                                        "i327"
                                                        "i326"
                                                        "i324"
                                                        "i322"
                                                        "i320"
                                                        "i318"
                                                        "i316"
                                                        "i314"
                                                        "i312"
                                                        "i310"
                                                        "i308"
                                                        "i305"
                                                        "i303"
                                                        "i301"
                                                        "i299"
                                                        "i297"
                                                        "i295"
                                                        "i293"
                                                        "i291"
                                                        "i289"
                                                        "i287"
                                                        "i285"
                                                        "i283"
                                                        "i281"
                                                        "i279"
                                                        "i277"
                                                        "i275"
                                                        "i273"
                                                        "i271"
                                                        "i269"
                                                        "i267"
                                                        "i265"
                                                        "i263"
                                                        "i261"
                                                        "i260"
                                                        "i257"
                                                        "i255"
                                                        "i254"
                                                        "i253"
                                                        "i252"
                                                        "i251"
                                                        "i249"
                                                        "i247"
                                                        "i245"
                                                        "i242"
                                                        "i240"
                                                        "i238"
                                                        "i236"
                                                        "i234"
                                                        "i232"
                                                        "i230"
                                                        "i228"
                                                        "i226"
                                                        "i224"
                                                        "i222"
                                                        "i220"
                                                        "i218"
                                                        "i216"
                                                        "i214"
                                                        "i212"
                                                        "i210"
                                                        "i208"))
                                                     #(ribcage
                                                       (define-structure
                                                         define-expansion-accessors
                                                         define-expansion-constructors)
                                                       ((top) (top) (top))
                                                       ("i46" "i45" "i44")))
                                                    (hygiene guile))
                                                 '(())))
                                          #f)
                                        #f))
                                    #{tmp 14238}#)
                                  #f)
                              (@apply
                                (lambda (#{x 14344}#
                                         #{dots 14345}#
                                         #{ys 14346}#)
                                  (call-with-values
                                    (lambda ()
                                      (#{cvt* 13800}#
                                        #{ys 14346}#
                                        #{n 13806}#
                                        #{ids 13807}#))
                                    (lambda (#{ys 14349}# #{ids 14350}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13802}#
                                            #{x 14344}#
                                            (#{1+}# #{n 13806}#)
                                            #{ids 14350}#))
                                        (lambda (#{x 14351}# #{ids 14352}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{v-reverse 13801}#
                                                #{ys 14349}#))
                                            (lambda (#{ys 14385}# #{e 14386}#)
                                              (values
                                                (vector
                                                  'each+
                                                  #{x 14351}#
                                                  #{ys 14385}#
                                                  #{e 14386}#)
                                                #{ids 14352}#))))))))
                                #{tmp 14238}#)
                              (let ((#{tmp 14387}#
                                      ($sc-dispatch #{p 13805}# '(any . any))))
                                (if #{tmp 14387}#
                                  (@apply
                                    (lambda (#{x 14391}# #{y 14392}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{cvt 13802}#
                                            #{y 14392}#
                                            #{n 13806}#
                                            #{ids 13807}#))
                                        (lambda (#{y 14393}# #{ids 14394}#)
                                          (call-with-values
                                            (lambda ()
                                              (#{cvt 13802}#
                                                #{x 14391}#
                                                #{n 13806}#
                                                #{ids 14394}#))
                                            (lambda (#{x 14395}# #{ids 14396}#)
                                              (values
                                                (cons #{x 14395}# #{y 14393}#)
                                                #{ids 14396}#))))))
                                    #{tmp 14387}#)
                                  (let ((#{tmp 14397}#
                                          ($sc-dispatch #{p 13805}# '())))
                                    (if #{tmp 14397}#
                                      (@apply
                                        (lambda () (values '() #{ids 13807}#))
                                        #{tmp 14397}#)
                                      (let ((#{tmp 14401}#
                                              ($sc-dispatch
                                                #{p 13805}#
                                                '#(vector each-any))))
                                        (if #{tmp 14401}#
                                          (@apply
                                            (lambda (#{x 14405}#)
                                              (call-with-values
                                                (lambda ()
                                                  (#{cvt 13802}#
                                                    #{x 14405}#
                                                    #{n 13806}#
                                                    #{ids 13807}#))
                                                (lambda (#{p 14406}#
                                                         #{ids 14407}#)
                                                  (values
                                                    (vector
                                                      'vector
                                                      #{p 14406}#)
                                                    #{ids 14407}#))))
                                            #{tmp 14401}#)
                                          (values
                                            (vector
                                              'atom
                                              (#{strip 4379}#
                                                #{p 13805}#
                                                '(())))
                                            #{ids 13807}#)))))))))))))))
               (#{cvt 13802}# #{pattern 13798}# 0 '()))))
         (#{build-dispatch-call 12176}#
           (lambda (#{pvars 14517}#
                    #{exp 14518}#
                    #{y 14519}#
                    #{r 14520}#
                    #{mod 14521}#)
             (let ((#{ids 14522}# (map car #{pvars 14517}#)))
               (begin
                 (map cdr #{pvars 14517}#)
                 (let ((#{labels 14524}#
                         (#{gen-labels 4337}# #{ids 14522}#))
                       (#{new-vars 14525}#
                         (map #{gen-var 4380}# #{ids 14522}#)))
                   (#{build-application 4301}#
                     #f
                     (if (equal? (module-name (current-module)) '(guile))
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 7)
                         #f
                         'apply)
                       (make-struct/no-tail
                         (vector-ref %expanded-vtables 5)
                         #f
                         '(guile)
                         'apply
                         #f))
                     (list (#{build-simple-lambda 4310}#
                             #f
                             (map syntax->datum #{ids 14522}#)
                             #f
                             #{new-vars 14525}#
                             '()
                             (#{chi 4366}#
                               #{exp 14518}#
                               (#{extend-env 4328}#
                                 #{labels 14524}#
                                 (map (lambda (#{var 14850}# #{level 14851}#)
                                        (cons 'syntax
                                              (cons #{var 14850}#
                                                    #{level 14851}#)))
                                      #{new-vars 14525}#
                                      (map cdr #{pvars 14517}#))
                                 #{r 14520}#)
                               (#{make-binding-wrap 4348}#
                                 #{ids 14522}#
                                 #{labels 14524}#
                                 '(()))
                               #{mod 14521}#))
                           #{y 14519}#)))))))
         (#{gen-clause 12177}#
           (lambda (#{x 13159}#
                    #{keys 13160}#
                    #{clauses 13161}#
                    #{r 13162}#
                    #{pat 13163}#
                    #{fender 13164}#
                    #{exp 13165}#
                    #{mod 13166}#)
             (call-with-values
               (lambda ()
                 (#{convert-pattern 12175}#
                   #{pat 13163}#
                   #{keys 13160}#))
               (lambda (#{p 13321}# #{pvars 13322}#)
                 (if (not (#{distinct-bound-ids? 4357}#
                            (map car #{pvars 13322}#)))
                   (syntax-violation
                     'syntax-case
                     "duplicate pattern variable"
                     #{pat 13163}#)
                   (if (not (and-map
                              (lambda (#{x 13442}#)
                                (not (let ((#{x 13446}# (car #{x 13442}#)))
                                       (if (if (if (vector? #{x 13446}#)
                                                 (if (= (vector-length
                                                          #{x 13446}#)
                                                        4)
                                                   (eq? (vector-ref
                                                          #{x 13446}#
                                                          0)
                                                        'syntax-object)
                                                   #f)
                                                 #f)
                                             (symbol?
                                               (vector-ref #{x 13446}# 1))
                                             #f)
                                         (if (eq? (if (if (vector? #{x 13446}#)
                                                        (if (= (vector-length
                                                                 #{x 13446}#)
                                                               4)
                                                          (eq? (vector-ref
                                                                 #{x 13446}#
                                                                 0)
                                                               'syntax-object)
                                                          #f)
                                                        #f)
                                                    (vector-ref #{x 13446}# 1)
                                                    #{x 13446}#)
                                                  (if (if (= (vector-length
                                                               '#(syntax-object
                                                                  ...
                                                                  ((top)
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     ()
                                                                     ()
                                                                     ())
                                                                   #(ribcage
                                                                     #(x)
                                                                     #((top))
                                                                     #("i2251"))
                                                                   #(ribcage
                                                                     (lambda-var-list
                                                                       gen-var
                                                                       strip
                                                                       chi-lambda-case
                                                                       lambda*-formals
                                                                       chi-simple-lambda
                                                                       lambda-formals
                                                                       ellipsis?
                                                                       chi-void
                                                                       eval-local-transformer
                                                                       chi-local-syntax
                                                                       chi-body
                                                                       chi-macro
                                                                       chi-application
                                                                       chi-expr
                                                                       chi
                                                                       syntax-type
                                                                       chi-when-list
                                                                       chi-install-global
                                                                       chi-top-sequence
                                                                       chi-sequence
                                                                       source-wrap
                                                                       wrap
                                                                       bound-id-member?
                                                                       distinct-bound-ids?
                                                                       valid-bound-ids?
                                                                       bound-id=?
                                                                       free-id=?
                                                                       id-var-name
                                                                       same-marks?
                                                                       join-marks
                                                                       join-wraps
                                                                       smart-append
                                                                       make-binding-wrap
                                                                       extend-ribcage!
                                                                       make-empty-ribcage
                                                                       new-mark
                                                                       anti-mark
                                                                       the-anti-mark
                                                                       top-marked?
                                                                       top-wrap
                                                                       empty-wrap
                                                                       set-ribcage-labels!
                                                                       set-ribcage-marks!
                                                                       set-ribcage-symnames!
                                                                       ribcage-labels
                                                                       ribcage-marks
                                                                       ribcage-symnames
                                                                       ribcage?
                                                                       make-ribcage
                                                                       gen-labels
                                                                       gen-label
                                                                       make-rename
                                                                       rename-marks
                                                                       rename-new
                                                                       rename-old
                                                                       subst-rename?
                                                                       wrap-subst
                                                                       wrap-marks
                                                                       make-wrap
                                                                       id-sym-name&marks
                                                                       id-sym-name
                                                                       id?
                                                                       nonsymbol-id?
                                                                       global-extend
                                                                       lookup
                                                                       macros-only-env
                                                                       extend-var-env
                                                                       extend-env
                                                                       null-env
                                                                       binding-value
                                                                       binding-type
                                                                       make-binding
                                                                       arg-check
                                                                       source-annotation
                                                                       no-source
                                                                       set-syntax-object-module!
                                                                       set-syntax-object-wrap!
                                                                       set-syntax-object-expression!
                                                                       syntax-object-module
                                                                       syntax-object-wrap
                                                                       syntax-object-expression
                                                                       syntax-object?
                                                                       make-syntax-object
                                                                       build-lexical-var
                                                                       build-letrec
                                                                       build-named-let
                                                                       build-let
                                                                       build-sequence
                                                                       build-data
                                                                       build-primref
                                                                       build-lambda-case
                                                                       build-case-lambda
                                                                       build-simple-lambda
                                                                       build-global-definition
                                                                       build-global-assignment
                                                                       build-global-reference
                                                                       analyze-variable
                                                                       build-lexical-assignment
                                                                       build-lexical-reference
                                                                       build-dynlet
                                                                       build-conditional
                                                                       build-application
                                                                       build-void
                                                                       maybe-name-value!
                                                                       decorate-source
                                                                       get-global-definition-hook
                                                                       put-global-definition-hook
                                                                       gensym-hook
                                                                       local-eval-hook
                                                                       top-level-eval-hook
                                                                       fx<
                                                                       fx=
                                                                       fx-
                                                                       fx+
                                                                       set-lambda-meta!
                                                                       lambda-meta
                                                                       lambda?
                                                                       make-dynlet
                                                                       make-letrec
                                                                       make-let
                                                                       make-lambda-case
                                                                       make-lambda
                                                                       make-sequence
                                                                       make-application
                                                                       make-conditional
                                                                       make-toplevel-define
                                                                       make-toplevel-set
                                                                       make-toplevel-ref
                                                                       make-module-set
                                                                       make-module-ref
                                                                       make-lexical-set
                                                                       make-lexical-ref
                                                                       make-primitive-ref
                                                                       make-const
                                                                       make-void)
                                                                     ((top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top)
                                                                      (top))
                                                                     ("i467"
                                                                      "i465"
                                                                      "i463"
                                                                      "i461"
                                                                      "i459"
                                                                      "i457"
                                                                      "i455"
                                                                      "i453"
                                                                      "i451"
                                                                      "i449"
                                                                      "i447"
                                                                      "i445"
                                                                      "i443"
                                                                      "i441"
                                                                      "i439"
                                                                      "i437"
                                                                      "i435"
                                                                      "i433"
                                                                      "i431"
                                                                      "i429"
                                                                      "i427"
                                                                      "i425"
                                                                      "i423"
                                                                      "i421"
                                                                      "i419"
                                                                      "i417"
                                                                      "i415"
                                                                      "i413"
                                                                      "i411"
                                                                      "i409"
                                                                      "i407"
                                                                      "i405"
                                                                      "i403"
                                                                      "i401"
                                                                      "i399"
                                                                      "i398"
                                                                      "i396"
                                                                      "i393"
                                                                      "i392"
                                                                      "i391"
                                                                      "i389"
                                                                      "i388"
                                                                      "i386"
                                                                      "i384"
                                                                      "i382"
                                                                      "i380"
                                                                      "i378"
                                                                      "i376"
                                                                      "i374"
                                                                      "i372"
                                                                      "i369"
                                                                      "i367"
                                                                      "i366"
                                                                      "i364"
                                                                      "i362"
                                                                      "i360"
                                                                      "i358"
                                                                      "i357"
                                                                      "i356"
                                                                      "i355"
                                                                      "i353"
                                                                      "i352"
                                                                      "i349"
                                                                      "i347"
                                                                      "i345"
                                                                      "i343"
                                                                      "i341"
                                                                      "i339"
                                                                      "i337"
                                                                      "i336"
                                                                      "i335"
                                                                      "i333"
                                                                      "i331"
                                                                      "i330"
                                                                      "i327"
                                                                      "i326"
                                                                      "i324"
                                                                      "i322"
                                                                      "i320"
                                                                      "i318"
                                                                      "i316"
                                                                      "i314"
                                                                      "i312"
                                                                      "i310"
                                                                      "i308"
                                                                      "i305"
                                                                      "i303"
                                                                      "i301"
                                                                      "i299"
                                                                      "i297"
                                                                      "i295"
                                                                      "i293"
                                                                      "i291"
                                                                      "i289"
                                                                      "i287"
                                                                      "i285"
                                                                      "i283"
                                                                      "i281"
                                                                      "i279"
                                                                      "i277"
                                                                      "i275"
                                                                      "i273"
                                                                      "i271"
                                                                      "i269"
                                                                      "i267"
                                                                      "i265"
                                                                      "i263"
                                                                      "i261"
                                                                      "i260"
                                                                      "i257"
                                                                      "i255"
                                                                      "i254"
                                                                      "i253"
                                                                      "i252"
                                                                      "i251"
                                                                      "i249"
                                                                      "i247"
                                                                      "i245"
                                                                      "i242"
                                                                      "i240"
                                                                      "i238"
                                                                      "i236"
                                                                      "i234"
                                                                      "i232"
                                                                      "i230"
                                                                      "i228"
                                                                      "i226"
                                                                      "i224"
                                                                      "i222"
                                                                      "i220"
                                                                      "i218"
                                                                      "i216"
                                                                      "i214"
                                                                      "i212"
                                                                      "i210"
                                                                      "i208"))
                                                                   #(ribcage
                                                                     (define-structure
                                                                       define-expansion-accessors
                                                                       define-expansion-constructors)
                                                                     ((top)
                                                                      (top)
                                                                      (top))
                                                                     ("i46"
                                                                      "i45"
                                                                      "i44")))
                                                                  (hygiene
                                                                    guile)))
                                                             4)
                                                        #t
                                                        #f)
                                                    '...
                                                    '#(syntax-object
                                                       ...
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i2251"))
                                                        #(ribcage
                                                          (lambda-var-list
                                                            gen-var
                                                            strip
                                                            chi-lambda-case
                                                            lambda*-formals
                                                            chi-simple-lambda
                                                            lambda-formals
                                                            ellipsis?
                                                            chi-void
                                                            eval-local-transformer
                                                            chi-local-syntax
                                                            chi-body
                                                            chi-macro
                                                            chi-application
                                                            chi-expr
                                                            chi
                                                            syntax-type
                                                            chi-when-list
                                                            chi-install-global
                                                            chi-top-sequence
                                                            chi-sequence
                                                            source-wrap
                                                            wrap
                                                            bound-id-member?
                                                            distinct-bound-ids?
                                                            valid-bound-ids?
                                                            bound-id=?
                                                            free-id=?
                                                            id-var-name
                                                            same-marks?
                                                            join-marks
                                                            join-wraps
                                                            smart-append
                                                            make-binding-wrap
                                                            extend-ribcage!
                                                            make-empty-ribcage
                                                            new-mark
                                                            anti-mark
                                                            the-anti-mark
                                                            top-marked?
                                                            top-wrap
                                                            empty-wrap
                                                            set-ribcage-labels!
                                                            set-ribcage-marks!
                                                            set-ribcage-symnames!
                                                            ribcage-labels
                                                            ribcage-marks
                                                            ribcage-symnames
                                                            ribcage?
                                                            make-ribcage
                                                            gen-labels
                                                            gen-label
                                                            make-rename
                                                            rename-marks
                                                            rename-new
                                                            rename-old
                                                            subst-rename?
                                                            wrap-subst
                                                            wrap-marks
                                                            make-wrap
                                                            id-sym-name&marks
                                                            id-sym-name
                                                            id?
                                                            nonsymbol-id?
                                                            global-extend
                                                            lookup
                                                            macros-only-env
                                                            extend-var-env
                                                            extend-env
                                                            null-env
                                                            binding-value
                                                            binding-type
                                                            make-binding
                                                            arg-check
                                                            source-annotation
                                                            no-source
                                                            set-syntax-object-module!
                                                            set-syntax-object-wrap!
                                                            set-syntax-object-expression!
                                                            syntax-object-module
                                                            syntax-object-wrap
                                                            syntax-object-expression
                                                            syntax-object?
                                                            make-syntax-object
                                                            build-lexical-var
                                                            build-letrec
                                                            build-named-let
                                                            build-let
                                                            build-sequence
                                                            build-data
                                                            build-primref
                                                            build-lambda-case
                                                            build-case-lambda
                                                            build-simple-lambda
                                                            build-global-definition
                                                            build-global-assignment
                                                            build-global-reference
                                                            analyze-variable
                                                            build-lexical-assignment
                                                            build-lexical-reference
                                                            build-dynlet
                                                            build-conditional
                                                            build-application
                                                            build-void
                                                            maybe-name-value!
                                                            decorate-source
                                                            get-global-definition-hook
                                                            put-global-definition-hook
                                                            gensym-hook
                                                            local-eval-hook
                                                            top-level-eval-hook
                                                            fx<
                                                            fx=
                                                            fx-
                                                            fx+
                                                            set-lambda-meta!
                                                            lambda-meta
                                                            lambda?
                                                            make-dynlet
                                                            make-letrec
                                                            make-let
                                                            make-lambda-case
                                                            make-lambda
                                                            make-sequence
                                                            make-application
                                                            make-conditional
                                                            make-toplevel-define
                                                            make-toplevel-set
                                                            make-toplevel-ref
                                                            make-module-set
                                                            make-module-ref
                                                            make-lexical-set
                                                            make-lexical-ref
                                                            make-primitive-ref
                                                            make-const
                                                            make-void)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i467"
                                                           "i465"
                                                           "i463"
                                                           "i461"
                                                           "i459"
                                                           "i457"
                                                           "i455"
                                                           "i453"
                                                           "i451"
                                                           "i449"
                                                           "i447"
                                                           "i445"
                                                           "i443"
                                                           "i441"
                                                           "i439"
                                                           "i437"
                                                           "i435"
                                                           "i433"
                                                           "i431"
                                                           "i429"
                                                           "i427"
                                                           "i425"
                                                           "i423"
                                                           "i421"
                                                           "i419"
                                                           "i417"
                                                           "i415"
                                                           "i413"
                                                           "i411"
                                                           "i409"
                                                           "i407"
                                                           "i405"
                                                           "i403"
                                                           "i401"
                                                           "i399"
                                                           "i398"
                                                           "i396"
                                                           "i393"
                                                           "i392"
                                                           "i391"
                                                           "i389"
                                                           "i388"
                                                           "i386"
                                                           "i384"
                                                           "i382"
                                                           "i380"
                                                           "i378"
                                                           "i376"
                                                           "i374"
                                                           "i372"
                                                           "i369"
                                                           "i367"
                                                           "i366"
                                                           "i364"
                                                           "i362"
                                                           "i360"
                                                           "i358"
                                                           "i357"
                                                           "i356"
                                                           "i355"
                                                           "i353"
                                                           "i352"
                                                           "i349"
                                                           "i347"
                                                           "i345"
                                                           "i343"
                                                           "i341"
                                                           "i339"
                                                           "i337"
                                                           "i336"
                                                           "i335"
                                                           "i333"
                                                           "i331"
                                                           "i330"
                                                           "i327"
                                                           "i326"
                                                           "i324"
                                                           "i322"
                                                           "i320"
                                                           "i318"
                                                           "i316"
                                                           "i314"
                                                           "i312"
                                                           "i310"
                                                           "i308"
                                                           "i305"
                                                           "i303"
                                                           "i301"
                                                           "i299"
                                                           "i297"
                                                           "i295"
                                                           "i293"
                                                           "i291"
                                                           "i289"
                                                           "i287"
                                                           "i285"
                                                           "i283"
                                                           "i281"
                                                           "i279"
                                                           "i277"
                                                           "i275"
                                                           "i273"
                                                           "i271"
                                                           "i269"
                                                           "i267"
                                                           "i265"
                                                           "i263"
                                                           "i261"
                                                           "i260"
                                                           "i257"
                                                           "i255"
                                                           "i254"
                                                           "i253"
                                                           "i252"
                                                           "i251"
                                                           "i249"
                                                           "i247"
                                                           "i245"
                                                           "i242"
                                                           "i240"
                                                           "i238"
                                                           "i236"
                                                           "i234"
                                                           "i232"
                                                           "i230"
                                                           "i228"
                                                           "i226"
                                                           "i224"
                                                           "i222"
                                                           "i220"
                                                           "i218"
                                                           "i216"
                                                           "i214"
                                                           "i212"
                                                           "i210"
                                                           "i208"))
                                                        #(ribcage
                                                          (define-structure
                                                            define-expansion-accessors
                                                            define-expansion-constructors)
                                                          ((top) (top) (top))
                                                          ("i46" "i45" "i44")))
                                                       (hygiene guile))))
                                           (eq? (#{id-var-name 4353}#
                                                  #{x 13446}#
                                                  '(()))
                                                (#{id-var-name 4353}#
                                                  '#(syntax-object
                                                     ...
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(x)
                                                        #((top))
                                                        #("i2251"))
                                                      #(ribcage
                                                        (lambda-var-list
                                                          gen-var
                                                          strip
                                                          chi-lambda-case
                                                          lambda*-formals
                                                          chi-simple-lambda
                                                          lambda-formals
                                                          ellipsis?
                                                          chi-void
                                                          eval-local-transformer
                                                          chi-local-syntax
                                                          chi-body
                                                          chi-macro
                                                          chi-application
                                                          chi-expr
                                                          chi
                                                          syntax-type
                                                          chi-when-list
                                                          chi-install-global
                                                          chi-top-sequence
                                                          chi-sequence
                                                          source-wrap
                                                          wrap
                                                          bound-id-member?
                                                          distinct-bound-ids?
                                                          valid-bound-ids?
                                                          bound-id=?
                                                          free-id=?
                                                          id-var-name
                                                          same-marks?
                                                          join-marks
                                                          join-wraps
                                                          smart-append
                                                          make-binding-wrap
                                                          extend-ribcage!
                                                          make-empty-ribcage
                                                          new-mark
                                                          anti-mark
                                                          the-anti-mark
                                                          top-marked?
                                                          top-wrap
                                                          empty-wrap
                                                          set-ribcage-labels!
                                                          set-ribcage-marks!
                                                          set-ribcage-symnames!
                                                          ribcage-labels
                                                          ribcage-marks
                                                          ribcage-symnames
                                                          ribcage?
                                                          make-ribcage
                                                          gen-labels
                                                          gen-label
                                                          make-rename
                                                          rename-marks
                                                          rename-new
                                                          rename-old
                                                          subst-rename?
                                                          wrap-subst
                                                          wrap-marks
                                                          make-wrap
                                                          id-sym-name&marks
                                                          id-sym-name
                                                          id?
                                                          nonsymbol-id?
                                                          global-extend
                                                          lookup
                                                          macros-only-env
                                                          extend-var-env
                                                          extend-env
                                                          null-env
                                                          binding-value
                                                          binding-type
                                                          make-binding
                                                          arg-check
                                                          source-annotation
                                                          no-source
                                                          set-syntax-object-module!
                                                          set-syntax-object-wrap!
                                                          set-syntax-object-expression!
                                                          syntax-object-module
                                                          syntax-object-wrap
                                                          syntax-object-expression
                                                          syntax-object?
                                                          make-syntax-object
                                                          build-lexical-var
                                                          build-letrec
                                                          build-named-let
                                                          build-let
                                                          build-sequence
                                                          build-data
                                                          build-primref
                                                          build-lambda-case
                                                          build-case-lambda
                                                          build-simple-lambda
                                                          build-global-definition
                                                          build-global-assignment
                                                          build-global-reference
                                                          analyze-variable
                                                          build-lexical-assignment
                                                          build-lexical-reference
                                                          build-dynlet
                                                          build-conditional
                                                          build-application
                                                          build-void
                                                          maybe-name-value!
                                                          decorate-source
                                                          get-global-definition-hook
                                                          put-global-definition-hook
                                                          gensym-hook
                                                          local-eval-hook
                                                          top-level-eval-hook
                                                          fx<
                                                          fx=
                                                          fx-
                                                          fx+
                                                          set-lambda-meta!
                                                          lambda-meta
                                                          lambda?
                                                          make-dynlet
                                                          make-letrec
                                                          make-let
                                                          make-lambda-case
                                                          make-lambda
                                                          make-sequence
                                                          make-application
                                                          make-conditional
                                                          make-toplevel-define
                                                          make-toplevel-set
                                                          make-toplevel-ref
                                                          make-module-set
                                                          make-module-ref
                                                          make-lexical-set
                                                          make-lexical-ref
                                                          make-primitive-ref
                                                          make-const
                                                          make-void)
                                                        ((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                        ("i467"
                                                         "i465"
                                                         "i463"
                                                         "i461"
                                                         "i459"
                                                         "i457"
                                                         "i455"
                                                         "i453"
                                                         "i451"
                                                         "i449"
                                                         "i447"
                                                         "i445"
                                                         "i443"
                                                         "i441"
                                                         "i439"
                                                         "i437"
                                                         "i435"
                                                         "i433"
                                                         "i431"
                                                         "i429"
                                                         "i427"
                                                         "i425"
                                                         "i423"
                                                         "i421"
                                                         "i419"
                                                         "i417"
                                                         "i415"
                                                         "i413"
                                                         "i411"
                                                         "i409"
                                                         "i407"
                                                         "i405"
                                                         "i403"
                                                         "i401"
                                                         "i399"
                                                         "i398"
                                                         "i396"
                                                         "i393"
                                                         "i392"
                                                         "i391"
                                                         "i389"
                                                         "i388"
                                                         "i386"
                                                         "i384"
                                                         "i382"
                                                         "i380"
                                                         "i378"
                                                         "i376"
                                                         "i374"
                                                         "i372"
                                                         "i369"
                                                         "i367"
                                                         "i366"
                                                         "i364"
                                                         "i362"
                                                         "i360"
                                                         "i358"
                                                         "i357"
                                                         "i356"
                                                         "i355"
                                                         "i353"
                                                         "i352"
                                                         "i349"
                                                         "i347"
                                                         "i345"
                                                         "i343"
                                                         "i341"
                                                         "i339"
                                                         "i337"
                                                         "i336"
                                                         "i335"
                                                         "i333"
                                                         "i331"
                                                         "i330"
                                                         "i327"
                                                         "i326"
                                                         "i324"
                                                         "i322"
                                                         "i320"
                                                         "i318"
                                                         "i316"
                                                         "i314"
                                                         "i312"
                                                         "i310"
                                                         "i308"
                                                         "i305"
                                                         "i303"
                                                         "i301"
                                                         "i299"
                                                         "i297"
                                                         "i295"
                                                         "i293"
                                                         "i291"
                                                         "i289"
                                                         "i287"
                                                         "i285"
                                                         "i283"
                                                         "i281"
                                                         "i279"
                                                         "i277"
                                                         "i275"
                                                         "i273"
                                                         "i271"
                                                         "i269"
                                                         "i267"
                                                         "i265"
                                                         "i263"
                                                         "i261"
                                                         "i260"
                                                         "i257"
                                                         "i255"
                                                         "i254"
                                                         "i253"
                                                         "i252"
                                                         "i251"
                                                         "i249"
                                                         "i247"
                                                         "i245"
                                                         "i242"
                                                         "i240"
                                                         "i238"
                                                         "i236"
                                                         "i234"
                                                         "i232"
                                                         "i230"
                                                         "i228"
                                                         "i226"
                                                         "i224"
                                                         "i222"
                                                         "i220"
                                                         "i218"
                                                         "i216"
                                                         "i214"
                                                         "i212"
                                                         "i210"
                                                         "i208"))
                                                      #(ribcage
                                                        (define-structure
                                                          define-expansion-accessors
                                                          define-expansion-constructors)
                                                        ((top) (top) (top))
                                                        ("i46" "i45" "i44")))
                                                     (hygiene guile))
                                                  '(())))
                                           #f)
                                         #f))))
                              #{pvars 13322}#))
                     (syntax-violation
                       'syntax-case
                       "misplaced ellipsis"
                       #{pat 13163}#)
                     (let ((#{y 13522}#
                             (gensym
                               (string-append (symbol->string 'tmp) " "))))
                       (#{build-application 4301}#
                         #f
                         (let ((#{req 13672}# (list 'tmp))
                               (#{vars 13674}# (list #{y 13522}#))
                               (#{exp 13676}#
                                 (let ((#{y 13693}#
                                         (make-struct/no-tail
                                           (vector-ref %expanded-vtables 3)
                                           #f
                                           'tmp
                                           #{y 13522}#)))
                                   (let ((#{test-exp 13697}#
                                           (let ((#{tmp 13706}#
                                                   ($sc-dispatch
                                                     #{fender 13164}#
                                                     '#(atom #t))))
                                             (if #{tmp 13706}#
                                               (@apply
                                                 (lambda () #{y 13693}#)
                                                 #{tmp 13706}#)
                                               (let ((#{then-exp 13724}#
                                                       (#{build-dispatch-call 12176}#
                                                         #{pvars 13322}#
                                                         #{fender 13164}#
                                                         #{y 13693}#
                                                         #{r 13162}#
                                                         #{mod 13166}#))
                                                     (#{else-exp 13725}#
                                                       (make-struct/no-tail
                                                         (vector-ref
                                                           %expanded-vtables
                                                           1)
                                                         #f
                                                         #f)))
                                                 (make-struct/no-tail
                                                   (vector-ref
                                                     %expanded-vtables
                                                     10)
                                                   #f
                                                   #{y 13693}#
                                                   #{then-exp 13724}#
                                                   #{else-exp 13725}#)))))
                                         (#{then-exp 13698}#
                                           (#{build-dispatch-call 12176}#
                                             #{pvars 13322}#
                                             #{exp 13165}#
                                             #{y 13693}#
                                             #{r 13162}#
                                             #{mod 13166}#))
                                         (#{else-exp 13699}#
                                           (#{gen-syntax-case 12178}#
                                             #{x 13159}#
                                             #{keys 13160}#
                                             #{clauses 13161}#
                                             #{r 13162}#
                                             #{mod 13166}#)))
                                     (make-struct/no-tail
                                       (vector-ref %expanded-vtables 10)
                                       #f
                                       #{test-exp 13697}#
                                       #{then-exp 13698}#
                                       #{else-exp 13699}#)))))
                           (let ((#{body 13681}#
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 14)
                                     #f
                                     #{req 13672}#
                                     #f
                                     #f
                                     #f
                                     '()
                                     #{vars 13674}#
                                     #{exp 13676}#
                                     #f)))
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 13)
                               #f
                               '()
                               #{body 13681}#)))
                         (list (if (eq? #{p 13321}# 'any)
                                 (let ((#{fun-exp 13747}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             'list)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             'list
                                             #f)))
                                       (#{arg-exps 13748}# (list #{x 13159}#)))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13747}#
                                     #{arg-exps 13748}#))
                                 (let ((#{fun-exp 13771}#
                                         (if (equal?
                                               (module-name (current-module))
                                               '(guile))
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 7)
                                             #f
                                             '$sc-dispatch)
                                           (make-struct/no-tail
                                             (vector-ref %expanded-vtables 5)
                                             #f
                                             '(guile)
                                             '$sc-dispatch
                                             #f)))
                                       (#{arg-exps 13772}#
                                         (list #{x 13159}#
                                               (make-struct/no-tail
                                                 (vector-ref
                                                   %expanded-vtables
                                                   1)
                                                 #f
                                                 #{p 13321}#))))
                                   (make-struct/no-tail
                                     (vector-ref %expanded-vtables 11)
                                     #f
                                     #{fun-exp 13771}#
                                     #{arg-exps 13772}#))))))))))))
         (#{gen-syntax-case 12178}#
           (lambda (#{x 12587}#
                    #{keys 12588}#
                    #{clauses 12589}#
                    #{r 12590}#
                    #{mod 12591}#)
             (if (null? #{clauses 12589}#)
               (let ((#{fun-exp 12596}#
                       (if (equal? (module-name (current-module)) '(guile))
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 7)
                           #f
                           'syntax-violation)
                         (make-struct/no-tail
                           (vector-ref %expanded-vtables 5)
                           #f
                           '(guile)
                           'syntax-violation
                           #f)))
                     (#{arg-exps 12597}#
                       (list (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               #f)
                             (make-struct/no-tail
                               (vector-ref %expanded-vtables 1)
                               #f
                               "source expression failed to match any pattern")
                             #{x 12587}#)))
                 (make-struct/no-tail
                   (vector-ref %expanded-vtables 11)
                   #f
                   #{fun-exp 12596}#
                   #{arg-exps 12597}#))
               (let ((#{tmp 12630}# (car #{clauses 12589}#)))
                 (let ((#{tmp 12631}#
                         ($sc-dispatch #{tmp 12630}# '(any any))))
                   (if #{tmp 12631}#
                     (@apply
                       (lambda (#{pat 12633}# #{exp 12634}#)
                         (if (if (if (symbol? #{pat 12633}#)
                                   #t
                                   (if (if (vector? #{pat 12633}#)
                                         (if (= (vector-length #{pat 12633}#)
                                                4)
                                           (eq? (vector-ref #{pat 12633}# 0)
                                                'syntax-object)
                                           #f)
                                         #f)
                                     (symbol? (vector-ref #{pat 12633}# 1))
                                     #f))
                               (and-map
                                 (lambda (#{x 12661}#)
                                   (not (if (eq? (if (if (vector?
                                                           #{pat 12633}#)
                                                       (if (= (vector-length
                                                                #{pat 12633}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{pat 12633}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{pat 12633}# 1)
                                                   #{pat 12633}#)
                                                 (if (if (vector? #{x 12661}#)
                                                       (if (= (vector-length
                                                                #{x 12661}#)
                                                              4)
                                                         (eq? (vector-ref
                                                                #{x 12661}#
                                                                0)
                                                              'syntax-object)
                                                         #f)
                                                       #f)
                                                   (vector-ref #{x 12661}# 1)
                                                   #{x 12661}#))
                                          (eq? (#{id-var-name 4353}#
                                                 #{pat 12633}#
                                                 '(()))
                                               (#{id-var-name 4353}#
                                                 #{x 12661}#
                                                 '(())))
                                          #f)))
                                 (cons '#(syntax-object
                                          ...
                                          ((top)
                                           #(ribcage
                                             #(pat exp)
                                             #((top) (top))
                                             #("i3932" "i3933"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x keys clauses r mod)
                                             #((top) (top) (top) (top) (top))
                                             #("i3921"
                                               "i3922"
                                               "i3923"
                                               "i3924"
                                               "i3925"))
                                           #(ribcage
                                             (gen-syntax-case
                                               gen-clause
                                               build-dispatch-call
                                               convert-pattern)
                                             ((top) (top) (top) (top))
                                             ("i3731" "i3729" "i3727" "i3725"))
                                           #(ribcage
                                             (lambda-var-list
                                               gen-var
                                               strip
                                               chi-lambda-case
                                               lambda*-formals
                                               chi-simple-lambda
                                               lambda-formals
                                               ellipsis?
                                               chi-void
                                               eval-local-transformer
                                               chi-local-syntax
                                               chi-body
                                               chi-macro
                                               chi-application
                                               chi-expr
                                               chi
                                               syntax-type
                                               chi-when-list
                                               chi-install-global
                                               chi-top-sequence
                                               chi-sequence
                                               source-wrap
                                               wrap
                                               bound-id-member?
                                               distinct-bound-ids?
                                               valid-bound-ids?
                                               bound-id=?
                                               free-id=?
                                               id-var-name
                                               same-marks?
                                               join-marks
                                               join-wraps
                                               smart-append
                                               make-binding-wrap
                                               extend-ribcage!
                                               make-empty-ribcage
                                               new-mark
                                               anti-mark
                                               the-anti-mark
                                               top-marked?
                                               top-wrap
                                               empty-wrap
                                               set-ribcage-labels!
                                               set-ribcage-marks!
                                               set-ribcage-symnames!
                                               ribcage-labels
                                               ribcage-marks
                                               ribcage-symnames
                                               ribcage?
                                               make-ribcage
                                               gen-labels
                                               gen-label
                                               make-rename
                                               rename-marks
                                               rename-new
                                               rename-old
                                               subst-rename?
                                               wrap-subst
                                               wrap-marks
                                               make-wrap
                                               id-sym-name&marks
                                               id-sym-name
                                               id?
                                               nonsymbol-id?
                                               global-extend
                                               lookup
                                               macros-only-env
                                               extend-var-env
                                               extend-env
                                               null-env
                                               binding-value
                                               binding-type
                                               make-binding
                                               arg-check
                                               source-annotation
                                               no-source
                                               set-syntax-object-module!
                                               set-syntax-object-wrap!
                                               set-syntax-object-expression!
                                               syntax-object-module
                                               syntax-object-wrap
                                               syntax-object-expression
                                               syntax-object?
                                               make-syntax-object
                                               build-lexical-var
                                               build-letrec
                                               build-named-let
                                               build-let
                                               build-sequence
                                               build-data
                                               build-primref
                                               build-lambda-case
                                               build-case-lambda
                                               build-simple-lambda
                                               build-global-definition
                                               build-global-assignment
                                               build-global-reference
                                               analyze-variable
                                               build-lexical-assignment
                                               build-lexical-reference
                                               build-dynlet
                                               build-conditional
                                               build-application
                                               build-void
                                               maybe-name-value!
                                               decorate-source
                                               get-global-definition-hook
                                               put-global-definition-hook
                                               gensym-hook
                                               local-eval-hook
                                               top-level-eval-hook
                                               fx<
                                               fx=
                                               fx-
                                               fx+
                                               set-lambda-meta!
                                               lambda-meta
                                               lambda?
                                               make-dynlet
                                               make-letrec
                                               make-let
                                               make-lambda-case
                                               make-lambda
                                               make-sequence
                                               make-application
                                               make-conditional
                                               make-toplevel-define
                                               make-toplevel-set
                                               make-toplevel-ref
                                               make-module-set
                                               make-module-ref
                                               make-lexical-set
                                               make-lexical-ref
                                               make-primitive-ref
                                               make-const
                                               make-void)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i467"
                                              "i465"
                                              "i463"
                                              "i461"
                                              "i459"
                                              "i457"
                                              "i455"
                                              "i453"
                                              "i451"
                                              "i449"
                                              "i447"
                                              "i445"
                                              "i443"
                                              "i441"
                                              "i439"
                                              "i437"
                                              "i435"
                                              "i433"
                                              "i431"
                                              "i429"
                                              "i427"
                                              "i425"
                                              "i423"
                                              "i421"
                                              "i419"
                                              "i417"
                                              "i415"
                                              "i413"
                                              "i411"
                                              "i409"
                                              "i407"
                                              "i405"
                                              "i403"
                                              "i401"
                                              "i399"
                                              "i398"
                                              "i396"
                                              "i393"
                                              "i392"
                                              "i391"
                                              "i389"
                                              "i388"
                                              "i386"
                                              "i384"
                                              "i382"
                                              "i380"
                                              "i378"
                                              "i376"
                                              "i374"
                                              "i372"
                                              "i369"
                                              "i367"
                                              "i366"
                                              "i364"
                                              "i362"
                                              "i360"
                                              "i358"
                                              "i357"
                                              "i356"
                                              "i355"
                                              "i353"
                                              "i352"
                                              "i349"
                                              "i347"
                                              "i345"
                                              "i343"
                                              "i341"
                                              "i339"
                                              "i337"
                                              "i336"
                                              "i335"
                                              "i333"
                                              "i331"
                                              "i330"
                                              "i327"
                                              "i326"
                                              "i324"
                                              "i322"
                                              "i320"
                                              "i318"
                                              "i316"
                                              "i314"
                                              "i312"
                                              "i310"
                                              "i308"
                                              "i305"
                                              "i303"
                                              "i301"
                                              "i299"
                                              "i297"
                                              "i295"
                                              "i293"
                                              "i291"
                                              "i289"
                                              "i287"
                                              "i285"
                                              "i283"
                                              "i281"
                                              "i279"
                                              "i277"
                                              "i275"
                                              "i273"
                                              "i271"
                                              "i269"
                                              "i267"
                                              "i265"
                                              "i263"
                                              "i261"
                                              "i260"
                                              "i257"
                                              "i255"
                                              "i254"
                                              "i253"
                                              "i252"
                                              "i251"
                                              "i249"
                                              "i247"
                                              "i245"
                                              "i242"
                                              "i240"
                                              "i238"
                                              "i236"
                                              "i234"
                                              "i232"
                                              "i230"
                                              "i228"
                                              "i226"
                                              "i224"
                                              "i222"
                                              "i220"
                                              "i218"
                                              "i216"
                                              "i214"
                                              "i212"
                                              "i210"
                                              "i208"))
                                           #(ribcage
                                             (define-structure
                                               define-expansion-accessors
                                               define-expansion-constructors)
                                             ((top) (top) (top))
                                             ("i46" "i45" "i44")))
                                          (hygiene guile))
                                       #{keys 12588}#))
                               #f)
                           (if (if (eq? (if (if (= (vector-length
                                                     '#(syntax-object
                                                        pad
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3932" "i3933"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3921"
                                                             "i3922"
                                                             "i3923"
                                                             "i3924"
                                                             "i3925"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3731"
                                                            "i3729"
                                                            "i3727"
                                                            "i3725"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             chi-lambda-case
                                                             lambda*-formals
                                                             chi-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             chi-void
                                                             eval-local-transformer
                                                             chi-local-syntax
                                                             chi-body
                                                             chi-macro
                                                             chi-application
                                                             chi-expr
                                                             chi
                                                             syntax-type
                                                             chi-when-list
                                                             chi-install-global
                                                             chi-top-sequence
                                                             chi-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          'pad
                                          '#(syntax-object
                                             pad
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3932" "i3933"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3921"
                                                  "i3922"
                                                  "i3923"
                                                  "i3924"
                                                  "i3925"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3731"
                                                 "i3729"
                                                 "i3727"
                                                 "i3725"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile)))
                                        (if (if (= (vector-length
                                                     '#(syntax-object
                                                        _
                                                        ((top)
                                                         #(ribcage
                                                           #(pat exp)
                                                           #((top) (top))
                                                           #("i3932" "i3933"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x
                                                             keys
                                                             clauses
                                                             r
                                                             mod)
                                                           #((top)
                                                             (top)
                                                             (top)
                                                             (top)
                                                             (top))
                                                           #("i3921"
                                                             "i3922"
                                                             "i3923"
                                                             "i3924"
                                                             "i3925"))
                                                         #(ribcage
                                                           (gen-syntax-case
                                                             gen-clause
                                                             build-dispatch-call
                                                             convert-pattern)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i3731"
                                                            "i3729"
                                                            "i3727"
                                                            "i3725"))
                                                         #(ribcage
                                                           (lambda-var-list
                                                             gen-var
                                                             strip
                                                             chi-lambda-case
                                                             lambda*-formals
                                                             chi-simple-lambda
                                                             lambda-formals
                                                             ellipsis?
                                                             chi-void
                                                             eval-local-transformer
                                                             chi-local-syntax
                                                             chi-body
                                                             chi-macro
                                                             chi-application
                                                             chi-expr
                                                             chi
                                                             syntax-type
                                                             chi-when-list
                                                             chi-install-global
                                                             chi-top-sequence
                                                             chi-sequence
                                                             source-wrap
                                                             wrap
                                                             bound-id-member?
                                                             distinct-bound-ids?
                                                             valid-bound-ids?
                                                             bound-id=?
                                                             free-id=?
                                                             id-var-name
                                                             same-marks?
                                                             join-marks
                                                             join-wraps
                                                             smart-append
                                                             make-binding-wrap
                                                             extend-ribcage!
                                                             make-empty-ribcage
                                                             new-mark
                                                             anti-mark
                                                             the-anti-mark
                                                             top-marked?
                                                             top-wrap
                                                             empty-wrap
                                                             set-ribcage-labels!
                                                             set-ribcage-marks!
                                                             set-ribcage-symnames!
                                                             ribcage-labels
                                                             ribcage-marks
                                                             ribcage-symnames
                                                             ribcage?
                                                             make-ribcage
                                                             gen-labels
                                                             gen-label
                                                             make-rename
                                                             rename-marks
                                                             rename-new
                                                             rename-old
                                                             subst-rename?
                                                             wrap-subst
                                                             wrap-marks
                                                             make-wrap
                                                             id-sym-name&marks
                                                             id-sym-name
                                                             id?
                                                             nonsymbol-id?
                                                             global-extend
                                                             lookup
                                                             macros-only-env
                                                             extend-var-env
                                                             extend-env
                                                             null-env
                                                             binding-value
                                                             binding-type
                                                             make-binding
                                                             arg-check
                                                             source-annotation
                                                             no-source
                                                             set-syntax-object-module!
                                                             set-syntax-object-wrap!
                                                             set-syntax-object-expression!
                                                             syntax-object-module
                                                             syntax-object-wrap
                                                             syntax-object-expression
                                                             syntax-object?
                                                             make-syntax-object
                                                             build-lexical-var
                                                             build-letrec
                                                             build-named-let
                                                             build-let
                                                             build-sequence
                                                             build-data
                                                             build-primref
                                                             build-lambda-case
                                                             build-case-lambda
                                                             build-simple-lambda
                                                             build-global-definition
                                                             build-global-assignment
                                                             build-global-reference
                                                             analyze-variable
                                                             build-lexical-assignment
                                                             build-lexical-reference
                                                             build-dynlet
                                                             build-conditional
                                                             build-application
                                                             build-void
                                                             maybe-name-value!
                                                             decorate-source
                                                             get-global-definition-hook
                                                             put-global-definition-hook
                                                             gensym-hook
                                                             local-eval-hook
                                                             top-level-eval-hook
                                                             fx<
                                                             fx=
                                                             fx-
                                                             fx+
                                                             set-lambda-meta!
                                                             lambda-meta
                                                             lambda?
                                                             make-dynlet
                                                             make-letrec
                                                             make-let
                                                             make-lambda-case
                                                             make-lambda
                                                             make-sequence
                                                             make-application
                                                             make-conditional
                                                             make-toplevel-define
                                                             make-toplevel-set
                                                             make-toplevel-ref
                                                             make-module-set
                                                             make-module-ref
                                                             make-lexical-set
                                                             make-lexical-ref
                                                             make-primitive-ref
                                                             make-const
                                                             make-void)
                                                           ((top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top)
                                                            (top))
                                                           ("i467"
                                                            "i465"
                                                            "i463"
                                                            "i461"
                                                            "i459"
                                                            "i457"
                                                            "i455"
                                                            "i453"
                                                            "i451"
                                                            "i449"
                                                            "i447"
                                                            "i445"
                                                            "i443"
                                                            "i441"
                                                            "i439"
                                                            "i437"
                                                            "i435"
                                                            "i433"
                                                            "i431"
                                                            "i429"
                                                            "i427"
                                                            "i425"
                                                            "i423"
                                                            "i421"
                                                            "i419"
                                                            "i417"
                                                            "i415"
                                                            "i413"
                                                            "i411"
                                                            "i409"
                                                            "i407"
                                                            "i405"
                                                            "i403"
                                                            "i401"
                                                            "i399"
                                                            "i398"
                                                            "i396"
                                                            "i393"
                                                            "i392"
                                                            "i391"
                                                            "i389"
                                                            "i388"
                                                            "i386"
                                                            "i384"
                                                            "i382"
                                                            "i380"
                                                            "i378"
                                                            "i376"
                                                            "i374"
                                                            "i372"
                                                            "i369"
                                                            "i367"
                                                            "i366"
                                                            "i364"
                                                            "i362"
                                                            "i360"
                                                            "i358"
                                                            "i357"
                                                            "i356"
                                                            "i355"
                                                            "i353"
                                                            "i352"
                                                            "i349"
                                                            "i347"
                                                            "i345"
                                                            "i343"
                                                            "i341"
                                                            "i339"
                                                            "i337"
                                                            "i336"
                                                            "i335"
                                                            "i333"
                                                            "i331"
                                                            "i330"
                                                            "i327"
                                                            "i326"
                                                            "i324"
                                                            "i322"
                                                            "i320"
                                                            "i318"
                                                            "i316"
                                                            "i314"
                                                            "i312"
                                                            "i310"
                                                            "i308"
                                                            "i305"
                                                            "i303"
                                                            "i301"
                                                            "i299"
                                                            "i297"
                                                            "i295"
                                                            "i293"
                                                            "i291"
                                                            "i289"
                                                            "i287"
                                                            "i285"
                                                            "i283"
                                                            "i281"
                                                            "i279"
                                                            "i277"
                                                            "i275"
                                                            "i273"
                                                            "i271"
                                                            "i269"
                                                            "i267"
                                                            "i265"
                                                            "i263"
                                                            "i261"
                                                            "i260"
                                                            "i257"
                                                            "i255"
                                                            "i254"
                                                            "i253"
                                                            "i252"
                                                            "i251"
                                                            "i249"
                                                            "i247"
                                                            "i245"
                                                            "i242"
                                                            "i240"
                                                            "i238"
                                                            "i236"
                                                            "i234"
                                                            "i232"
                                                            "i230"
                                                            "i228"
                                                            "i226"
                                                            "i224"
                                                            "i222"
                                                            "i220"
                                                            "i218"
                                                            "i216"
                                                            "i214"
                                                            "i212"
                                                            "i210"
                                                            "i208"))
                                                         #(ribcage
                                                           (define-structure
                                                             define-expansion-accessors
                                                             define-expansion-constructors)
                                                           ((top) (top) (top))
                                                           ("i46"
                                                            "i45"
                                                            "i44")))
                                                        (hygiene guile)))
                                                   4)
                                              #t
                                              #f)
                                          '_
                                          '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(pat exp)
                                                #((top) (top))
                                                #("i3932" "i3933"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x keys clauses r mod)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i3921"
                                                  "i3922"
                                                  "i3923"
                                                  "i3924"
                                                  "i3925"))
                                              #(ribcage
                                                (gen-syntax-case
                                                  gen-clause
                                                  build-dispatch-call
                                                  convert-pattern)
                                                ((top) (top) (top) (top))
                                                ("i3731"
                                                 "i3729"
                                                 "i3727"
                                                 "i3725"))
                                              #(ribcage
                                                (lambda-var-list
                                                  gen-var
                                                  strip
                                                  chi-lambda-case
                                                  lambda*-formals
                                                  chi-simple-lambda
                                                  lambda-formals
                                                  ellipsis?
                                                  chi-void
                                                  eval-local-transformer
                                                  chi-local-syntax
                                                  chi-body
                                                  chi-macro
                                                  chi-application
                                                  chi-expr
                                                  chi
                                                  syntax-type
                                                  chi-when-list
                                                  chi-install-global
                                                  chi-top-sequence
                                                  chi-sequence
                                                  source-wrap
                                                  wrap
                                                  bound-id-member?
                                                  distinct-bound-ids?
                                                  valid-bound-ids?
                                                  bound-id=?
                                                  free-id=?
                                                  id-var-name
                                                  same-marks?
                                                  join-marks
                                                  join-wraps
                                                  smart-append
                                                  make-binding-wrap
                                                  extend-ribcage!
                                                  make-empty-ribcage
                                                  new-mark
                                                  anti-mark
                                                  the-anti-mark
                                                  top-marked?
                                                  top-wrap
                                                  empty-wrap
                                                  set-ribcage-labels!
                                                  set-ribcage-marks!
                                                  set-ribcage-symnames!
                                                  ribcage-labels
                                                  ribcage-marks
                                                  ribcage-symnames
                                                  ribcage?
                                                  make-ribcage
                                                  gen-labels
                                                  gen-label
                                                  make-rename
                                                  rename-marks
                                                  rename-new
                                                  rename-old
                                                  subst-rename?
                                                  wrap-subst
                                                  wrap-marks
                                                  make-wrap
                                                  id-sym-name&marks
                                                  id-sym-name
                                                  id?
                                                  nonsymbol-id?
                                                  global-extend
                                                  lookup
                                                  macros-only-env
                                                  extend-var-env
                                                  extend-env
                                                  null-env
                                                  binding-value
                                                  binding-type
                                                  make-binding
                                                  arg-check
                                                  source-annotation
                                                  no-source
                                                  set-syntax-object-module!
                                                  set-syntax-object-wrap!
                                                  set-syntax-object-expression!
                                                  syntax-object-module
                                                  syntax-object-wrap
                                                  syntax-object-expression
                                                  syntax-object?
                                                  make-syntax-object
                                                  build-lexical-var
                                                  build-letrec
                                                  build-named-let
                                                  build-let
                                                  build-sequence
                                                  build-data
                                                  build-primref
                                                  build-lambda-case
                                                  build-case-lambda
                                                  build-simple-lambda
                                                  build-global-definition
                                                  build-global-assignment
                                                  build-global-reference
                                                  analyze-variable
                                                  build-lexical-assignment
                                                  build-lexical-reference
                                                  build-dynlet
                                                  build-conditional
                                                  build-application
                                                  build-void
                                                  maybe-name-value!
                                                  decorate-source
                                                  get-global-definition-hook
                                                  put-global-definition-hook
                                                  gensym-hook
                                                  local-eval-hook
                                                  top-level-eval-hook
                                                  fx<
                                                  fx=
                                                  fx-
                                                  fx+
                                                  set-lambda-meta!
                                                  lambda-meta
                                                  lambda?
                                                  make-dynlet
                                                  make-letrec
                                                  make-let
                                                  make-lambda-case
                                                  make-lambda
                                                  make-sequence
                                                  make-application
                                                  make-conditional
                                                  make-toplevel-define
                                                  make-toplevel-set
                                                  make-toplevel-ref
                                                  make-module-set
                                                  make-module-ref
                                                  make-lexical-set
                                                  make-lexical-ref
                                                  make-primitive-ref
                                                  make-const
                                                  make-void)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i467"
                                                 "i465"
                                                 "i463"
                                                 "i461"
                                                 "i459"
                                                 "i457"
                                                 "i455"
                                                 "i453"
                                                 "i451"
                                                 "i449"
                                                 "i447"
                                                 "i445"
                                                 "i443"
                                                 "i441"
                                                 "i439"
                                                 "i437"
                                                 "i435"
                                                 "i433"
                                                 "i431"
                                                 "i429"
                                                 "i427"
                                                 "i425"
                                                 "i423"
                                                 "i421"
                                                 "i419"
                                                 "i417"
                                                 "i415"
                                                 "i413"
                                                 "i411"
                                                 "i409"
                                                 "i407"
                                                 "i405"
                                                 "i403"
                                                 "i401"
                                                 "i399"
                                                 "i398"
                                                 "i396"
                                                 "i393"
                                                 "i392"
                                                 "i391"
                                                 "i389"
                                                 "i388"
                                                 "i386"
                                                 "i384"
                                                 "i382"
                                                 "i380"
                                                 "i378"
                                                 "i376"
                                                 "i374"
                                                 "i372"
                                                 "i369"
                                                 "i367"
                                                 "i366"
                                                 "i364"
                                                 "i362"
                                                 "i360"
                                                 "i358"
                                                 "i357"
                                                 "i356"
                                                 "i355"
                                                 "i353"
                                                 "i352"
                                                 "i349"
                                                 "i347"
                                                 "i345"
                                                 "i343"
                                                 "i341"
                                                 "i339"
                                                 "i337"
                                                 "i336"
                                                 "i335"
                                                 "i333"
                                                 "i331"
                                                 "i330"
                                                 "i327"
                                                 "i326"
                                                 "i324"
                                                 "i322"
                                                 "i320"
                                                 "i318"
                                                 "i316"
                                                 "i314"
                                                 "i312"
                                                 "i310"
                                                 "i308"
                                                 "i305"
                                                 "i303"
                                                 "i301"
                                                 "i299"
                                                 "i297"
                                                 "i295"
                                                 "i293"
                                                 "i291"
                                                 "i289"
                                                 "i287"
                                                 "i285"
                                                 "i283"
                                                 "i281"
                                                 "i279"
                                                 "i277"
                                                 "i275"
                                                 "i273"
                                                 "i271"
                                                 "i269"
                                                 "i267"
                                                 "i265"
                                                 "i263"
                                                 "i261"
                                                 "i260"
                                                 "i257"
                                                 "i255"
                                                 "i254"
                                                 "i253"
                                                 "i252"
                                                 "i251"
                                                 "i249"
                                                 "i247"
                                                 "i245"
                                                 "i242"
                                                 "i240"
                                                 "i238"
                                                 "i236"
                                                 "i234"
                                                 "i232"
                                                 "i230"
                                                 "i228"
                                                 "i226"
                                                 "i224"
                                                 "i222"
                                                 "i220"
                                                 "i218"
                                                 "i216"
                                                 "i214"
                                                 "i212"
                                                 "i210"
                                                 "i208"))
                                              #(ribcage
                                                (define-structure
                                                  define-expansion-accessors
                                                  define-expansion-constructors)
                                                ((top) (top) (top))
                                                ("i46" "i45" "i44")))
                                             (hygiene guile))))
                                 (eq? (#{id-var-name 4353}#
                                        '#(syntax-object
                                           pad
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3932" "i3933"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3921"
                                                "i3922"
                                                "i3923"
                                                "i3924"
                                                "i3925"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3731"
                                               "i3729"
                                               "i3727"
                                               "i3725"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(()))
                                      (#{id-var-name 4353}#
                                        '#(syntax-object
                                           _
                                           ((top)
                                            #(ribcage
                                              #(pat exp)
                                              #((top) (top))
                                              #("i3932" "i3933"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x keys clauses r mod)
                                              #((top) (top) (top) (top) (top))
                                              #("i3921"
                                                "i3922"
                                                "i3923"
                                                "i3924"
                                                "i3925"))
                                            #(ribcage
                                              (gen-syntax-case
                                                gen-clause
                                                build-dispatch-call
                                                convert-pattern)
                                              ((top) (top) (top) (top))
                                              ("i3731"
                                               "i3729"
                                               "i3727"
                                               "i3725"))
                                            #(ribcage
                                              (lambda-var-list
                                                gen-var
                                                strip
                                                chi-lambda-case
                                                lambda*-formals
                                                chi-simple-lambda
                                                lambda-formals
                                                ellipsis?
                                                chi-void
                                                eval-local-transformer
                                                chi-local-syntax
                                                chi-body
                                                chi-macro
                                                chi-application
                                                chi-expr
                                                chi
                                                syntax-type
                                                chi-when-list
                                                chi-install-global
                                                chi-top-sequence
                                                chi-sequence
                                                source-wrap
                                                wrap
                                                bound-id-member?
                                                distinct-bound-ids?
                                                valid-bound-ids?
                                                bound-id=?
                                                free-id=?
                                                id-var-name
                                                same-marks?
                                                join-marks
                                                join-wraps
                                                smart-append
                                                make-binding-wrap
                                                extend-ribcage!
                                                make-empty-ribcage
                                                new-mark
                                                anti-mark
                                                the-anti-mark
                                                top-marked?
                                                top-wrap
                                                empty-wrap
                                                set-ribcage-labels!
                                                set-ribcage-marks!
                                                set-ribcage-symnames!
                                                ribcage-labels
                                                ribcage-marks
                                                ribcage-symnames
                                                ribcage?
                                                make-ribcage
                                                gen-labels
                                                gen-label
                                                make-rename
                                                rename-marks
                                                rename-new
                                                rename-old
                                                subst-rename?
                                                wrap-subst
                                                wrap-marks
                                                make-wrap
                                                id-sym-name&marks
                                                id-sym-name
                                                id?
                                                nonsymbol-id?
                                                global-extend
                                                lookup
                                                macros-only-env
                                                extend-var-env
                                                extend-env
                                                null-env
                                                binding-value
                                                binding-type
                                                make-binding
                                                arg-check
                                                source-annotation
                                                no-source
                                                set-syntax-object-module!
                                                set-syntax-object-wrap!
                                                set-syntax-object-expression!
                                                syntax-object-module
                                                syntax-object-wrap
                                                syntax-object-expression
                                                syntax-object?
                                                make-syntax-object
                                                build-lexical-var
                                                build-letrec
                                                build-named-let
                                                build-let
                                                build-sequence
                                                build-data
                                                build-primref
                                                build-lambda-case
                                                build-case-lambda
                                                build-simple-lambda
                                                build-global-definition
                                                build-global-assignment
                                                build-global-reference
                                                analyze-variable
                                                build-lexical-assignment
                                                build-lexical-reference
                                                build-dynlet
                                                build-conditional
                                                build-application
                                                build-void
                                                maybe-name-value!
                                                decorate-source
                                                get-global-definition-hook
                                                put-global-definition-hook
                                                gensym-hook
                                                local-eval-hook
                                                top-level-eval-hook
                                                fx<
                                                fx=
                                                fx-
                                                fx+
                                                set-lambda-meta!
                                                lambda-meta
                                                lambda?
                                                make-dynlet
                                                make-letrec
                                                make-let
                                                make-lambda-case
                                                make-lambda
                                                make-sequence
                                                make-application
                                                make-conditional
                                                make-toplevel-define
                                                make-toplevel-set
                                                make-toplevel-ref
                                                make-module-set
                                                make-module-ref
                                                make-lexical-set
                                                make-lexical-ref
                                                make-primitive-ref
                                                make-const
                                                make-void)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i467"
                                               "i465"
                                               "i463"
                                               "i461"
                                               "i459"
                                               "i457"
                                               "i455"
                                               "i453"
                                               "i451"
                                               "i449"
                                               "i447"
                                               "i445"
                                               "i443"
                                               "i441"
                                               "i439"
                                               "i437"
                                               "i435"
                                               "i433"
                                               "i431"
                                               "i429"
                                               "i427"
                                               "i425"
                                               "i423"
                                               "i421"
                                               "i419"
                                               "i417"
                                               "i415"
                                               "i413"
                                               "i411"
                                               "i409"
                                               "i407"
                                               "i405"
                                               "i403"
                                               "i401"
                                               "i399"
                                               "i398"
                                               "i396"
                                               "i393"
                                               "i392"
                                               "i391"
                                               "i389"
                                               "i388"
                                               "i386"
                                               "i384"
                                               "i382"
                                               "i380"
                                               "i378"
                                               "i376"
                                               "i374"
                                               "i372"
                                               "i369"
                                               "i367"
                                               "i366"
                                               "i364"
                                               "i362"
                                               "i360"
                                               "i358"
                                               "i357"
                                               "i356"
                                               "i355"
                                               "i353"
                                               "i352"
                                               "i349"
                                               "i347"
                                               "i345"
                                               "i343"
                                               "i341"
                                               "i339"
                                               "i337"
                                               "i336"
                                               "i335"
                                               "i333"
                                               "i331"
                                               "i330"
                                               "i327"
                                               "i326"
                                               "i324"
                                               "i322"
                                               "i320"
                                               "i318"
                                               "i316"
                                               "i314"
                                               "i312"
                                               "i310"
                                               "i308"
                                               "i305"
                                               "i303"
                                               "i301"
                                               "i299"
                                               "i297"
                                               "i295"
                                               "i293"
                                               "i291"
                                               "i289"
                                               "i287"
                                               "i285"
                                               "i283"
                                               "i281"
                                               "i279"
                                               "i277"
                                               "i275"
                                               "i273"
                                               "i271"
                                               "i269"
                                               "i267"
                                               "i265"
                                               "i263"
                                               "i261"
                                               "i260"
                                               "i257"
                                               "i255"
                                               "i254"
                                               "i253"
                                               "i252"
                                               "i251"
                                               "i249"
                                               "i247"
                                               "i245"
                                               "i242"
                                               "i240"
                                               "i238"
                                               "i236"
                                               "i234"
                                               "i232"
                                               "i230"
                                               "i228"
                                               "i226"
                                               "i224"
                                               "i222"
                                               "i220"
                                               "i218"
                                               "i216"
                                               "i214"
                                               "i212"
                                               "i210"
                                               "i208"))
                                            #(ribcage
                                              (define-structure
                                                define-expansion-accessors
                                                define-expansion-constructors)
                                              ((top) (top) (top))
                                              ("i46" "i45" "i44")))
                                           (hygiene guile))
                                        '(())))
                                 #f)
                             (#{chi 4366}#
                               #{exp 12634}#
                               #{r 12590}#
                               '(())
                               #{mod 12591}#)
                             (let ((#{labels 12842}#
                                     (list (symbol->string (gensym "i"))))
                                   (#{var 12843}#
                                     (let ((#{id 12881}#
                                             (if (if (vector? #{pat 12633}#)
                                                   (if (= (vector-length
                                                            #{pat 12633}#)
                                                          4)
                                                     (eq? (vector-ref
                                                            #{pat 12633}#
                                                            0)
                                                          'syntax-object)
                                                     #f)
                                                   #f)
                                               (vector-ref #{pat 12633}# 1)
                                               #{pat 12633}#)))
                                       (gensym
                                         (string-append
                                           (symbol->string #{id 12881}#)
                                           " ")))))
                               (#{build-application 4301}#
                                 #f
                                 (#{build-simple-lambda 4310}#
                                   #f
                                   (list (syntax->datum #{pat 12633}#))
                                   #f
                                   (list #{var 12843}#)
                                   '()
                                   (#{chi 4366}#
                                     #{exp 12634}#
                                     (#{extend-env 4328}#
                                       #{labels 12842}#
                                       (list (cons 'syntax
                                                   (cons #{var 12843}# 0)))
                                       #{r 12590}#)
                                     (#{make-binding-wrap 4348}#
                                       (list #{pat 12633}#)
                                       #{labels 12842}#
                                       '(()))
                                     #{mod 12591}#))
                                 (list #{x 12587}#))))
                           (#{gen-clause 12177}#
                             #{x 12587}#
                             #{keys 12588}#
                             (cdr #{clauses 12589}#)
                             #{r 12590}#
                             #{pat 12633}#
                             #t
                             #{exp 12634}#
                             #{mod 12591}#)))
                       #{tmp 12631}#)
                     (let ((#{tmp 13151}#
                             ($sc-dispatch #{tmp 12630}# '(any any any))))
                       (if #{tmp 13151}#
                         (@apply
                           (lambda (#{pat 13153}#
                                    #{fender 13154}#
                                    #{exp 13155}#)
                             (#{gen-clause 12177}#
                               #{x 12587}#
                               #{keys 12588}#
                               (cdr #{clauses 12589}#)
                               #{r 12590}#
                               #{pat 13153}#
                               #{fender 13154}#
                               #{exp 13155}#
                               #{mod 12591}#))
                           #{tmp 13151}#)
                         (syntax-violation
                           'syntax-case
                           "invalid clause"
                           (car #{clauses 12589}#)))))))))))
        (lambda (#{e 12179}#
                 #{r 12180}#
                 #{w 12181}#
                 #{s 12182}#
                 #{mod 12183}#)
          (let ((#{e 12184}#
                  (#{wrap 4359}#
                    (begin
                      (if (if (pair? #{e 12179}#) #{s 12182}# #f)
                        (set-source-properties! #{e 12179}# #{s 12182}#))
                      #{e 12179}#)
                    #{w 12181}#
                    #{mod 12183}#)))
            (let ((#{tmp 12186}#
                    ($sc-dispatch
                      #{e 12184}#
                      '(_ any each-any . each-any))))
              (if #{tmp 12186}#
                (@apply
                  (lambda (#{val 12211}# #{key 12212}# #{m 12213}#)
                    (if (and-map
                          (lambda (#{x 12214}#)
                            (if (if (symbol? #{x 12214}#)
                                  #t
                                  (if (if (vector? #{x 12214}#)
                                        (if (= (vector-length #{x 12214}#) 4)
                                          (eq? (vector-ref #{x 12214}# 0)
                                               'syntax-object)
                                          #f)
                                        #f)
                                    (symbol? (vector-ref #{x 12214}# 1))
                                    #f))
                              (not (if (if (if (vector? #{x 12214}#)
                                             (if (= (vector-length #{x 12214}#)
                                                    4)
                                               (eq? (vector-ref #{x 12214}# 0)
                                                    'syntax-object)
                                               #f)
                                             #f)
                                         (symbol? (vector-ref #{x 12214}# 1))
                                         #f)
                                     (if (eq? (if (if (vector? #{x 12214}#)
                                                    (if (= (vector-length
                                                             #{x 12214}#)
                                                           4)
                                                      (eq? (vector-ref
                                                             #{x 12214}#
                                                             0)
                                                           'syntax-object)
                                                      #f)
                                                    #f)
                                                (vector-ref #{x 12214}# 1)
                                                #{x 12214}#)
                                              (if (if (= (vector-length
                                                           '#(syntax-object
                                                              ...
                                                              ((top)
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i2251"))
                                                               #(ribcage
                                                                 (lambda-var-list
                                                                   gen-var
                                                                   strip
                                                                   chi-lambda-case
                                                                   lambda*-formals
                                                                   chi-simple-lambda
                                                                   lambda-formals
                                                                   ellipsis?
                                                                   chi-void
                                                                   eval-local-transformer
                                                                   chi-local-syntax
                                                                   chi-body
                                                                   chi-macro
                                                                   chi-application
                                                                   chi-expr
                                                                   chi
                                                                   syntax-type
                                                                   chi-when-list
                                                                   chi-install-global
                                                                   chi-top-sequence
                                                                   chi-sequence
                                                                   source-wrap
                                                                   wrap
                                                                   bound-id-member?
                                                                   distinct-bound-ids?
                                                                   valid-bound-ids?
                                                                   bound-id=?
                                                                   free-id=?
                                                                   id-var-name
                                                                   same-marks?
                                                                   join-marks
                                                                   join-wraps
                                                                   smart-append
                                                                   make-binding-wrap
                                                                   extend-ribcage!
                                                                   make-empty-ribcage
                                                                   new-mark
                                                                   anti-mark
                                                                   the-anti-mark
                                                                   top-marked?
                                                                   top-wrap
                                                                   empty-wrap
                                                                   set-ribcage-labels!
                                                                   set-ribcage-marks!
                                                                   set-ribcage-symnames!
                                                                   ribcage-labels
                                                                   ribcage-marks
                                                                   ribcage-symnames
                                                                   ribcage?
                                                                   make-ribcage
                                                                   gen-labels
                                                                   gen-label
                                                                   make-rename
                                                                   rename-marks
                                                                   rename-new
                                                                   rename-old
                                                                   subst-rename?
                                                                   wrap-subst
                                                                   wrap-marks
                                                                   make-wrap
                                                                   id-sym-name&marks
                                                                   id-sym-name
                                                                   id?
                                                                   nonsymbol-id?
                                                                   global-extend
                                                                   lookup
                                                                   macros-only-env
                                                                   extend-var-env
                                                                   extend-env
                                                                   null-env
                                                                   binding-value
                                                                   binding-type
                                                                   make-binding
                                                                   arg-check
                                                                   source-annotation
                                                                   no-source
                                                                   set-syntax-object-module!
                                                                   set-syntax-object-wrap!
                                                                   set-syntax-object-expression!
                                                                   syntax-object-module
                                                                   syntax-object-wrap
                                                                   syntax-object-expression
                                                                   syntax-object?
                                                                   make-syntax-object
                                                                   build-lexical-var
                                                                   build-letrec
                                                                   build-named-let
                                                                   build-let
                                                                   build-sequence
                                                                   build-data
                                                                   build-primref
                                                                   build-lambda-case
                                                                   build-case-lambda
                                                                   build-simple-lambda
                                                                   build-global-definition
                                                                   build-global-assignment
                                                                   build-global-reference
                                                                   analyze-variable
                                                                   build-lexical-assignment
                                                                   build-lexical-reference
                                                                   build-dynlet
                                                                   build-conditional
                                                                   build-application
                                                                   build-void
                                                                   maybe-name-value!
                                                                   decorate-source
                                                                   get-global-definition-hook
                                                                   put-global-definition-hook
                                                                   gensym-hook
                                                                   local-eval-hook
                                                                   top-level-eval-hook
                                                                   fx<
                                                                   fx=
                                                                   fx-
                                                                   fx+
                                                                   set-lambda-meta!
                                                                   lambda-meta
                                                                   lambda?
                                                                   make-dynlet
                                                                   make-letrec
                                                                   make-let
                                                                   make-lambda-case
                                                                   make-lambda
                                                                   make-sequence
                                                                   make-application
                                                                   make-conditional
                                                                   make-toplevel-define
                                                                   make-toplevel-set
                                                                   make-toplevel-ref
                                                                   make-module-set
                                                                   make-module-ref
                                                                   make-lexical-set
                                                                   make-lexical-ref
                                                                   make-primitive-ref
                                                                   make-const
                                                                   make-void)
                                                                 ((top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top)
                                                                  (top))
                                                                 ("i467"
                                                                  "i465"
                                                                  "i463"
                                                                  "i461"
                                                                  "i459"
                                                                  "i457"
                                                                  "i455"
                                                                  "i453"
                                                                  "i451"
                                                                  "i449"
                                                                  "i447"
                                                                  "i445"
                                                                  "i443"
                                                                  "i441"
                                                                  "i439"
                                                                  "i437"
                                                                  "i435"
                                                                  "i433"
                                                                  "i431"
                                                                  "i429"
                                                                  "i427"
                                                                  "i425"
                                                                  "i423"
                                                                  "i421"
                                                                  "i419"
                                                                  "i417"
                                                                  "i415"
                                                                  "i413"
                                                                  "i411"
                                                                  "i409"
                                                                  "i407"
                                                                  "i405"
                                                                  "i403"
                                                                  "i401"
                                                                  "i399"
                                                                  "i398"
                                                                  "i396"
                                                                  "i393"
                                                                  "i392"
                                                                  "i391"
                                                                  "i389"
                                                                  "i388"
                                                                  "i386"
                                                                  "i384"
                                                                  "i382"
                                                                  "i380"
                                                                  "i378"
                                                                  "i376"
                                                                  "i374"
                                                                  "i372"
                                                                  "i369"
                                                                  "i367"
                                                                  "i366"
                                                                  "i364"
                                                                  "i362"
                                                                  "i360"
                                                                  "i358"
                                                                  "i357"
                                                                  "i356"
                                                                  "i355"
                                                                  "i353"
                                                                  "i352"
                                                                  "i349"
                                                                  "i347"
                                                                  "i345"
                                                                  "i343"
                                                                  "i341"
                                                                  "i339"
                                                                  "i337"
                                                                  "i336"
                                                                  "i335"
                                                                  "i333"
                                                                  "i331"
                                                                  "i330"
                                                                  "i327"
                                                                  "i326"
                                                                  "i324"
                                                                  "i322"
                                                                  "i320"
                                                                  "i318"
                                                                  "i316"
                                                                  "i314"
                                                                  "i312"
                                                                  "i310"
                                                                  "i308"
                                                                  "i305"
                                                                  "i303"
                                                                  "i301"
                                                                  "i299"
                                                                  "i297"
                                                                  "i295"
                                                                  "i293"
                                                                  "i291"
                                                                  "i289"
                                                                  "i287"
                                                                  "i285"
                                                                  "i283"
                                                                  "i281"
                                                                  "i279"
                                                                  "i277"
                                                                  "i275"
                                                                  "i273"
                                                                  "i271"
                                                                  "i269"
                                                                  "i267"
                                                                  "i265"
                                                                  "i263"
                                                                  "i261"
                                                                  "i260"
                                                                  "i257"
                                                                  "i255"
                                                                  "i254"
                                                                  "i253"
                                                                  "i252"
                                                                  "i251"
                                                                  "i249"
                                                                  "i247"
                                                                  "i245"
                                                                  "i242"
                                                                  "i240"
                                                                  "i238"
                                                                  "i236"
                                                                  "i234"
                                                                  "i232"
                                                                  "i230"
                                                                  "i228"
                                                                  "i226"
                                                                  "i224"
                                                                  "i222"
                                                                  "i220"
                                                                  "i218"
                                                                  "i216"
                                                                  "i214"
                                                                  "i212"
                                                                  "i210"
                                                                  "i208"))
                                                               #(ribcage
                                                                 (define-structure
                                                                   define-expansion-accessors
                                                                   define-expansion-constructors)
                                                                 ((top)
                                                                  (top)
                                                                  (top))
                                                                 ("i46"
                                                                  "i45"
                                                                  "i44")))
                                                              (hygiene guile)))
                                                         4)
                                                    #t
                                                    #f)
                                                '...
                                                '#(syntax-object
                                                   ...
                                                   ((top)
                                                    #(ribcage () () ())
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i2251"))
                                                    #(ribcage
                                                      (lambda-var-list
                                                        gen-var
                                                        strip
                                                        chi-lambda-case
                                                        lambda*-formals
                                                        chi-simple-lambda
                                                        lambda-formals
                                                        ellipsis?
                                                        chi-void
                                                        eval-local-transformer
                                                        chi-local-syntax
                                                        chi-body
                                                        chi-macro
                                                        chi-application
                                                        chi-expr
                                                        chi
                                                        syntax-type
                                                        chi-when-list
                                                        chi-install-global
                                                        chi-top-sequence
                                                        chi-sequence
                                                        source-wrap
                                                        wrap
                                                        bound-id-member?
                                                        distinct-bound-ids?
                                                        valid-bound-ids?
                                                        bound-id=?
                                                        free-id=?
                                                        id-var-name
                                                        same-marks?
                                                        join-marks
                                                        join-wraps
                                                        smart-append
                                                        make-binding-wrap
                                                        extend-ribcage!
                                                        make-empty-ribcage
                                                        new-mark
                                                        anti-mark
                                                        the-anti-mark
                                                        top-marked?
                                                        top-wrap
                                                        empty-wrap
                                                        set-ribcage-labels!
                                                        set-ribcage-marks!
                                                        set-ribcage-symnames!
                                                        ribcage-labels
                                                        ribcage-marks
                                                        ribcage-symnames
                                                        ribcage?
                                                        make-ribcage
                                                        gen-labels
                                                        gen-label
                                                        make-rename
                                                        rename-marks
                                                        rename-new
                                                        rename-old
                                                        subst-rename?
                                                        wrap-subst
                                                        wrap-marks
                                                        make-wrap
                                                        id-sym-name&marks
                                                        id-sym-name
                                                        id?
                                                        nonsymbol-id?
                                                        global-extend
                                                        lookup
                                                        macros-only-env
                                                        extend-var-env
                                                        extend-env
                                                        null-env
                                                        binding-value
                                                        binding-type
                                                        make-binding
                                                        arg-check
                                                        source-annotation
                                                        no-source
                                                        set-syntax-object-module!
                                                        set-syntax-object-wrap!
                                                        set-syntax-object-expression!
                                                        syntax-object-module
                                                        syntax-object-wrap
                                                        syntax-object-expression
                                                        syntax-object?
                                                        make-syntax-object
                                                        build-lexical-var
                                                        build-letrec
                                                        build-named-let
                                                        build-let
                                                        build-sequence
                                                        build-data
                                                        build-primref
                                                        build-lambda-case
                                                        build-case-lambda
                                                        build-simple-lambda
                                                        build-global-definition
                                                        build-global-assignment
                                                        build-global-reference
                                                        analyze-variable
                                                        build-lexical-assignment
                                                        build-lexical-reference
                                                        build-dynlet
                                                        build-conditional
                                                        build-application
                                                        build-void
                                                        maybe-name-value!
                                                        decorate-source
                                                        get-global-definition-hook
                                                        put-global-definition-hook
                                                        gensym-hook
                                                        local-eval-hook
                                                        top-level-eval-hook
                                                        fx<
                                                        fx=
                                                        fx-
                                                        fx+
                                                        set-lambda-meta!
                                                        lambda-meta
                                                        lambda?
                                                        make-dynlet
                                                        make-letrec
                                                        make-let
                                                        make-lambda-case
                                                        make-lambda
                                                        make-sequence
                                                        make-application
                                                        make-conditional
                                                        make-toplevel-define
                                                        make-toplevel-set
                                                        make-toplevel-ref
                                                        make-module-set
                                                        make-module-ref
                                                        make-lexical-set
                                                        make-lexical-ref
                                                        make-primitive-ref
                                                        make-const
                                                        make-void)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i467"
                                                       "i465"
                                                       "i463"
                                                       "i461"
                                                       "i459"
                                                       "i457"
                                                       "i455"
                                                       "i453"
                                                       "i451"
                                                       "i449"
                                                       "i447"
                                                       "i445"
                                                       "i443"
                                                       "i441"
                                                       "i439"
                                                       "i437"
                                                       "i435"
                                                       "i433"
                                                       "i431"
                                                       "i429"
                                                       "i427"
                                                       "i425"
                                                       "i423"
                                                       "i421"
                                                       "i419"
                                                       "i417"
                                                       "i415"
                                                       "i413"
                                                       "i411"
                                                       "i409"
                                                       "i407"
                                                       "i405"
                                                       "i403"
                                                       "i401"
                                                       "i399"
                                                       "i398"
                                                       "i396"
                                                       "i393"
                                                       "i392"
                                                       "i391"
                                                       "i389"
                                                       "i388"
                                                       "i386"
                                                       "i384"
                                                       "i382"
                                                       "i380"
                                                       "i378"
                                                       "i376"
                                                       "i374"
                                                       "i372"
                                                       "i369"
                                                       "i367"
                                                       "i366"
                                                       "i364"
                                                       "i362"
                                                       "i360"
                                                       "i358"
                                                       "i357"
                                                       "i356"
                                                       "i355"
                                                       "i353"
                                                       "i352"
                                                       "i349"
                                                       "i347"
                                                       "i345"
                                                       "i343"
                                                       "i341"
                                                       "i339"
                                                       "i337"
                                                       "i336"
                                                       "i335"
                                                       "i333"
                                                       "i331"
                                                       "i330"
                                                       "i327"
                                                       "i326"
                                                       "i324"
                                                       "i322"
                                                       "i320"
                                                       "i318"
                                                       "i316"
                                                       "i314"
                                                       "i312"
                                                       "i310"
                                                       "i308"
                                                       "i305"
                                                       "i303"
                                                       "i301"
                                                       "i299"
                                                       "i297"
                                                       "i295"
                                                       "i293"
                                                       "i291"
                                                       "i289"
                                                       "i287"
                                                       "i285"
                                                       "i283"
                                                       "i281"
                                                       "i279"
                                                       "i277"
                                                       "i275"
                                                       "i273"
                                                       "i271"
                                                       "i269"
                                                       "i267"
                                                       "i265"
                                                       "i263"
                                                       "i261"
                                                       "i260"
                                                       "i257"
                                                       "i255"
                                                       "i254"
                                                       "i253"
                                                       "i252"
                                                       "i251"
                                                       "i249"
                                                       "i247"
                                                       "i245"
                                                       "i242"
                                                       "i240"
                                                       "i238"
                                                       "i236"
                                                       "i234"
                                                       "i232"
                                                       "i230"
                                                       "i228"
                                                       "i226"
                                                       "i224"
                                                       "i222"
                                                       "i220"
                                                       "i218"
                                                       "i216"
                                                       "i214"
                                                       "i212"
                                                       "i210"
                                                       "i208"))
                                                    #(ribcage
                                                      (define-structure
                                                        define-expansion-accessors
                                                        define-expansion-constructors)
                                                      ((top) (top) (top))
                                                      ("i46" "i45" "i44")))
                                                   (hygiene guile))))
                                       (eq? (#{id-var-name 4353}#
                                              #{x 12214}#
                                              '(()))
                                            (#{id-var-name 4353}#
                                              '#(syntax-object
                                                 ...
                                                 ((top)
                                                  #(ribcage () () ())
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(x)
                                                    #((top))
                                                    #("i2251"))
                                                  #(ribcage
                                                    (lambda-var-list
                                                      gen-var
                                                      strip
                                                      chi-lambda-case
                                                      lambda*-formals
                                                      chi-simple-lambda
                                                      lambda-formals
                                                      ellipsis?
                                                      chi-void
                                                      eval-local-transformer
                                                      chi-local-syntax
                                                      chi-body
                                                      chi-macro
                                                      chi-application
                                                      chi-expr
                                                      chi
                                                      syntax-type
                                                      chi-when-list
                                                      chi-install-global
                                                      chi-top-sequence
                                                      chi-sequence
                                                      source-wrap
                                                      wrap
                                                      bound-id-member?
                                                      distinct-bound-ids?
                                                      valid-bound-ids?
                                                      bound-id=?
                                                      free-id=?
                                                      id-var-name
                                                      same-marks?
                                                      join-marks
                                                      join-wraps
                                                      smart-append
                                                      make-binding-wrap
                                                      extend-ribcage!
                                                      make-empty-ribcage
                                                      new-mark
                                                      anti-mark
                                                      the-anti-mark
                                                      top-marked?
                                                      top-wrap
                                                      empty-wrap
                                                      set-ribcage-labels!
                                                      set-ribcage-marks!
                                                      set-ribcage-symnames!
                                                      ribcage-labels
                                                      ribcage-marks
                                                      ribcage-symnames
                                                      ribcage?
                                                      make-ribcage
                                                      gen-labels
                                                      gen-label
                                                      make-rename
                                                      rename-marks
                                                      rename-new
                                                      rename-old
                                                      subst-rename?
                                                      wrap-subst
                                                      wrap-marks
                                                      make-wrap
                                                      id-sym-name&marks
                                                      id-sym-name
                                                      id?
                                                      nonsymbol-id?
                                                      global-extend
                                                      lookup
                                                      macros-only-env
                                                      extend-var-env
                                                      extend-env
                                                      null-env
                                                      binding-value
                                                      binding-type
                                                      make-binding
                                                      arg-check
                                                      source-annotation
                                                      no-source
                                                      set-syntax-object-module!
                                                      set-syntax-object-wrap!
                                                      set-syntax-object-expression!
                                                      syntax-object-module
                                                      syntax-object-wrap
                                                      syntax-object-expression
                                                      syntax-object?
                                                      make-syntax-object
                                                      build-lexical-var
                                                      build-letrec
                                                      build-named-let
                                                      build-let
                                                      build-sequence
                                                      build-data
                                                      build-primref
                                                      build-lambda-case
                                                      build-case-lambda
                                                      build-simple-lambda
                                                      build-global-definition
                                                      build-global-assignment
                                                      build-global-reference
                                                      analyze-variable
                                                      build-lexical-assignment
                                                      build-lexical-reference
                                                      build-dynlet
                                                      build-conditional
                                                      build-application
                                                      build-void
                                                      maybe-name-value!
                                                      decorate-source
                                                      get-global-definition-hook
                                                      put-global-definition-hook
                                                      gensym-hook
                                                      local-eval-hook
                                                      top-level-eval-hook
                                                      fx<
                                                      fx=
                                                      fx-
                                                      fx+
                                                      set-lambda-meta!
                                                      lambda-meta
                                                      lambda?
                                                      make-dynlet
                                                      make-letrec
                                                      make-let
                                                      make-lambda-case
                                                      make-lambda
                                                      make-sequence
                                                      make-application
                                                      make-conditional
                                                      make-toplevel-define
                                                      make-toplevel-set
                                                      make-toplevel-ref
                                                      make-module-set
                                                      make-module-ref
                                                      make-lexical-set
                                                      make-lexical-ref
                                                      make-primitive-ref
                                                      make-const
                                                      make-void)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i467"
                                                     "i465"
                                                     "i463"
                                                     "i461"
                                                     "i459"
                                                     "i457"
                                                     "i455"
                                                     "i453"
                                                     "i451"
                                                     "i449"
                                                     "i447"
                                                     "i445"
                                                     "i443"
                                                     "i441"
                                                     "i439"
                                                     "i437"
                                                     "i435"
                                                     "i433"
                                                     "i431"
                                                     "i429"
                                                     "i427"
                                                     "i425"
                                                     "i423"
                                                     "i421"
                                                     "i419"
                                                     "i417"
                                                     "i415"
                                                     "i413"
                                                     "i411"
                                                     "i409"
                                                     "i407"
                                                     "i405"
                                                     "i403"
                                                     "i401"
                                                     "i399"
                                                     "i398"
                                                     "i396"
                                                     "i393"
                                                     "i392"
                                                     "i391"
                                                     "i389"
                                                     "i388"
                                                     "i386"
                                                     "i384"
                                                     "i382"
                                                     "i380"
                                                     "i378"
                                                     "i376"
                                                     "i374"
                                                     "i372"
                                                     "i369"
                                                     "i367"
                                                     "i366"
                                                     "i364"
                                                     "i362"
                                                     "i360"
                                                     "i358"
                                                     "i357"
                                                     "i356"
                                                     "i355"
                                                     "i353"
                                                     "i352"
                                                     "i349"
                                                     "i347"
                                                     "i345"
                                                     "i343"
                                                     "i341"
                                                     "i339"
                                                     "i337"
                                                     "i336"
                                                     "i335"
                                                     "i333"
                                                     "i331"
                                                     "i330"
                                                     "i327"
                                                     "i326"
                                                     "i324"
                                                     "i322"
                                                     "i320"
                                                     "i318"
                                                     "i316"
                                                     "i314"
                                                     "i312"
                                                     "i310"
                                                     "i308"
                                                     "i305"
                                                     "i303"
                                                     "i301"
                                                     "i299"
                                                     "i297"
                                                     "i295"
                                                     "i293"
                                                     "i291"
                                                     "i289"
                                                     "i287"
                                                     "i285"
                                                     "i283"
                                                     "i281"
                                                     "i279"
                                                     "i277"
                                                     "i275"
                                                     "i273"
                                                     "i271"
                                                     "i269"
                                                     "i267"
                                                     "i265"
                                                     "i263"
                                                     "i261"
                                                     "i260"
                                                     "i257"
                                                     "i255"
                                                     "i254"
                                                     "i253"
                                                     "i252"
                                                     "i251"
                                                     "i249"
                                                     "i247"
                                                     "i245"
                                                     "i242"
                                                     "i240"
                                                     "i238"
                                                     "i236"
                                                     "i234"
                                                     "i232"
                                                     "i230"
                                                     "i228"
                                                     "i226"
                                                     "i224"
                                                     "i222"
                                                     "i220"
                                                     "i218"
                                                     "i216"
                                                     "i214"
                                                     "i212"
                                                     "i210"
                                                     "i208"))
                                                  #(ribcage
                                                    (define-structure
                                                      define-expansion-accessors
                                                      define-expansion-constructors)
                                                    ((top) (top) (top))
                                                    ("i46" "i45" "i44")))
                                                 (hygiene guile))
                                              '(())))
                                       #f)
                                     #f))
                              #f))
                          #{key 12212}#)
                      (let ((#{x 12340}#
                              (gensym
                                (string-append (symbol->string 'tmp) " "))))
                        (#{build-application 4301}#
                          #{s 12182}#
                          (let ((#{req 12475}# (list 'tmp))
                                (#{vars 12477}# (list #{x 12340}#))
                                (#{exp 12479}#
                                  (#{gen-syntax-case 12178}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 3)
                                      #f
                                      'tmp
                                      #{x 12340}#)
                                    #{key 12212}#
                                    #{m 12213}#
                                    #{r 12180}#
                                    #{mod 12183}#)))
                            (let ((#{body 12484}#
                                    (make-struct/no-tail
                                      (vector-ref %expanded-vtables 14)
                                      #f
                                      #{req 12475}#
                                      #f
                                      #f
                                      #f
                                      '()
                                      #{vars 12477}#
                                      #{exp 12479}#
                                      #f)))
                              (make-struct/no-tail
                                (vector-ref %expanded-vtables 13)
                                #f
                                '()
                                #{body 12484}#)))
                          (list (#{chi 4366}#
                                  #{val 12211}#
                                  #{r 12180}#
                                  '(())
                                  #{mod 12183}#))))
                      (syntax-violation
                        'syntax-case
                        "invalid literals list"
                        #{e 12184}#)))
                  #{tmp 12186}#)
                (syntax-violation
                  #f
                  "source expression failed to match any pattern"
                  #{e 12184}#)))))))
    (set! macroexpand
      (lambda*
        (#{x 14942}#
          #:optional
          (#{m 14943}# 'e)
          (#{esew 14944}# '(eval)))
        (#{chi-top-sequence 4362}#
          (list #{x 14942}#)
          '()
          '((top))
          #f
          #{m 14943}#
          #{esew 14944}#
          (cons 'hygiene (module-name (current-module))))))
    (set! identifier?
      (lambda (#{x 14947}#)
        (if (if (vector? #{x 14947}#)
              (if (= (vector-length #{x 14947}#) 4)
                (eq? (vector-ref #{x 14947}# 0) 'syntax-object)
                #f)
              #f)
          (symbol? (vector-ref #{x 14947}# 1))
          #f)))
    (set! datum->syntax
      (lambda (#{id 14972}# #{datum 14973}#)
        (let ((#{wrap 14978}# (vector-ref #{id 14972}# 2))
              (#{module 14979}# (vector-ref #{id 14972}# 3)))
          (vector
            'syntax-object
            #{datum 14973}#
            #{wrap 14978}#
            #{module 14979}#))))
    (set! syntax->datum
      (lambda (#{x 14986}#)
        (#{strip 4379}# #{x 14986}# '(()))))
    (set! syntax-source
      (lambda (#{x 14989}#)
        (#{source-annotation 4327}# #{x 14989}#)))
    (set! generate-temporaries
      (lambda (#{ls 15161}#)
        (begin
          (if (not (list? #{ls 15161}#))
            (syntax-violation
              'generate-temporaries
              "invalid argument"
              #{ls 15161}#))
          (let ((#{mod 15169}#
                  (cons 'hygiene (module-name (current-module)))))
            (map (lambda (#{x 15170}#)
                   (#{wrap 4359}# (gensym) '((top)) #{mod 15169}#))
                 #{ls 15161}#)))))
    (set! free-identifier=?
      (lambda (#{x 15174}# #{y 15175}#)
        (begin
          (if (not (if (if (vector? #{x 15174}#)
                         (if (= (vector-length #{x 15174}#) 4)
                           (eq? (vector-ref #{x 15174}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15174}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{x 15174}#))
          (if (not (if (if (vector? #{y 15175}#)
                         (if (= (vector-length #{y 15175}#) 4)
                           (eq? (vector-ref #{y 15175}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15175}# 1))
                     #f))
            (syntax-violation
              'free-identifier=?
              "invalid argument"
              #{y 15175}#))
          (if (eq? (if (if (vector? #{x 15174}#)
                         (if (= (vector-length #{x 15174}#) 4)
                           (eq? (vector-ref #{x 15174}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{x 15174}# 1)
                     #{x 15174}#)
                   (if (if (vector? #{y 15175}#)
                         (if (= (vector-length #{y 15175}#) 4)
                           (eq? (vector-ref #{y 15175}# 0) 'syntax-object)
                           #f)
                         #f)
                     (vector-ref #{y 15175}# 1)
                     #{y 15175}#))
            (eq? (#{id-var-name 4353}# #{x 15174}# '(()))
                 (#{id-var-name 4353}# #{y 15175}# '(())))
            #f))))
    (set! bound-identifier=?
      (lambda (#{x 15325}# #{y 15326}#)
        (begin
          (if (not (if (if (vector? #{x 15325}#)
                         (if (= (vector-length #{x 15325}#) 4)
                           (eq? (vector-ref #{x 15325}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{x 15325}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{x 15325}#))
          (if (not (if (if (vector? #{y 15326}#)
                         (if (= (vector-length #{y 15326}#) 4)
                           (eq? (vector-ref #{y 15326}# 0) 'syntax-object)
                           #f)
                         #f)
                     (symbol? (vector-ref #{y 15326}# 1))
                     #f))
            (syntax-violation
              'bound-identifier=?
              "invalid argument"
              #{y 15326}#))
          (if (if (if (vector? #{x 15325}#)
                    (if (= (vector-length #{x 15325}#) 4)
                      (eq? (vector-ref #{x 15325}# 0) 'syntax-object)
                      #f)
                    #f)
                (if (vector? #{y 15326}#)
                  (if (= (vector-length #{y 15326}#) 4)
                    (eq? (vector-ref #{y 15326}# 0) 'syntax-object)
                    #f)
                  #f)
                #f)
            (if (eq? (vector-ref #{x 15325}# 1)
                     (vector-ref #{y 15326}# 1))
              (#{same-marks? 4352}#
                (car (vector-ref #{x 15325}# 2))
                (car (vector-ref #{y 15326}# 2)))
              #f)
            (eq? #{x 15325}# #{y 15326}#)))))
    (set! syntax-violation
      (lambda*
        (#{who 15459}#
          #{message 15460}#
          #{form 15461}#
          #:optional
          (#{subform 15462}# #f))
        (begin
          (if (not (if (not #{who 15459}#)
                     (not #{who 15459}#)
                     (let ((#{t 15480}# (string? #{who 15459}#)))
                       (if #{t 15480}#
                         #{t 15480}#
                         (symbol? #{who 15459}#)))))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{who 15459}#))
          (if (not (string? #{message 15460}#))
            (syntax-violation
              'syntax-violation
              "invalid argument"
              #{message 15460}#))
          (throw 'syntax-error
                 #{who 15459}#
                 #{message 15460}#
                 (#{source-annotation 4327}#
                   (if #{form 15461}#
                     #{form 15461}#
                     #{subform 15462}#))
                 (#{strip 4379}# #{form 15461}# '(()))
                 (if #{subform 15462}#
                   (#{strip 4379}# #{subform 15462}# '(()))
                   #f)))))
    (letrec*
      ((#{match-each 15703}#
         (lambda (#{e 16326}#
                  #{p 16327}#
                  #{w 16328}#
                  #{mod 16329}#)
           (if (pair? #{e 16326}#)
             (let ((#{first 16330}#
                     (#{match 15709}#
                       (car #{e 16326}#)
                       #{p 16327}#
                       #{w 16328}#
                       '()
                       #{mod 16329}#)))
               (if #{first 16330}#
                 (let ((#{rest 16333}#
                         (#{match-each 15703}#
                           (cdr #{e 16326}#)
                           #{p 16327}#
                           #{w 16328}#
                           #{mod 16329}#)))
                   (if #{rest 16333}#
                     (cons #{first 16330}# #{rest 16333}#)
                     #f))
                 #f))
             (if (null? #{e 16326}#)
               '()
               (if (if (vector? #{e 16326}#)
                     (if (= (vector-length #{e 16326}#) 4)
                       (eq? (vector-ref #{e 16326}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each 15703}#
                   (vector-ref #{e 16326}# 1)
                   #{p 16327}#
                   (#{join-wraps 4350}#
                     #{w 16328}#
                     (vector-ref #{e 16326}# 2))
                   (vector-ref #{e 16326}# 3))
                 #f)))))
       (#{match-each-any 15705}#
         (lambda (#{e 16361}# #{w 16362}# #{mod 16363}#)
           (if (pair? #{e 16361}#)
             (let ((#{l 16364}#
                     (#{match-each-any 15705}#
                       (cdr #{e 16361}#)
                       #{w 16362}#
                       #{mod 16363}#)))
               (if #{l 16364}#
                 (cons (#{wrap 4359}#
                         (car #{e 16361}#)
                         #{w 16362}#
                         #{mod 16363}#)
                       #{l 16364}#)
                 #f))
             (if (null? #{e 16361}#)
               '()
               (if (if (vector? #{e 16361}#)
                     (if (= (vector-length #{e 16361}#) 4)
                       (eq? (vector-ref #{e 16361}# 0) 'syntax-object)
                       #f)
                     #f)
                 (#{match-each-any 15705}#
                   (vector-ref #{e 16361}# 1)
                   (#{join-wraps 4350}#
                     #{w 16362}#
                     (vector-ref #{e 16361}# 2))
                   #{mod 16363}#)
                 #f)))))
       (#{match-empty 15706}#
         (lambda (#{p 16388}# #{r 16389}#)
           (if (null? #{p 16388}#)
             #{r 16389}#
             (if (eq? #{p 16388}# '_)
               #{r 16389}#
               (if (eq? #{p 16388}# 'any)
                 (cons '() #{r 16389}#)
                 (if (pair? #{p 16388}#)
                   (#{match-empty 15706}#
                     (car #{p 16388}#)
                     (#{match-empty 15706}#
                       (cdr #{p 16388}#)
                       #{r 16389}#))
                   (if (eq? #{p 16388}# 'each-any)
                     (cons '() #{r 16389}#)
                     (let ((#{atom-key 16390}# (vector-ref #{p 16388}# 0)))
                       (if (eqv? #{atom-key 16390}# 'each)
                         (#{match-empty 15706}#
                           (vector-ref #{p 16388}# 1)
                           #{r 16389}#)
                         (if (eqv? #{atom-key 16390}# 'each+)
                           (#{match-empty 15706}#
                             (vector-ref #{p 16388}# 1)
                             (#{match-empty 15706}#
                               (reverse (vector-ref #{p 16388}# 2))
                               (#{match-empty 15706}#
                                 (vector-ref #{p 16388}# 3)
                                 #{r 16389}#)))
                           (if (if (eqv? #{atom-key 16390}# 'free-id)
                                 #t
                                 (eqv? #{atom-key 16390}# 'atom))
                             #{r 16389}#
                             (if (eqv? #{atom-key 16390}# 'vector)
                               (#{match-empty 15706}#
                                 (vector-ref #{p 16388}# 1)
                                 #{r 16389}#)))))))))))))
       (#{combine 15707}#
         (lambda (#{r* 16409}# #{r 16410}#)
           (if (null? (car #{r* 16409}#))
             #{r 16410}#
             (cons (map car #{r* 16409}#)
                   (#{combine 15707}#
                     (map cdr #{r* 16409}#)
                     #{r 16410}#)))))
       (#{match* 15708}#
         (lambda (#{e 15738}#
                  #{p 15739}#
                  #{w 15740}#
                  #{r 15741}#
                  #{mod 15742}#)
           (if (null? #{p 15739}#)
             (if (null? #{e 15738}#) #{r 15741}# #f)
             (if (pair? #{p 15739}#)
               (if (pair? #{e 15738}#)
                 (#{match 15709}#
                   (car #{e 15738}#)
                   (car #{p 15739}#)
                   #{w 15740}#
                   (#{match 15709}#
                     (cdr #{e 15738}#)
                     (cdr #{p 15739}#)
                     #{w 15740}#
                     #{r 15741}#
                     #{mod 15742}#)
                   #{mod 15742}#)
                 #f)
               (if (eq? #{p 15739}# 'each-any)
                 (let ((#{l 15747}#
                         (#{match-each-any 15705}#
                           #{e 15738}#
                           #{w 15740}#
                           #{mod 15742}#)))
                   (if #{l 15747}#
                     (cons #{l 15747}# #{r 15741}#)
                     #f))
                 (let ((#{atom-key 15752}# (vector-ref #{p 15739}# 0)))
                   (if (eqv? #{atom-key 15752}# 'each)
                     (if (null? #{e 15738}#)
                       (#{match-empty 15706}#
                         (vector-ref #{p 15739}# 1)
                         #{r 15741}#)
                       (let ((#{l 15759}#
                               (#{match-each 15703}#
                                 #{e 15738}#
                                 (vector-ref #{p 15739}# 1)
                                 #{w 15740}#
                                 #{mod 15742}#)))
                         (if #{l 15759}#
                           (letrec*
                             ((#{collect 15762}#
                                (lambda (#{l 15815}#)
                                  (if (null? (car #{l 15815}#))
                                    #{r 15741}#
                                    (cons (map car #{l 15815}#)
                                          (#{collect 15762}#
                                            (map cdr #{l 15815}#)))))))
                             (#{collect 15762}# #{l 15759}#))
                           #f)))
                     (if (eqv? #{atom-key 15752}# 'each+)
                       (call-with-values
                         (lambda ()
                           (let ((#{x-pat 15824}# (vector-ref #{p 15739}# 1))
                                 (#{y-pat 15825}# (vector-ref #{p 15739}# 2))
                                 (#{z-pat 15826}# (vector-ref #{p 15739}# 3)))
                             (letrec*
                               ((#{f 15830}#
                                  (lambda (#{e 15832}# #{w 15833}#)
                                    (if (pair? #{e 15832}#)
                                      (call-with-values
                                        (lambda ()
                                          (#{f 15830}#
                                            (cdr #{e 15832}#)
                                            #{w 15833}#))
                                        (lambda (#{xr* 15834}#
                                                 #{y-pat 15835}#
                                                 #{r 15836}#)
                                          (if #{r 15836}#
                                            (if (null? #{y-pat 15835}#)
                                              (let ((#{xr 15837}#
                                                      (#{match 15709}#
                                                        (car #{e 15832}#)
                                                        #{x-pat 15824}#
                                                        #{w 15833}#
                                                        '()
                                                        #{mod 15742}#)))
                                                (if #{xr 15837}#
                                                  (values
                                                    (cons #{xr 15837}#
                                                          #{xr* 15834}#)
                                                    #{y-pat 15835}#
                                                    #{r 15836}#)
                                                  (values #f #f #f)))
                                              (values
                                                '()
                                                (cdr #{y-pat 15835}#)
                                                (#{match 15709}#
                                                  (car #{e 15832}#)
                                                  (car #{y-pat 15835}#)
                                                  #{w 15833}#
                                                  #{r 15836}#
                                                  #{mod 15742}#)))
                                            (values #f #f #f))))
                                      (if (if (vector? #{e 15832}#)
                                            (if (= (vector-length #{e 15832}#)
                                                   4)
                                              (eq? (vector-ref #{e 15832}# 0)
                                                   'syntax-object)
                                              #f)
                                            #f)
                                        (#{f 15830}#
                                          (vector-ref #{e 15832}# 1)
                                          (#{join-wraps 4350}#
                                            #{w 15833}#
                                            #{e 15832}#))
                                        (values
                                          '()
                                          #{y-pat 15825}#
                                          (#{match 15709}#
                                            #{e 15832}#
                                            #{z-pat 15826}#
                                            #{w 15833}#
                                            #{r 15741}#
                                            #{mod 15742}#)))))))
                               (#{f 15830}# #{e 15738}# #{w 15740}#))))
                         (lambda (#{xr* 15865}# #{y-pat 15866}# #{r 15867}#)
                           (if #{r 15867}#
                             (if (null? #{y-pat 15866}#)
                               (if (null? #{xr* 15865}#)
                                 (#{match-empty 15706}#
                                   (vector-ref #{p 15739}# 1)
                                   #{r 15867}#)
                                 (#{combine 15707}# #{xr* 15865}# #{r 15867}#))
                               #f)
                             #f)))
                       (if (eqv? #{atom-key 15752}# 'free-id)
                         (if (if (symbol? #{e 15738}#)
                               #t
                               (if (if (vector? #{e 15738}#)
                                     (if (= (vector-length #{e 15738}#) 4)
                                       (eq? (vector-ref #{e 15738}# 0)
                                            'syntax-object)
                                       #f)
                                     #f)
                                 (symbol? (vector-ref #{e 15738}# 1))
                                 #f))
                           (if (let ((#{i 16230}#
                                       (#{wrap 4359}#
                                         #{e 15738}#
                                         #{w 15740}#
                                         #{mod 15742}#))
                                     (#{j 16231}# (vector-ref #{p 15739}# 1)))
                                 (if (eq? (if (if (vector? #{i 16230}#)
                                                (if (= (vector-length
                                                         #{i 16230}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{i 16230}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{i 16230}# 1)
                                            #{i 16230}#)
                                          (if (if (vector? #{j 16231}#)
                                                (if (= (vector-length
                                                         #{j 16231}#)
                                                       4)
                                                  (eq? (vector-ref
                                                         #{j 16231}#
                                                         0)
                                                       'syntax-object)
                                                  #f)
                                                #f)
                                            (vector-ref #{j 16231}# 1)
                                            #{j 16231}#))
                                   (eq? (#{id-var-name 4353}#
                                          #{i 16230}#
                                          '(()))
                                        (#{id-var-name 4353}#
                                          #{j 16231}#
                                          '(())))
                                   #f))
                             #{r 15741}#
                             #f)
                           #f)
                         (if (eqv? #{atom-key 15752}# 'atom)
                           (if (equal?
                                 (vector-ref #{p 15739}# 1)
                                 (#{strip 4379}# #{e 15738}# #{w 15740}#))
                             #{r 15741}#
                             #f)
                           (if (eqv? #{atom-key 15752}# 'vector)
                             (if (vector? #{e 15738}#)
                               (#{match 15709}#
                                 (vector->list #{e 15738}#)
                                 (vector-ref #{p 15739}# 1)
                                 #{w 15740}#
                                 #{r 15741}#
                                 #{mod 15742}#)
                               #f))))))))))))
       (#{match 15709}#
         (lambda (#{e 16291}#
                  #{p 16292}#
                  #{w 16293}#
                  #{r 16294}#
                  #{mod 16295}#)
           (if (not #{r 16294}#)
             #f
             (if (eq? #{p 16292}# '_)
               #{r 16294}#
               (if (eq? #{p 16292}# 'any)
                 (cons (#{wrap 4359}#
                         #{e 16291}#
                         #{w 16293}#
                         #{mod 16295}#)
                       #{r 16294}#)
                 (if (if (vector? #{e 16291}#)
                       (if (= (vector-length #{e 16291}#) 4)
                         (eq? (vector-ref #{e 16291}# 0) 'syntax-object)
                         #f)
                       #f)
                   (#{match* 15708}#
                     (vector-ref #{e 16291}# 1)
                     #{p 16292}#
                     (#{join-wraps 4350}#
                       #{w 16293}#
                       (vector-ref #{e 16291}# 2))
                     #{r 16294}#
                     (vector-ref #{e 16291}# 3))
                   (#{match* 15708}#
                     #{e 16291}#
                     #{p 16292}#
                     #{w 16293}#
                     #{r 16294}#
                     #{mod 16295}#))))))))
      (set! $sc-dispatch
        (lambda (#{e 15710}# #{p 15711}#)
          (if (eq? #{p 15711}# 'any)
            (list #{e 15710}#)
            (if (eq? #{p 15711}# '_)
              '()
              (if (if (vector? #{e 15710}#)
                    (if (= (vector-length #{e 15710}#) 4)
                      (eq? (vector-ref #{e 15710}# 0) 'syntax-object)
                      #f)
                    #f)
                (#{match* 15708}#
                  (vector-ref #{e 15710}# 1)
                  #{p 15711}#
                  (vector-ref #{e 15710}# 2)
                  '()
                  (vector-ref #{e 15710}# 3))
                (#{match* 15708}#
                  #{e 15710}#
                  #{p 15711}#
                  '(())
                  '()
                  #f)))))))))

(define with-syntax
  (make-syntax-transformer
    'with-syntax
    'macro
    (lambda (#{x 28691}#)
      (let ((#{tmp 28693}#
              ($sc-dispatch #{x 28691}# '(_ () any . each-any))))
        (if #{tmp 28693}#
          (@apply
            (lambda (#{e1 28697}# #{e2 28698}#)
              (cons '#(syntax-object
                       let
                       ((top)
                        #(ribcage
                          #(e1 e2)
                          #((top) (top))
                          #("i28664" "i28665"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28661")))
                       (hygiene guile))
                    (cons '() (cons #{e1 28697}# #{e2 28698}#))))
            #{tmp 28693}#)
          (let ((#{tmp 28699}#
                  ($sc-dispatch
                    #{x 28691}#
                    '(_ ((any any)) any . each-any))))
            (if #{tmp 28699}#
              (@apply
                (lambda (#{out 28703}#
                         #{in 28704}#
                         #{e1 28705}#
                         #{e2 28706}#)
                  (list '#(syntax-object
                           syntax-case
                           ((top)
                            #(ribcage
                              #(out in e1 e2)
                              #((top) (top) (top) (top))
                              #("i28670" "i28671" "i28672" "i28673"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28661")))
                           (hygiene guile))
                        #{in 28704}#
                        '()
                        (list #{out 28703}#
                              (cons '#(syntax-object
                                       let
                                       ((top)
                                        #(ribcage
                                          #(out in e1 e2)
                                          #((top) (top) (top) (top))
                                          #("i28670"
                                            "i28671"
                                            "i28672"
                                            "i28673"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28661")))
                                       (hygiene guile))
                                    (cons '()
                                          (cons #{e1 28705}# #{e2 28706}#))))))
                #{tmp 28699}#)
              (let ((#{tmp 28707}#
                      ($sc-dispatch
                        #{x 28691}#
                        '(_ #(each (any any)) any . each-any))))
                (if #{tmp 28707}#
                  (@apply
                    (lambda (#{out 28711}#
                             #{in 28712}#
                             #{e1 28713}#
                             #{e2 28714}#)
                      (list '#(syntax-object
                               syntax-case
                               ((top)
                                #(ribcage
                                  #(out in e1 e2)
                                  #((top) (top) (top) (top))
                                  #("i28680" "i28681" "i28682" "i28683"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28661")))
                               (hygiene guile))
                            (cons '#(syntax-object
                                     list
                                     ((top)
                                      #(ribcage
                                        #(out in e1 e2)
                                        #((top) (top) (top) (top))
                                        #("i28680" "i28681" "i28682" "i28683"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i28661")))
                                     (hygiene guile))
                                  #{in 28712}#)
                            '()
                            (list #{out 28711}#
                                  (cons '#(syntax-object
                                           let
                                           ((top)
                                            #(ribcage
                                              #(out in e1 e2)
                                              #((top) (top) (top) (top))
                                              #("i28680"
                                                "i28681"
                                                "i28682"
                                                "i28683"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(x)
                                              #((top))
                                              #("i28661")))
                                           (hygiene guile))
                                        (cons '()
                                              (cons #{e1 28713}#
                                                    #{e2 28714}#))))))
                    #{tmp 28707}#)
                  (syntax-violation
                    #f
                    "source expression failed to match any pattern"
                    #{x 28691}#))))))))))

(define syntax-rules
  (make-syntax-transformer
    'syntax-rules
    'macro
    (lambda (#{x 28768}#)
      (let ((#{tmp 28770}#
              ($sc-dispatch
                #{x 28768}#
                '(_ each-any . #(each ((any . any) any))))))
        (if #{tmp 28770}#
          (@apply
            (lambda (#{k 28774}#
                     #{keyword 28775}#
                     #{pattern 28776}#
                     #{template 28777}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage
                          #(k keyword pattern template)
                          #((top) (top) (top) (top))
                          #("i28731" "i28732" "i28733" "i28734"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28728")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage
                           #(k keyword pattern template)
                           #((top) (top) (top) (top))
                           #("i28731" "i28732" "i28733" "i28734"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i28728")))
                        (hygiene guile)))
                    (vector
                      '(#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28731" "i28732" "i28733" "i28734"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28728")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          syntax-rules
                          ((top)
                           #(ribcage
                             #(k keyword pattern template)
                             #((top) (top) (top) (top))
                             #("i28731" "i28732" "i28733" "i28734"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i28728")))
                          (hygiene guile)))
                      (cons '#(syntax-object
                               patterns
                               ((top)
                                #(ribcage
                                  #(k keyword pattern template)
                                  #((top) (top) (top) (top))
                                  #("i28731" "i28732" "i28733" "i28734"))
                                #(ribcage () () ())
                                #(ribcage #(x) #((top)) #("i28728")))
                               (hygiene guile))
                            #{pattern 28776}#))
                    (cons '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage
                                #(k keyword pattern template)
                                #((top) (top) (top) (top))
                                #("i28731" "i28732" "i28733" "i28734"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28728")))
                             (hygiene guile))
                          (cons '#(syntax-object
                                   x
                                   ((top)
                                    #(ribcage
                                      #(k keyword pattern template)
                                      #((top) (top) (top) (top))
                                      #("i28731" "i28732" "i28733" "i28734"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28728")))
                                   (hygiene guile))
                                (cons #{k 28774}#
                                      (map (lambda (#{tmp 28742 28778}#
                                                    #{tmp 28741 28779}#)
                                             (list (cons '#(syntax-object
                                                            dummy
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28731"
                                                                 "i28732"
                                                                 "i28733"
                                                                 "i28734"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28728")))
                                                            (hygiene guile))
                                                         #{tmp 28741 28779}#)
                                                   (list '#(syntax-object
                                                            syntax
                                                            ((top)
                                                             #(ribcage
                                                               #(k
                                                                 keyword
                                                                 pattern
                                                                 template)
                                                               #((top)
                                                                 (top)
                                                                 (top)
                                                                 (top))
                                                               #("i28731"
                                                                 "i28732"
                                                                 "i28733"
                                                                 "i28734"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i28728")))
                                                            (hygiene guile))
                                                         #{tmp 28742 28778}#)))
                                           #{template 28777}#
                                           #{pattern 28776}#))))))
            #{tmp 28770}#)
          (let ((#{tmp 28780}#
                  ($sc-dispatch
                    #{x 28768}#
                    '(_ each-any any . #(each ((any . any) any))))))
            (if (if #{tmp 28780}#
                  (@apply
                    (lambda (#{k 28784}#
                             #{docstring 28785}#
                             #{keyword 28786}#
                             #{pattern 28787}#
                             #{template 28788}#)
                      (string? (syntax->datum #{docstring 28785}#)))
                    #{tmp 28780}#)
                  #f)
              (@apply
                (lambda (#{k 28789}#
                         #{docstring 28790}#
                         #{keyword 28791}#
                         #{pattern 28792}#
                         #{template 28793}#)
                  (list '#(syntax-object
                           lambda
                           ((top)
                            #(ribcage
                              #(k docstring keyword pattern template)
                              #((top) (top) (top) (top) (top))
                              #("i28754" "i28755" "i28756" "i28757" "i28758"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28728")))
                           (hygiene guile))
                        '(#(syntax-object
                            x
                            ((top)
                             #(ribcage
                               #(k docstring keyword pattern template)
                               #((top) (top) (top) (top) (top))
                               #("i28754" "i28755" "i28756" "i28757" "i28758"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i28728")))
                            (hygiene guile)))
                        #{docstring 28790}#
                        (vector
                          '(#(syntax-object
                              macro-type
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28754"
                                   "i28755"
                                   "i28756"
                                   "i28757"
                                   "i28758"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28728")))
                              (hygiene guile))
                            .
                            #(syntax-object
                              syntax-rules
                              ((top)
                               #(ribcage
                                 #(k docstring keyword pattern template)
                                 #((top) (top) (top) (top) (top))
                                 #("i28754"
                                   "i28755"
                                   "i28756"
                                   "i28757"
                                   "i28758"))
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i28728")))
                              (hygiene guile)))
                          (cons '#(syntax-object
                                   patterns
                                   ((top)
                                    #(ribcage
                                      #(k docstring keyword pattern template)
                                      #((top) (top) (top) (top) (top))
                                      #("i28754"
                                        "i28755"
                                        "i28756"
                                        "i28757"
                                        "i28758"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i28728")))
                                   (hygiene guile))
                                #{pattern 28792}#))
                        (cons '#(syntax-object
                                 syntax-case
                                 ((top)
                                  #(ribcage
                                    #(k docstring keyword pattern template)
                                    #((top) (top) (top) (top) (top))
                                    #("i28754"
                                      "i28755"
                                      "i28756"
                                      "i28757"
                                      "i28758"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28728")))
                                 (hygiene guile))
                              (cons '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(k
                                            docstring
                                            keyword
                                            pattern
                                            template)
                                          #((top) (top) (top) (top) (top))
                                          #("i28754"
                                            "i28755"
                                            "i28756"
                                            "i28757"
                                            "i28758"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i28728")))
                                       (hygiene guile))
                                    (cons #{k 28789}#
                                          (map (lambda (#{tmp 28767 28794}#
                                                        #{tmp 28766 28795}#)
                                                 (list (cons '#(syntax-object
                                                                dummy
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28754"
                                                                     "i28755"
                                                                     "i28756"
                                                                     "i28757"
                                                                     "i28758"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28728")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28766 28795}#)
                                                       (list '#(syntax-object
                                                                syntax
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k
                                                                     docstring
                                                                     keyword
                                                                     pattern
                                                                     template)
                                                                   #((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                   #("i28754"
                                                                     "i28755"
                                                                     "i28756"
                                                                     "i28757"
                                                                     "i28758"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i28728")))
                                                                (hygiene
                                                                  guile))
                                                             #{tmp 28767 28794}#)))
                                               #{template 28793}#
                                               #{pattern 28792}#))))))
                #{tmp 28780}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28768}#))))))))

(define define-syntax-rule
  (make-syntax-transformer
    'define-syntax-rule
    'macro
    (lambda (#{x 28832}#)
      (let ((#{tmp 28834}#
              ($sc-dispatch #{x 28832}# '(_ (any . any) any))))
        (if #{tmp 28834}#
          (@apply
            (lambda (#{name 28838}#
                     #{pattern 28839}#
                     #{template 28840}#)
              (list '#(syntax-object
                       define-syntax
                       ((top)
                        #(ribcage
                          #(name pattern template)
                          #((top) (top) (top))
                          #("i28809" "i28810" "i28811"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i28806")))
                       (hygiene guile))
                    #{name 28838}#
                    (list '#(syntax-object
                             syntax-rules
                             ((top)
                              #(ribcage
                                #(name pattern template)
                                #((top) (top) (top))
                                #("i28809" "i28810" "i28811"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i28806")))
                             (hygiene guile))
                          '()
                          (list (cons '#(syntax-object
                                         _
                                         ((top)
                                          #(ribcage
                                            #(name pattern template)
                                            #((top) (top) (top))
                                            #("i28809" "i28810" "i28811"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i28806")))
                                         (hygiene guile))
                                      #{pattern 28839}#)
                                #{template 28840}#))))
            #{tmp 28834}#)
          (let ((#{tmp 28841}#
                  ($sc-dispatch
                    #{x 28832}#
                    '(_ (any . any) any any))))
            (if (if #{tmp 28841}#
                  (@apply
                    (lambda (#{name 28845}#
                             #{pattern 28846}#
                             #{docstring 28847}#
                             #{template 28848}#)
                      (string? (syntax->datum #{docstring 28847}#)))
                    #{tmp 28841}#)
                  #f)
              (@apply
                (lambda (#{name 28849}#
                         #{pattern 28850}#
                         #{docstring 28851}#
                         #{template 28852}#)
                  (list '#(syntax-object
                           define-syntax
                           ((top)
                            #(ribcage
                              #(name pattern docstring template)
                              #((top) (top) (top) (top))
                              #("i28824" "i28825" "i28826" "i28827"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i28806")))
                           (hygiene guile))
                        #{name 28849}#
                        (list '#(syntax-object
                                 syntax-rules
                                 ((top)
                                  #(ribcage
                                    #(name pattern docstring template)
                                    #((top) (top) (top) (top))
                                    #("i28824" "i28825" "i28826" "i28827"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i28806")))
                                 (hygiene guile))
                              '()
                              #{docstring 28851}#
                              (list (cons '#(syntax-object
                                             _
                                             ((top)
                                              #(ribcage
                                                #(name
                                                  pattern
                                                  docstring
                                                  template)
                                                #((top) (top) (top) (top))
                                                #("i28824"
                                                  "i28825"
                                                  "i28826"
                                                  "i28827"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(x)
                                                #((top))
                                                #("i28806")))
                                             (hygiene guile))
                                          #{pattern 28850}#)
                                    #{template 28852}#))))
                #{tmp 28841}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 28832}#))))))))

(define let*
  (make-syntax-transformer
    'let*
    'macro
    (lambda (#{x 28901}#)
      (let ((#{tmp 28903}#
              ($sc-dispatch
                #{x 28901}#
                '(any #(each (any any)) any . each-any))))
        (if (if #{tmp 28903}#
              (@apply
                (lambda (#{let* 28907}#
                         #{x 28908}#
                         #{v 28909}#
                         #{e1 28910}#
                         #{e2 28911}#)
                  (and-map identifier? #{x 28908}#))
                #{tmp 28903}#)
              #f)
          (@apply
            (lambda (#{let* 28912}#
                     #{x 28913}#
                     #{v 28914}#
                     #{e1 28915}#
                     #{e2 28916}#)
              (letrec*
                ((#{f 28917}#
                   (lambda (#{bindings 28920}#)
                     (if (null? #{bindings 28920}#)
                       (cons '#(syntax-object
                                let
                                ((top)
                                 #(ribcage () () ())
                                 #(ribcage
                                   #(f bindings)
                                   #((top) (top))
                                   #("i28887" "i28888"))
                                 #(ribcage
                                   #(let* x v e1 e2)
                                   #((top) (top) (top) (top) (top))
                                   #("i28877"
                                     "i28878"
                                     "i28879"
                                     "i28880"
                                     "i28881"))
                                 #(ribcage () () ())
                                 #(ribcage #(x) #((top)) #("i28863")))
                                (hygiene guile))
                             (cons '() (cons #{e1 28915}# #{e2 28916}#)))
                       (let ((#{tmp 28921}#
                               (list (#{f 28917}# (cdr #{bindings 28920}#))
                                     (car #{bindings 28920}#))))
                         (let ((#{tmp 28922}#
                                 ($sc-dispatch #{tmp 28921}# '(any any))))
                           (if #{tmp 28922}#
                             (@apply
                               (lambda (#{body 28924}# #{binding 28925}#)
                                 (list '#(syntax-object
                                          let
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(body binding)
                                             #((top) (top))
                                             #("i28897" "i28898"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(f bindings)
                                             #((top) (top))
                                             #("i28887" "i28888"))
                                           #(ribcage
                                             #(let* x v e1 e2)
                                             #((top) (top) (top) (top) (top))
                                             #("i28877"
                                               "i28878"
                                               "i28879"
                                               "i28880"
                                               "i28881"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x)
                                             #((top))
                                             #("i28863")))
                                          (hygiene guile))
                                       (list #{binding 28925}#)
                                       #{body 28924}#))
                               #{tmp 28922}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 28921}#))))))))
                (#{f 28917}# (map list #{x 28913}# #{v 28914}#))))
            #{tmp 28903}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 28901}#))))))

(define do
  (make-syntax-transformer
    'do
    'macro
    (lambda (#{orig-x 28983}#)
      (let ((#{tmp 28985}#
              ($sc-dispatch
                #{orig-x 28983}#
                '(_ #(each (any any . any))
                    (any . each-any)
                    .
                    each-any))))
        (if #{tmp 28985}#
          (@apply
            (lambda (#{var 28989}#
                     #{init 28990}#
                     #{step 28991}#
                     #{e0 28992}#
                     #{e1 28993}#
                     #{c 28994}#)
              (let ((#{tmp 28995}#
                      (map (lambda (#{v 28998}# #{s 28999}#)
                             (let ((#{tmp 29001}#
                                     ($sc-dispatch #{s 28999}# '())))
                               (if #{tmp 29001}#
                                 (@apply (lambda () #{v 28998}#) #{tmp 29001}#)
                                 (let ((#{tmp 29004}#
                                         ($sc-dispatch #{s 28999}# '(any))))
                                   (if #{tmp 29004}#
                                     (@apply
                                       (lambda (#{e 29007}#) #{e 29007}#)
                                       #{tmp 29004}#)
                                     (syntax-violation
                                       'do
                                       "bad step expression"
                                       #{orig-x 28983}#
                                       #{s 28999}#))))))
                           #{var 28989}#
                           #{step 28991}#)))
                (let ((#{tmp 28996}#
                        ($sc-dispatch #{tmp 28995}# 'each-any)))
                  (if #{tmp 28996}#
                    (@apply
                      (lambda (#{step 29013}#)
                        (let ((#{tmp 29015}# ($sc-dispatch #{e1 28993}# '())))
                          (if #{tmp 29015}#
                            (@apply
                              (lambda ()
                                (list '#(syntax-object
                                         let
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28951"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28936"
                                              "i28937"
                                              "i28938"
                                              "i28939"
                                              "i28940"
                                              "i28941"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28933")))
                                         (hygiene guile))
                                      '#(syntax-object
                                         doloop
                                         ((top)
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(step)
                                            #((top))
                                            #("i28951"))
                                          #(ribcage
                                            #(var init step e0 e1 c)
                                            #((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                            #("i28936"
                                              "i28937"
                                              "i28938"
                                              "i28939"
                                              "i28940"
                                              "i28941"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(orig-x)
                                            #((top))
                                            #("i28933")))
                                         (hygiene guile))
                                      (map list #{var 28989}# #{init 28990}#)
                                      (list '#(syntax-object
                                               if
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(step)
                                                  #((top))
                                                  #("i28951"))
                                                #(ribcage
                                                  #(var init step e0 e1 c)
                                                  #((top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top)
                                                    (top))
                                                  #("i28936"
                                                    "i28937"
                                                    "i28938"
                                                    "i28939"
                                                    "i28940"
                                                    "i28941"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(orig-x)
                                                  #((top))
                                                  #("i28933")))
                                               (hygiene guile))
                                            (list '#(syntax-object
                                                     not
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28951"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28936"
                                                          "i28937"
                                                          "i28938"
                                                          "i28939"
                                                          "i28940"
                                                          "i28941"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28933")))
                                                     (hygiene guile))
                                                  #{e0 28992}#)
                                            (cons '#(syntax-object
                                                     begin
                                                     ((top)
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(step)
                                                        #((top))
                                                        #("i28951"))
                                                      #(ribcage
                                                        #(var
                                                          init
                                                          step
                                                          e0
                                                          e1
                                                          c)
                                                        #((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                        #("i28936"
                                                          "i28937"
                                                          "i28938"
                                                          "i28939"
                                                          "i28940"
                                                          "i28941"))
                                                      #(ribcage () () ())
                                                      #(ribcage
                                                        #(orig-x)
                                                        #((top))
                                                        #("i28933")))
                                                     (hygiene guile))
                                                  (append
                                                    #{c 28994}#
                                                    (list (cons '#(syntax-object
                                                                   doloop
                                                                   ((top)
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(step)
                                                                      #((top))
                                                                      #("i28951"))
                                                                    #(ribcage
                                                                      #(var
                                                                        init
                                                                        step
                                                                        e0
                                                                        e1
                                                                        c)
                                                                      #((top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top)
                                                                        (top))
                                                                      #("i28936"
                                                                        "i28937"
                                                                        "i28938"
                                                                        "i28939"
                                                                        "i28940"
                                                                        "i28941"))
                                                                    #(ribcage
                                                                      ()
                                                                      ()
                                                                      ())
                                                                    #(ribcage
                                                                      #(orig-x)
                                                                      #((top))
                                                                      #("i28933")))
                                                                   (hygiene
                                                                     guile))
                                                                #{step 29013}#)))))))
                              #{tmp 29015}#)
                            (let ((#{tmp 29019}#
                                    ($sc-dispatch
                                      #{e1 28993}#
                                      '(any . each-any))))
                              (if #{tmp 29019}#
                                (@apply
                                  (lambda (#{e1 29023}# #{e2 29024}#)
                                    (list '#(syntax-object
                                             let
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28960" "i28961"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28951"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28936"
                                                  "i28937"
                                                  "i28938"
                                                  "i28939"
                                                  "i28940"
                                                  "i28941"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28933")))
                                             (hygiene guile))
                                          '#(syntax-object
                                             doloop
                                             ((top)
                                              #(ribcage
                                                #(e1 e2)
                                                #((top) (top))
                                                #("i28960" "i28961"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(step)
                                                #((top))
                                                #("i28951"))
                                              #(ribcage
                                                #(var init step e0 e1 c)
                                                #((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                #("i28936"
                                                  "i28937"
                                                  "i28938"
                                                  "i28939"
                                                  "i28940"
                                                  "i28941"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(orig-x)
                                                #((top))
                                                #("i28933")))
                                             (hygiene guile))
                                          (map list
                                               #{var 28989}#
                                               #{init 28990}#)
                                          (list '#(syntax-object
                                                   if
                                                   ((top)
                                                    #(ribcage
                                                      #(e1 e2)
                                                      #((top) (top))
                                                      #("i28960" "i28961"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(step)
                                                      #((top))
                                                      #("i28951"))
                                                    #(ribcage
                                                      #(var init step e0 e1 c)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i28936"
                                                        "i28937"
                                                        "i28938"
                                                        "i28939"
                                                        "i28940"
                                                        "i28941"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(orig-x)
                                                      #((top))
                                                      #("i28933")))
                                                   (hygiene guile))
                                                #{e0 28992}#
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28960"
                                                              "i28961"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28951"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28936"
                                                              "i28937"
                                                              "i28938"
                                                              "i28939"
                                                              "i28940"
                                                              "i28941"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28933")))
                                                         (hygiene guile))
                                                      (cons #{e1 29023}#
                                                            #{e2 29024}#))
                                                (cons '#(syntax-object
                                                         begin
                                                         ((top)
                                                          #(ribcage
                                                            #(e1 e2)
                                                            #((top) (top))
                                                            #("i28960"
                                                              "i28961"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(step)
                                                            #((top))
                                                            #("i28951"))
                                                          #(ribcage
                                                            #(var
                                                              init
                                                              step
                                                              e0
                                                              e1
                                                              c)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i28936"
                                                              "i28937"
                                                              "i28938"
                                                              "i28939"
                                                              "i28940"
                                                              "i28941"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(orig-x)
                                                            #((top))
                                                            #("i28933")))
                                                         (hygiene guile))
                                                      (append
                                                        #{c 28994}#
                                                        (list (cons '#(syntax-object
                                                                       doloop
                                                                       ((top)
                                                                        #(ribcage
                                                                          #(e1
                                                                            e2)
                                                                          #((top)
                                                                            (top))
                                                                          #("i28960"
                                                                            "i28961"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(step)
                                                                          #((top))
                                                                          #("i28951"))
                                                                        #(ribcage
                                                                          #(var
                                                                            init
                                                                            step
                                                                            e0
                                                                            e1
                                                                            c)
                                                                          #((top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top)
                                                                            (top))
                                                                          #("i28936"
                                                                            "i28937"
                                                                            "i28938"
                                                                            "i28939"
                                                                            "i28940"
                                                                            "i28941"))
                                                                        #(ribcage
                                                                          ()
                                                                          ()
                                                                          ())
                                                                        #(ribcage
                                                                          #(orig-x)
                                                                          #((top))
                                                                          #("i28933")))
                                                                       (hygiene
                                                                         guile))
                                                                    #{step 29013}#)))))))
                                  #{tmp 29019}#)
                                (syntax-violation
                                  #f
                                  "source expression failed to match any pattern"
                                  #{e1 28993}#))))))
                      #{tmp 28996}#)
                    (syntax-violation
                      #f
                      "source expression failed to match any pattern"
                      #{tmp 28995}#)))))
            #{tmp 28985}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{orig-x 28983}#))))))

(define quasiquote
  (make-syntax-transformer
    'quasiquote
    'macro
    (letrec*
      ((#{quasi 29310}#
         (lambda (#{p 29334}# #{lev 29335}#)
           (let ((#{tmp 29337}#
                   ($sc-dispatch
                     #{p 29334}#
                     '(#(free-id
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29056" "i29057"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29052"
                               "i29050"
                               "i29048"
                               "i29046"
                               "i29044"
                               "i29042"
                               "i29040")))
                           (hygiene guile)))
                       any))))
             (if #{tmp 29337}#
               (@apply
                 (lambda (#{p 29341}#)
                   (if (= #{lev 29335}# 0)
                     (list '#(syntax-object
                              "value"
                              ((top)
                               #(ribcage #(p) #((top)) #("i29060"))
                               #(ribcage () () ())
                               #(ribcage
                                 #(p lev)
                                 #((top) (top))
                                 #("i29056" "i29057"))
                               #(ribcage
                                 (emit quasivector
                                       quasilist*
                                       quasiappend
                                       quasicons
                                       vquasi
                                       quasi)
                                 ((top) (top) (top) (top) (top) (top) (top))
                                 ("i29052"
                                  "i29050"
                                  "i29048"
                                  "i29046"
                                  "i29044"
                                  "i29042"
                                  "i29040")))
                              (hygiene guile))
                           #{p 29341}#)
                     (#{quasicons 29312}#
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage #(p) #((top)) #("i29060"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29056" "i29057"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29052"
                               "i29050"
                               "i29048"
                               "i29046"
                               "i29044"
                               "i29042"
                               "i29040")))
                           (hygiene guile))
                         #(syntax-object
                           unquote
                           ((top)
                            #(ribcage #(p) #((top)) #("i29060"))
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29056" "i29057"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29052"
                               "i29050"
                               "i29048"
                               "i29046"
                               "i29044"
                               "i29042"
                               "i29040")))
                           (hygiene guile)))
                       (#{quasi 29310}#
                         (list #{p 29341}#)
                         (#{1-}# #{lev 29335}#)))))
                 #{tmp 29337}#)
               (let ((#{tmp 29344}#
                       ($sc-dispatch
                         #{p 29334}#
                         '(#(free-id
                             #(syntax-object
                               quasiquote
                               ((top)
                                #(ribcage () () ())
                                #(ribcage
                                  #(p lev)
                                  #((top) (top))
                                  #("i29056" "i29057"))
                                #(ribcage
                                  (emit quasivector
                                        quasilist*
                                        quasiappend
                                        quasicons
                                        vquasi
                                        quasi)
                                  ((top) (top) (top) (top) (top) (top) (top))
                                  ("i29052"
                                   "i29050"
                                   "i29048"
                                   "i29046"
                                   "i29044"
                                   "i29042"
                                   "i29040")))
                               (hygiene guile)))
                           any))))
                 (if #{tmp 29344}#
                   (@apply
                     (lambda (#{p 29348}#)
                       (#{quasicons 29312}#
                         '(#(syntax-object
                             "quote"
                             ((top)
                              #(ribcage #(p) #((top)) #("i29063"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i29056" "i29057"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i29052"
                                 "i29050"
                                 "i29048"
                                 "i29046"
                                 "i29044"
                                 "i29042"
                                 "i29040")))
                             (hygiene guile))
                           #(syntax-object
                             quasiquote
                             ((top)
                              #(ribcage #(p) #((top)) #("i29063"))
                              #(ribcage () () ())
                              #(ribcage
                                #(p lev)
                                #((top) (top))
                                #("i29056" "i29057"))
                              #(ribcage
                                (emit quasivector
                                      quasilist*
                                      quasiappend
                                      quasicons
                                      vquasi
                                      quasi)
                                ((top) (top) (top) (top) (top) (top) (top))
                                ("i29052"
                                 "i29050"
                                 "i29048"
                                 "i29046"
                                 "i29044"
                                 "i29042"
                                 "i29040")))
                             (hygiene guile)))
                         (#{quasi 29310}#
                           (list #{p 29348}#)
                           (#{1+}# #{lev 29335}#))))
                     #{tmp 29344}#)
                   (let ((#{tmp 29351}#
                           ($sc-dispatch #{p 29334}# '(any . any))))
                     (if #{tmp 29351}#
                       (@apply
                         (lambda (#{p 29355}# #{q 29356}#)
                           (let ((#{tmp 29358}#
                                   ($sc-dispatch
                                     #{p 29355}#
                                     '(#(free-id
                                         #(syntax-object
                                           unquote
                                           ((top)
                                            #(ribcage
                                              #(p q)
                                              #((top) (top))
                                              #("i29066" "i29067"))
                                            #(ribcage () () ())
                                            #(ribcage
                                              #(p lev)
                                              #((top) (top))
                                              #("i29056" "i29057"))
                                            #(ribcage
                                              (emit quasivector
                                                    quasilist*
                                                    quasiappend
                                                    quasicons
                                                    vquasi
                                                    quasi)
                                              ((top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top)
                                               (top))
                                              ("i29052"
                                               "i29050"
                                               "i29048"
                                               "i29046"
                                               "i29044"
                                               "i29042"
                                               "i29040")))
                                           (hygiene guile)))
                                       .
                                       each-any))))
                             (if #{tmp 29358}#
                               (@apply
                                 (lambda (#{p 29362}#)
                                   (if (= #{lev 29335}# 0)
                                     (#{quasilist* 29314}#
                                       (map (lambda (#{tmp 29074 29398}#)
                                              (list '#(syntax-object
                                                       "value"
                                                       ((top)
                                                        #(ribcage
                                                          #(p)
                                                          #((top))
                                                          #("i29072"))
                                                        #(ribcage
                                                          #(p q)
                                                          #((top) (top))
                                                          #("i29066" "i29067"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(p lev)
                                                          #((top) (top))
                                                          #("i29056" "i29057"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i29052"
                                                           "i29050"
                                                           "i29048"
                                                           "i29046"
                                                           "i29044"
                                                           "i29042"
                                                           "i29040")))
                                                       (hygiene guile))
                                                    #{tmp 29074 29398}#))
                                            #{p 29362}#)
                                       (#{quasi 29310}#
                                         #{q 29356}#
                                         #{lev 29335}#))
                                     (#{quasicons 29312}#
                                       (#{quasicons 29312}#
                                         '(#(syntax-object
                                             "quote"
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i29072"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i29066" "i29067"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i29056" "i29057"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i29052"
                                                 "i29050"
                                                 "i29048"
                                                 "i29046"
                                                 "i29044"
                                                 "i29042"
                                                 "i29040")))
                                             (hygiene guile))
                                           #(syntax-object
                                             unquote
                                             ((top)
                                              #(ribcage
                                                #(p)
                                                #((top))
                                                #("i29072"))
                                              #(ribcage
                                                #(p q)
                                                #((top) (top))
                                                #("i29066" "i29067"))
                                              #(ribcage () () ())
                                              #(ribcage
                                                #(p lev)
                                                #((top) (top))
                                                #("i29056" "i29057"))
                                              #(ribcage
                                                (emit quasivector
                                                      quasilist*
                                                      quasiappend
                                                      quasicons
                                                      vquasi
                                                      quasi)
                                                ((top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top)
                                                 (top))
                                                ("i29052"
                                                 "i29050"
                                                 "i29048"
                                                 "i29046"
                                                 "i29044"
                                                 "i29042"
                                                 "i29040")))
                                             (hygiene guile)))
                                         (#{quasi 29310}#
                                           #{p 29362}#
                                           (#{1-}# #{lev 29335}#)))
                                       (#{quasi 29310}#
                                         #{q 29356}#
                                         #{lev 29335}#))))
                                 #{tmp 29358}#)
                               (let ((#{tmp 29403}#
                                       ($sc-dispatch
                                         #{p 29355}#
                                         '(#(free-id
                                             #(syntax-object
                                               unquote-splicing
                                               ((top)
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i29066" "i29067"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i29056" "i29057"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i29052"
                                                   "i29050"
                                                   "i29048"
                                                   "i29046"
                                                   "i29044"
                                                   "i29042"
                                                   "i29040")))
                                               (hygiene guile)))
                                           .
                                           each-any))))
                                 (if #{tmp 29403}#
                                   (@apply
                                     (lambda (#{p 29407}#)
                                       (if (= #{lev 29335}# 0)
                                         (#{quasiappend 29313}#
                                           (map (lambda (#{tmp 29079 29410}#)
                                                  (list '#(syntax-object
                                                           "value"
                                                           ((top)
                                                            #(ribcage
                                                              #(p)
                                                              #((top))
                                                              #("i29077"))
                                                            #(ribcage
                                                              #(p q)
                                                              #((top) (top))
                                                              #("i29066"
                                                                "i29067"))
                                                            #(ribcage () () ())
                                                            #(ribcage
                                                              #(p lev)
                                                              #((top) (top))
                                                              #("i29056"
                                                                "i29057"))
                                                            #(ribcage
                                                              (emit quasivector
                                                                    quasilist*
                                                                    quasiappend
                                                                    quasicons
                                                                    vquasi
                                                                    quasi)
                                                              ((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                              ("i29052"
                                                               "i29050"
                                                               "i29048"
                                                               "i29046"
                                                               "i29044"
                                                               "i29042"
                                                               "i29040")))
                                                           (hygiene guile))
                                                        #{tmp 29079 29410}#))
                                                #{p 29407}#)
                                           (#{quasi 29310}#
                                             #{q 29356}#
                                             #{lev 29335}#))
                                         (#{quasicons 29312}#
                                           (#{quasicons 29312}#
                                             '(#(syntax-object
                                                 "quote"
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i29077"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i29066" "i29067"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i29056" "i29057"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i29052"
                                                     "i29050"
                                                     "i29048"
                                                     "i29046"
                                                     "i29044"
                                                     "i29042"
                                                     "i29040")))
                                                 (hygiene guile))
                                               #(syntax-object
                                                 unquote-splicing
                                                 ((top)
                                                  #(ribcage
                                                    #(p)
                                                    #((top))
                                                    #("i29077"))
                                                  #(ribcage
                                                    #(p q)
                                                    #((top) (top))
                                                    #("i29066" "i29067"))
                                                  #(ribcage () () ())
                                                  #(ribcage
                                                    #(p lev)
                                                    #((top) (top))
                                                    #("i29056" "i29057"))
                                                  #(ribcage
                                                    (emit quasivector
                                                          quasilist*
                                                          quasiappend
                                                          quasicons
                                                          vquasi
                                                          quasi)
                                                    ((top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top)
                                                     (top))
                                                    ("i29052"
                                                     "i29050"
                                                     "i29048"
                                                     "i29046"
                                                     "i29044"
                                                     "i29042"
                                                     "i29040")))
                                                 (hygiene guile)))
                                             (#{quasi 29310}#
                                               #{p 29407}#
                                               (#{1-}# #{lev 29335}#)))
                                           (#{quasi 29310}#
                                             #{q 29356}#
                                             #{lev 29335}#))))
                                     #{tmp 29403}#)
                                   (#{quasicons 29312}#
                                     (#{quasi 29310}#
                                       #{p 29355}#
                                       #{lev 29335}#)
                                     (#{quasi 29310}#
                                       #{q 29356}#
                                       #{lev 29335}#)))))))
                         #{tmp 29351}#)
                       (let ((#{tmp 29424}#
                               ($sc-dispatch #{p 29334}# '#(vector each-any))))
                         (if #{tmp 29424}#
                           (@apply
                             (lambda (#{x 29428}#)
                               (let ((#{x 29431}#
                                       (#{vquasi 29311}#
                                         #{x 29428}#
                                         #{lev 29335}#)))
                                 (let ((#{tmp 29433}#
                                         ($sc-dispatch
                                           #{x 29431}#
                                           '(#(atom "quote") each-any))))
                                   (if #{tmp 29433}#
                                     (@apply
                                       (lambda (#{x 29437}#)
                                         (list '#(syntax-object
                                                  "quote"
                                                  ((top)
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29184"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29181"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29052"
                                                      "i29050"
                                                      "i29048"
                                                      "i29046"
                                                      "i29044"
                                                      "i29042"
                                                      "i29040")))
                                                  (hygiene guile))
                                               (list->vector #{x 29437}#)))
                                       #{tmp 29433}#)
                                     (letrec*
                                       ((#{f 29439}#
                                          (lambda (#{y 29451}# #{k 29452}#)
                                            (let ((#{tmp 29454}#
                                                    ($sc-dispatch
                                                      #{y 29451}#
                                                      '(#(atom "quote")
                                                        each-any))))
                                              (if #{tmp 29454}#
                                                (@apply
                                                  (lambda (#{y 29457}#)
                                                    (#{k 29452}#
                                                      (map (lambda (#{tmp 29209 29458}#)
                                                             (list '#(syntax-object
                                                                      "quote"
                                                                      ((top)
                                                                       #(ribcage
                                                                         #(y)
                                                                         #((top))
                                                                         #("i29207"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(f
                                                                           y
                                                                           k)
                                                                         #((top)
                                                                           (top)
                                                                           (top))
                                                                         #("i29189"
                                                                           "i29190"
                                                                           "i29191"))
                                                                       #(ribcage
                                                                         #(_)
                                                                         #((top))
                                                                         #("i29187"))
                                                                       #(ribcage
                                                                         ()
                                                                         ()
                                                                         ())
                                                                       #(ribcage
                                                                         #(x)
                                                                         #((top))
                                                                         #("i29181"))
                                                                       #(ribcage
                                                                         (emit quasivector
                                                                               quasilist*
                                                                               quasiappend
                                                                               quasicons
                                                                               vquasi
                                                                               quasi)
                                                                         ((top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top)
                                                                          (top))
                                                                         ("i29052"
                                                                          "i29050"
                                                                          "i29048"
                                                                          "i29046"
                                                                          "i29044"
                                                                          "i29042"
                                                                          "i29040")))
                                                                      (hygiene
                                                                        guile))
                                                                   #{tmp 29209 29458}#))
                                                           #{y 29457}#)))
                                                  #{tmp 29454}#)
                                                (let ((#{tmp 29459}#
                                                        ($sc-dispatch
                                                          #{y 29451}#
                                                          '(#(atom "list")
                                                            .
                                                            each-any))))
                                                  (if #{tmp 29459}#
                                                    (@apply
                                                      (lambda (#{y 29462}#)
                                                        (#{k 29452}#
                                                          #{y 29462}#))
                                                      #{tmp 29459}#)
                                                    (let ((#{tmp 29463}#
                                                            ($sc-dispatch
                                                              #{y 29451}#
                                                              '(#(atom "list*")
                                                                .
                                                                #(each+
                                                                  any
                                                                  (any)
                                                                  ())))))
                                                      (if #{tmp 29463}#
                                                        (@apply
                                                          (lambda (#{y 29466}#
                                                                   #{z 29467}#)
                                                            (#{f 29439}#
                                                              #{z 29467}#
                                                              (lambda (#{ls 29468}#)
                                                                (#{k 29452}#
                                                                  (append
                                                                    #{y 29466}#
                                                                    #{ls 29468}#)))))
                                                          #{tmp 29463}#)
                                                        (list '#(syntax-object
                                                                 "list->vector"
                                                                 ((top)
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(#{ g29224}#)
                                                                    #((m29225
                                                                        top))
                                                                    #("i29228"))
                                                                  #(ribcage
                                                                    #(else)
                                                                    #((top))
                                                                    #("i29222"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(f y k)
                                                                    #((top)
                                                                      (top)
                                                                      (top))
                                                                    #("i29189"
                                                                      "i29190"
                                                                      "i29191"))
                                                                  #(ribcage
                                                                    #(_)
                                                                    #((top))
                                                                    #("i29187"))
                                                                  #(ribcage
                                                                    ()
                                                                    ()
                                                                    ())
                                                                  #(ribcage
                                                                    #(x)
                                                                    #((top))
                                                                    #("i29181"))
                                                                  #(ribcage
                                                                    (emit quasivector
                                                                          quasilist*
                                                                          quasiappend
                                                                          quasicons
                                                                          vquasi
                                                                          quasi)
                                                                    ((top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top)
                                                                     (top))
                                                                    ("i29052"
                                                                     "i29050"
                                                                     "i29048"
                                                                     "i29046"
                                                                     "i29044"
                                                                     "i29042"
                                                                     "i29040")))
                                                                 (hygiene
                                                                   guile))
                                                              #{x 29431}#))))))))))
                                       (#{f 29439}#
                                         #{x 29431}#
                                         (lambda (#{ls 29441}#)
                                           (let ((#{tmp 29443}#
                                                   ($sc-dispatch
                                                     #{ls 29441}#
                                                     'each-any)))
                                             (if #{tmp 29443}#
                                               (@apply
                                                 (lambda (#{ g29197 29446}#)
                                                   (cons '#(syntax-object
                                                            "vector"
                                                            ((top)
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(#{ g29197}#)
                                                               #((m29198 top))
                                                               #("i29202"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(ls)
                                                               #((top))
                                                               #("i29196"))
                                                             #(ribcage
                                                               #(_)
                                                               #((top))
                                                               #("i29187"))
                                                             #(ribcage
                                                               ()
                                                               ()
                                                               ())
                                                             #(ribcage
                                                               #(x)
                                                               #((top))
                                                               #("i29181"))
                                                             #(ribcage
                                                               (emit quasivector
                                                                     quasilist*
                                                                     quasiappend
                                                                     quasicons
                                                                     vquasi
                                                                     quasi)
                                                               ((top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top)
                                                                (top))
                                                               ("i29052"
                                                                "i29050"
                                                                "i29048"
                                                                "i29046"
                                                                "i29044"
                                                                "i29042"
                                                                "i29040")))
                                                            (hygiene guile))
                                                         #{ g29197 29446}#))
                                                 #{tmp 29443}#)
                                               (syntax-violation
                                                 #f
                                                 "source expression failed to match any pattern"
                                                 #{ls 29441}#))))))))))
                             #{tmp 29424}#)
                           (list '#(syntax-object
                                    "quote"
                                    ((top)
                                     #(ribcage #(p) #((top)) #("i29087"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p lev)
                                       #((top) (top))
                                       #("i29056" "i29057"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i29052"
                                        "i29050"
                                        "i29048"
                                        "i29046"
                                        "i29044"
                                        "i29042"
                                        "i29040")))
                                    (hygiene guile))
                                 #{p 29334}#)))))))))))
       (#{vquasi 29311}#
         (lambda (#{p 29496}# #{lev 29497}#)
           (let ((#{tmp 29499}#
                   ($sc-dispatch #{p 29496}# '(any . any))))
             (if #{tmp 29499}#
               (@apply
                 (lambda (#{p 29503}# #{q 29504}#)
                   (let ((#{tmp 29506}#
                           ($sc-dispatch
                             #{p 29503}#
                             '(#(free-id
                                 #(syntax-object
                                   unquote
                                   ((top)
                                    #(ribcage
                                      #(p q)
                                      #((top) (top))
                                      #("i29095" "i29096"))
                                    #(ribcage () () ())
                                    #(ribcage
                                      #(p lev)
                                      #((top) (top))
                                      #("i29091" "i29092"))
                                    #(ribcage
                                      (emit quasivector
                                            quasilist*
                                            quasiappend
                                            quasicons
                                            vquasi
                                            quasi)
                                      ((top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top)
                                       (top))
                                      ("i29052"
                                       "i29050"
                                       "i29048"
                                       "i29046"
                                       "i29044"
                                       "i29042"
                                       "i29040")))
                                   (hygiene guile)))
                               .
                               each-any))))
                     (if #{tmp 29506}#
                       (@apply
                         (lambda (#{p 29510}#)
                           (if (= #{lev 29497}# 0)
                             (#{quasilist* 29314}#
                               (map (lambda (#{tmp 29103 29546}#)
                                      (list '#(syntax-object
                                               "value"
                                               ((top)
                                                #(ribcage
                                                  #(p)
                                                  #((top))
                                                  #("i29101"))
                                                #(ribcage
                                                  #(p q)
                                                  #((top) (top))
                                                  #("i29095" "i29096"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(p lev)
                                                  #((top) (top))
                                                  #("i29091" "i29092"))
                                                #(ribcage
                                                  (emit quasivector
                                                        quasilist*
                                                        quasiappend
                                                        quasicons
                                                        vquasi
                                                        quasi)
                                                  ((top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top)
                                                   (top))
                                                  ("i29052"
                                                   "i29050"
                                                   "i29048"
                                                   "i29046"
                                                   "i29044"
                                                   "i29042"
                                                   "i29040")))
                                               (hygiene guile))
                                            #{tmp 29103 29546}#))
                                    #{p 29510}#)
                               (#{vquasi 29311}# #{q 29504}# #{lev 29497}#))
                             (#{quasicons 29312}#
                               (#{quasicons 29312}#
                                 '(#(syntax-object
                                     "quote"
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i29101"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i29095" "i29096"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i29091" "i29092"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i29052"
                                         "i29050"
                                         "i29048"
                                         "i29046"
                                         "i29044"
                                         "i29042"
                                         "i29040")))
                                     (hygiene guile))
                                   #(syntax-object
                                     unquote
                                     ((top)
                                      #(ribcage #(p) #((top)) #("i29101"))
                                      #(ribcage
                                        #(p q)
                                        #((top) (top))
                                        #("i29095" "i29096"))
                                      #(ribcage () () ())
                                      #(ribcage
                                        #(p lev)
                                        #((top) (top))
                                        #("i29091" "i29092"))
                                      #(ribcage
                                        (emit quasivector
                                              quasilist*
                                              quasiappend
                                              quasicons
                                              vquasi
                                              quasi)
                                        ((top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top)
                                         (top))
                                        ("i29052"
                                         "i29050"
                                         "i29048"
                                         "i29046"
                                         "i29044"
                                         "i29042"
                                         "i29040")))
                                     (hygiene guile)))
                                 (#{quasi 29310}#
                                   #{p 29510}#
                                   (#{1-}# #{lev 29497}#)))
                               (#{vquasi 29311}# #{q 29504}# #{lev 29497}#))))
                         #{tmp 29506}#)
                       (let ((#{tmp 29553}#
                               ($sc-dispatch
                                 #{p 29503}#
                                 '(#(free-id
                                     #(syntax-object
                                       unquote-splicing
                                       ((top)
                                        #(ribcage
                                          #(p q)
                                          #((top) (top))
                                          #("i29095" "i29096"))
                                        #(ribcage () () ())
                                        #(ribcage
                                          #(p lev)
                                          #((top) (top))
                                          #("i29091" "i29092"))
                                        #(ribcage
                                          (emit quasivector
                                                quasilist*
                                                quasiappend
                                                quasicons
                                                vquasi
                                                quasi)
                                          ((top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top)
                                           (top))
                                          ("i29052"
                                           "i29050"
                                           "i29048"
                                           "i29046"
                                           "i29044"
                                           "i29042"
                                           "i29040")))
                                       (hygiene guile)))
                                   .
                                   each-any))))
                         (if #{tmp 29553}#
                           (@apply
                             (lambda (#{p 29557}#)
                               (if (= #{lev 29497}# 0)
                                 (#{quasiappend 29313}#
                                   (map (lambda (#{tmp 29108 29560}#)
                                          (list '#(syntax-object
                                                   "value"
                                                   ((top)
                                                    #(ribcage
                                                      #(p)
                                                      #((top))
                                                      #("i29106"))
                                                    #(ribcage
                                                      #(p q)
                                                      #((top) (top))
                                                      #("i29095" "i29096"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(p lev)
                                                      #((top) (top))
                                                      #("i29091" "i29092"))
                                                    #(ribcage
                                                      (emit quasivector
                                                            quasilist*
                                                            quasiappend
                                                            quasicons
                                                            vquasi
                                                            quasi)
                                                      ((top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top)
                                                       (top))
                                                      ("i29052"
                                                       "i29050"
                                                       "i29048"
                                                       "i29046"
                                                       "i29044"
                                                       "i29042"
                                                       "i29040")))
                                                   (hygiene guile))
                                                #{tmp 29108 29560}#))
                                        #{p 29557}#)
                                   (#{vquasi 29311}#
                                     #{q 29504}#
                                     #{lev 29497}#))
                                 (#{quasicons 29312}#
                                   (#{quasicons 29312}#
                                     '(#(syntax-object
                                         "quote"
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i29106"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i29095" "i29096"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i29091" "i29092"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i29052"
                                             "i29050"
                                             "i29048"
                                             "i29046"
                                             "i29044"
                                             "i29042"
                                             "i29040")))
                                         (hygiene guile))
                                       #(syntax-object
                                         unquote-splicing
                                         ((top)
                                          #(ribcage #(p) #((top)) #("i29106"))
                                          #(ribcage
                                            #(p q)
                                            #((top) (top))
                                            #("i29095" "i29096"))
                                          #(ribcage () () ())
                                          #(ribcage
                                            #(p lev)
                                            #((top) (top))
                                            #("i29091" "i29092"))
                                          #(ribcage
                                            (emit quasivector
                                                  quasilist*
                                                  quasiappend
                                                  quasicons
                                                  vquasi
                                                  quasi)
                                            ((top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top)
                                             (top))
                                            ("i29052"
                                             "i29050"
                                             "i29048"
                                             "i29046"
                                             "i29044"
                                             "i29042"
                                             "i29040")))
                                         (hygiene guile)))
                                     (#{quasi 29310}#
                                       #{p 29557}#
                                       (#{1-}# #{lev 29497}#)))
                                   (#{vquasi 29311}#
                                     #{q 29504}#
                                     #{lev 29497}#))))
                             #{tmp 29553}#)
                           (#{quasicons 29312}#
                             (#{quasi 29310}# #{p 29503}# #{lev 29497}#)
                             (#{vquasi 29311}# #{q 29504}# #{lev 29497}#)))))))
                 #{tmp 29499}#)
               (let ((#{tmp 29578}# ($sc-dispatch #{p 29496}# '())))
                 (if #{tmp 29578}#
                   (@apply
                     (lambda ()
                       '(#(syntax-object
                           "quote"
                           ((top)
                            #(ribcage () () ())
                            #(ribcage
                              #(p lev)
                              #((top) (top))
                              #("i29091" "i29092"))
                            #(ribcage
                              (emit quasivector
                                    quasilist*
                                    quasiappend
                                    quasicons
                                    vquasi
                                    quasi)
                              ((top) (top) (top) (top) (top) (top) (top))
                              ("i29052"
                               "i29050"
                               "i29048"
                               "i29046"
                               "i29044"
                               "i29042"
                               "i29040")))
                           (hygiene guile))
                         ()))
                     #{tmp 29578}#)
                   (syntax-violation
                     #f
                     "source expression failed to match any pattern"
                     #{p 29496}#)))))))
       (#{quasicons 29312}#
         (lambda (#{x 29591}# #{y 29592}#)
           (let ((#{tmp 29593}# (list #{x 29591}# #{y 29592}#)))
             (let ((#{tmp 29594}#
                     ($sc-dispatch #{tmp 29593}# '(any any))))
               (if #{tmp 29594}#
                 (@apply
                   (lambda (#{x 29596}# #{y 29597}#)
                     (let ((#{tmp 29599}#
                             ($sc-dispatch
                               #{y 29597}#
                               '(#(atom "quote") any))))
                       (if #{tmp 29599}#
                         (@apply
                           (lambda (#{dy 29603}#)
                             (let ((#{tmp 29605}#
                                     ($sc-dispatch
                                       #{x 29596}#
                                       '(#(atom "quote") any))))
                               (if #{tmp 29605}#
                                 (@apply
                                   (lambda (#{dx 29609}#)
                                     (list '#(syntax-object
                                              "quote"
                                              ((top)
                                               #(ribcage
                                                 #(dx)
                                                 #((top))
                                                 #("i29130"))
                                               #(ribcage
                                                 #(dy)
                                                 #((top))
                                                 #("i29126"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29120" "i29121"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29115" "i29116"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i29052"
                                                  "i29050"
                                                  "i29048"
                                                  "i29046"
                                                  "i29044"
                                                  "i29042"
                                                  "i29040")))
                                              (hygiene guile))
                                           (cons #{dx 29609}# #{dy 29603}#)))
                                   #{tmp 29605}#)
                                 (if (null? #{dy 29603}#)
                                   (list '#(syntax-object
                                            "list"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i29132"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i29126"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29120" "i29121"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29115" "i29116"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i29052"
                                                "i29050"
                                                "i29048"
                                                "i29046"
                                                "i29044"
                                                "i29042"
                                                "i29040")))
                                            (hygiene guile))
                                         #{x 29596}#)
                                   (list '#(syntax-object
                                            "list*"
                                            ((top)
                                             #(ribcage
                                               #(_)
                                               #((top))
                                               #("i29132"))
                                             #(ribcage
                                               #(dy)
                                               #((top))
                                               #("i29126"))
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29120" "i29121"))
                                             #(ribcage () () ())
                                             #(ribcage () () ())
                                             #(ribcage
                                               #(x y)
                                               #((top) (top))
                                               #("i29115" "i29116"))
                                             #(ribcage
                                               (emit quasivector
                                                     quasilist*
                                                     quasiappend
                                                     quasicons
                                                     vquasi
                                                     quasi)
                                               ((top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top)
                                                (top))
                                               ("i29052"
                                                "i29050"
                                                "i29048"
                                                "i29046"
                                                "i29044"
                                                "i29042"
                                                "i29040")))
                                            (hygiene guile))
                                         #{x 29596}#
                                         #{y 29597}#)))))
                           #{tmp 29599}#)
                         (let ((#{tmp 29614}#
                                 ($sc-dispatch
                                   #{y 29597}#
                                   '(#(atom "list") . any))))
                           (if #{tmp 29614}#
                             (@apply
                               (lambda (#{stuff 29618}#)
                                 (cons '#(syntax-object
                                          "list"
                                          ((top)
                                           #(ribcage
                                             #(stuff)
                                             #((top))
                                             #("i29135"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29120" "i29121"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29115" "i29116"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29052"
                                              "i29050"
                                              "i29048"
                                              "i29046"
                                              "i29044"
                                              "i29042"
                                              "i29040")))
                                          (hygiene guile))
                                       (cons #{x 29596}# #{stuff 29618}#)))
                               #{tmp 29614}#)
                             (let ((#{tmp 29619}#
                                     ($sc-dispatch
                                       #{y 29597}#
                                       '(#(atom "list*") . any))))
                               (if #{tmp 29619}#
                                 (@apply
                                   (lambda (#{stuff 29623}#)
                                     (cons '#(syntax-object
                                              "list*"
                                              ((top)
                                               #(ribcage
                                                 #(stuff)
                                                 #((top))
                                                 #("i29138"))
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29120" "i29121"))
                                               #(ribcage () () ())
                                               #(ribcage () () ())
                                               #(ribcage
                                                 #(x y)
                                                 #((top) (top))
                                                 #("i29115" "i29116"))
                                               #(ribcage
                                                 (emit quasivector
                                                       quasilist*
                                                       quasiappend
                                                       quasicons
                                                       vquasi
                                                       quasi)
                                                 ((top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top)
                                                  (top))
                                                 ("i29052"
                                                  "i29050"
                                                  "i29048"
                                                  "i29046"
                                                  "i29044"
                                                  "i29042"
                                                  "i29040")))
                                              (hygiene guile))
                                           (cons #{x 29596}# #{stuff 29623}#)))
                                   #{tmp 29619}#)
                                 (list '#(syntax-object
                                          "list*"
                                          ((top)
                                           #(ribcage #(_) #((top)) #("i29140"))
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29120" "i29121"))
                                           #(ribcage () () ())
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(x y)
                                             #((top) (top))
                                             #("i29115" "i29116"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29052"
                                              "i29050"
                                              "i29048"
                                              "i29046"
                                              "i29044"
                                              "i29042"
                                              "i29040")))
                                          (hygiene guile))
                                       #{x 29596}#
                                       #{y 29597}#))))))))
                   #{tmp 29594}#)
                 (syntax-violation
                   #f
                   "source expression failed to match any pattern"
                   #{tmp 29593}#))))))
       (#{quasiappend 29313}#
         (lambda (#{x 29634}# #{y 29635}#)
           (let ((#{tmp 29637}#
                   ($sc-dispatch #{y 29635}# '(#(atom "quote") ()))))
             (if #{tmp 29637}#
               (@apply
                 (lambda ()
                   (if (null? #{x 29634}#)
                     '(#(syntax-object
                         "quote"
                         ((top)
                          #(ribcage () () ())
                          #(ribcage
                            #(x y)
                            #((top) (top))
                            #("i29144" "i29145"))
                          #(ribcage
                            (emit quasivector
                                  quasilist*
                                  quasiappend
                                  quasicons
                                  vquasi
                                  quasi)
                            ((top) (top) (top) (top) (top) (top) (top))
                            ("i29052"
                             "i29050"
                             "i29048"
                             "i29046"
                             "i29044"
                             "i29042"
                             "i29040")))
                         (hygiene guile))
                       ())
                     (if (null? (cdr #{x 29634}#))
                       (car #{x 29634}#)
                       (let ((#{tmp 29642}#
                               ($sc-dispatch #{x 29634}# 'each-any)))
                         (if #{tmp 29642}#
                           (@apply
                             (lambda (#{p 29646}#)
                               (cons '#(syntax-object
                                        "append"
                                        ((top)
                                         #(ribcage () () ())
                                         #(ribcage #(p) #((top)) #("i29156"))
                                         #(ribcage () () ())
                                         #(ribcage
                                           #(x y)
                                           #((top) (top))
                                           #("i29144" "i29145"))
                                         #(ribcage
                                           (emit quasivector
                                                 quasilist*
                                                 quasiappend
                                                 quasicons
                                                 vquasi
                                                 quasi)
                                           ((top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top)
                                            (top))
                                           ("i29052"
                                            "i29050"
                                            "i29048"
                                            "i29046"
                                            "i29044"
                                            "i29042"
                                            "i29040")))
                                        (hygiene guile))
                                     #{p 29646}#))
                             #{tmp 29642}#)
                           (syntax-violation
                             #f
                             "source expression failed to match any pattern"
                             #{x 29634}#))))))
                 #{tmp 29637}#)
               (if (null? #{x 29634}#)
                 #{y 29635}#
                 (let ((#{tmp 29654}# (list #{x 29634}# #{y 29635}#)))
                   (let ((#{tmp 29655}#
                           ($sc-dispatch #{tmp 29654}# '(each-any any))))
                     (if #{tmp 29655}#
                       (@apply
                         (lambda (#{p 29657}# #{y 29658}#)
                           (cons '#(syntax-object
                                    "append"
                                    ((top)
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(p y)
                                       #((top) (top))
                                       #("i29167" "i29168"))
                                     #(ribcage #(_) #((top)) #("i29159"))
                                     #(ribcage () () ())
                                     #(ribcage
                                       #(x y)
                                       #((top) (top))
                                       #("i29144" "i29145"))
                                     #(ribcage
                                       (emit quasivector
                                             quasilist*
                                             quasiappend
                                             quasicons
                                             vquasi
                                             quasi)
                                       ((top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top)
                                        (top))
                                       ("i29052"
                                        "i29050"
                                        "i29048"
                                        "i29046"
                                        "i29044"
                                        "i29042"
                                        "i29040")))
                                    (hygiene guile))
                                 (append #{p 29657}# (list #{y 29658}#))))
                         #{tmp 29655}#)
                       (syntax-violation
                         #f
                         "source expression failed to match any pattern"
                         #{tmp 29654}#)))))))))
       (#{quasilist* 29314}#
         (lambda (#{x 29662}# #{y 29663}#)
           (letrec*
             ((#{f 29664}#
                (lambda (#{x 29753}#)
                  (if (null? #{x 29753}#)
                    #{y 29663}#
                    (#{quasicons 29312}#
                      (car #{x 29753}#)
                      (#{f 29664}# (cdr #{x 29753}#)))))))
             (#{f 29664}# #{x 29662}#))))
       (#{emit 29316}#
         (lambda (#{x 29756}#)
           (let ((#{tmp 29758}#
                   ($sc-dispatch #{x 29756}# '(#(atom "quote") any))))
             (if #{tmp 29758}#
               (@apply
                 (lambda (#{x 29762}#)
                   (list '#(syntax-object
                            quote
                            ((top)
                             #(ribcage #(x) #((top)) #("i29234"))
                             #(ribcage () () ())
                             #(ribcage #(x) #((top)) #("i29231"))
                             #(ribcage
                               (emit quasivector
                                     quasilist*
                                     quasiappend
                                     quasicons
                                     vquasi
                                     quasi)
                               ((top) (top) (top) (top) (top) (top) (top))
                               ("i29052"
                                "i29050"
                                "i29048"
                                "i29046"
                                "i29044"
                                "i29042"
                                "i29040")))
                            (hygiene guile))
                         #{x 29762}#))
                 #{tmp 29758}#)
               (let ((#{tmp 29763}#
                       ($sc-dispatch
                         #{x 29756}#
                         '(#(atom "list") . each-any))))
                 (if #{tmp 29763}#
                   (@apply
                     (lambda (#{x 29767}#)
                       (let ((#{tmp 29768}# (map #{emit 29316}# #{x 29767}#)))
                         (let ((#{tmp 29769}#
                                 ($sc-dispatch #{tmp 29768}# 'each-any)))
                           (if #{tmp 29769}#
                             (@apply
                               (lambda (#{ g29239 29771}#)
                                 (cons '#(syntax-object
                                          list
                                          ((top)
                                           #(ribcage () () ())
                                           #(ribcage
                                             #(#{ g29239}#)
                                             #((m29240 top))
                                             #("i29244"))
                                           #(ribcage #(x) #((top)) #("i29237"))
                                           #(ribcage () () ())
                                           #(ribcage #(x) #((top)) #("i29231"))
                                           #(ribcage
                                             (emit quasivector
                                                   quasilist*
                                                   quasiappend
                                                   quasicons
                                                   vquasi
                                                   quasi)
                                             ((top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top)
                                              (top))
                                             ("i29052"
                                              "i29050"
                                              "i29048"
                                              "i29046"
                                              "i29044"
                                              "i29042"
                                              "i29040")))
                                          (hygiene guile))
                                       #{ g29239 29771}#))
                               #{tmp 29769}#)
                             (syntax-violation
                               #f
                               "source expression failed to match any pattern"
                               #{tmp 29768}#)))))
                     #{tmp 29763}#)
                   (let ((#{tmp 29772}#
                           ($sc-dispatch
                             #{x 29756}#
                             '(#(atom "list*") . #(each+ any (any) ())))))
                     (if #{tmp 29772}#
                       (@apply
                         (lambda (#{x 29776}# #{y 29777}#)
                           (letrec*
                             ((#{f 29778}#
                                (lambda (#{x* 29781}#)
                                  (if (null? #{x* 29781}#)
                                    (#{emit 29316}# #{y 29777}#)
                                    (let ((#{tmp 29782}#
                                            (list (#{emit 29316}#
                                                    (car #{x* 29781}#))
                                                  (#{f 29778}#
                                                    (cdr #{x* 29781}#)))))
                                      (let ((#{tmp 29783}#
                                              ($sc-dispatch
                                                #{tmp 29782}#
                                                '(any any))))
                                        (if #{tmp 29783}#
                                          (@apply
                                            (lambda (#{ g29259 29785}#
                                                     #{ g29258 29786}#)
                                              (list '#(syntax-object
                                                       cons
                                                       ((top)
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(#{ g29259}#
                                                            #{ g29258}#)
                                                          #((m29260 top)
                                                            (m29260 top))
                                                          #("i29264" "i29265"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(f x*)
                                                          #((top) (top))
                                                          #("i29253" "i29254"))
                                                        #(ribcage
                                                          #(x y)
                                                          #((top) (top))
                                                          #("i29249" "i29250"))
                                                        #(ribcage () () ())
                                                        #(ribcage
                                                          #(x)
                                                          #((top))
                                                          #("i29231"))
                                                        #(ribcage
                                                          (emit quasivector
                                                                quasilist*
                                                                quasiappend
                                                                quasicons
                                                                vquasi
                                                                quasi)
                                                          ((top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top)
                                                           (top))
                                                          ("i29052"
                                                           "i29050"
                                                           "i29048"
                                                           "i29046"
                                                           "i29044"
                                                           "i29042"
                                                           "i29040")))
                                                       (hygiene guile))
                                                    #{ g29259 29785}#
                                                    #{ g29258 29786}#))
                                            #{tmp 29783}#)
                                          (syntax-violation
                                            #f
                                            "source expression failed to match any pattern"
                                            #{tmp 29782}#))))))))
                             (#{f 29778}# #{x 29776}#)))
                         #{tmp 29772}#)
                       (let ((#{tmp 29787}#
                               ($sc-dispatch
                                 #{x 29756}#
                                 '(#(atom "append") . each-any))))
                         (if #{tmp 29787}#
                           (@apply
                             (lambda (#{x 29791}#)
                               (let ((#{tmp 29792}#
                                       (map #{emit 29316}# #{x 29791}#)))
                                 (let ((#{tmp 29793}#
                                         ($sc-dispatch
                                           #{tmp 29792}#
                                           'each-any)))
                                   (if #{tmp 29793}#
                                     (@apply
                                       (lambda (#{ g29271 29795}#)
                                         (cons '#(syntax-object
                                                  append
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29271}#)
                                                     #((m29272 top))
                                                     #("i29276"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29269"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29231"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29052"
                                                      "i29050"
                                                      "i29048"
                                                      "i29046"
                                                      "i29044"
                                                      "i29042"
                                                      "i29040")))
                                                  (hygiene guile))
                                               #{ g29271 29795}#))
                                       #{tmp 29793}#)
                                     (syntax-violation
                                       #f
                                       "source expression failed to match any pattern"
                                       #{tmp 29792}#)))))
                             #{tmp 29787}#)
                           (let ((#{tmp 29796}#
                                   ($sc-dispatch
                                     #{x 29756}#
                                     '(#(atom "vector") . each-any))))
                             (if #{tmp 29796}#
                               (@apply
                                 (lambda (#{x 29800}#)
                                   (let ((#{tmp 29801}#
                                           (map #{emit 29316}# #{x 29800}#)))
                                     (let ((#{tmp 29802}#
                                             ($sc-dispatch
                                               #{tmp 29801}#
                                               'each-any)))
                                       (if #{tmp 29802}#
                                         (@apply
                                           (lambda (#{ g29283 29804}#)
                                             (cons '#(syntax-object
                                                      vector
                                                      ((top)
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(#{ g29283}#)
                                                         #((m29284 top))
                                                         #("i29288"))
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29281"))
                                                       #(ribcage () () ())
                                                       #(ribcage
                                                         #(x)
                                                         #((top))
                                                         #("i29231"))
                                                       #(ribcage
                                                         (emit quasivector
                                                               quasilist*
                                                               quasiappend
                                                               quasicons
                                                               vquasi
                                                               quasi)
                                                         ((top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top)
                                                          (top))
                                                         ("i29052"
                                                          "i29050"
                                                          "i29048"
                                                          "i29046"
                                                          "i29044"
                                                          "i29042"
                                                          "i29040")))
                                                      (hygiene guile))
                                                   #{ g29283 29804}#))
                                           #{tmp 29802}#)
                                         (syntax-violation
                                           #f
                                           "source expression failed to match any pattern"
                                           #{tmp 29801}#)))))
                                 #{tmp 29796}#)
                               (let ((#{tmp 29805}#
                                       ($sc-dispatch
                                         #{x 29756}#
                                         '(#(atom "list->vector") any))))
                                 (if #{tmp 29805}#
                                   (@apply
                                     (lambda (#{x 29809}#)
                                       (let ((#{tmp 29810}#
                                               (#{emit 29316}# #{x 29809}#)))
                                         (list '#(syntax-object
                                                  list->vector
                                                  ((top)
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(#{ g29295}#)
                                                     #((m29296 top))
                                                     #("i29299"))
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29293"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i29231"))
                                                   #(ribcage
                                                     (emit quasivector
                                                           quasilist*
                                                           quasiappend
                                                           quasicons
                                                           vquasi
                                                           quasi)
                                                     ((top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top)
                                                      (top))
                                                     ("i29052"
                                                      "i29050"
                                                      "i29048"
                                                      "i29046"
                                                      "i29044"
                                                      "i29042"
                                                      "i29040")))
                                                  (hygiene guile))
                                               #{tmp 29810}#)))
                                     #{tmp 29805}#)
                                   (let ((#{tmp 29813}#
                                           ($sc-dispatch
                                             #{x 29756}#
                                             '(#(atom "value") any))))
                                     (if #{tmp 29813}#
                                       (@apply
                                         (lambda (#{x 29817}#) #{x 29817}#)
                                         #{tmp 29813}#)
                                       (syntax-violation
                                         #f
                                         "source expression failed to match any pattern"
                                         #{x 29756}#))))))))))))))))))
      (lambda (#{x 29317}#)
        (let ((#{tmp 29319}#
                ($sc-dispatch #{x 29317}# '(_ any))))
          (if #{tmp 29319}#
            (@apply
              (lambda (#{e 29323}#)
                (#{emit 29316}# (#{quasi 29310}# #{e 29323}# 0)))
              #{tmp 29319}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29317}#)))))))

(define include
  (make-syntax-transformer
    'include
    'macro
    (lambda (#{x 29872}#)
      (letrec*
        ((#{read-file 29873}#
           (lambda (#{fn 29984}# #{k 29985}#)
             (let ((#{p 29986}# (open-input-file #{fn 29984}#)))
               (letrec*
                 ((#{f 29987}#
                    (lambda (#{x 30041}# #{result 30042}#)
                      (if (eof-object? #{x 30041}#)
                        (begin
                          (close-input-port #{p 29986}#)
                          (reverse #{result 30042}#))
                        (#{f 29987}#
                          (read #{p 29986}#)
                          (cons (datum->syntax #{k 29985}# #{x 30041}#)
                                #{result 30042}#))))))
                 (#{f 29987}# (read #{p 29986}#) '()))))))
        (let ((#{tmp 29875}#
                ($sc-dispatch #{x 29872}# '(any any))))
          (if #{tmp 29875}#
            (@apply
              (lambda (#{k 29879}# #{filename 29880}#)
                (let ((#{fn 29881}# (syntax->datum #{filename 29880}#)))
                  (let ((#{tmp 29882}#
                          (#{read-file 29873}#
                            #{fn 29881}#
                            #{filename 29880}#)))
                    (let ((#{tmp 29883}#
                            ($sc-dispatch #{tmp 29882}# 'each-any)))
                      (if #{tmp 29883}#
                        (@apply
                          (lambda (#{exp 29901}#)
                            (cons '#(syntax-object
                                     begin
                                     ((top)
                                      #(ribcage () () ())
                                      #(ribcage #(exp) #((top)) #("i29869"))
                                      #(ribcage () () ())
                                      #(ribcage () () ())
                                      #(ribcage #(fn) #((top)) #("i29864"))
                                      #(ribcage
                                        #(k filename)
                                        #((top) (top))
                                        #("i29860" "i29861"))
                                      #(ribcage (read-file) ((top)) ("i29844"))
                                      #(ribcage #(x) #((top)) #("i29843")))
                                     (hygiene guile))
                                  #{exp 29901}#))
                          #{tmp 29883}#)
                        (syntax-violation
                          #f
                          "source expression failed to match any pattern"
                          #{tmp 29882}#))))))
              #{tmp 29875}#)
            (syntax-violation
              #f
              "source expression failed to match any pattern"
              #{x 29872}#)))))))

(define include-from-path
  (make-syntax-transformer
    'include-from-path
    'macro
    (lambda (#{x 30061}#)
      (let ((#{tmp 30063}#
              ($sc-dispatch #{x 30061}# '(any any))))
        (if #{tmp 30063}#
          (@apply
            (lambda (#{k 30067}# #{filename 30068}#)
              (let ((#{fn 30069}# (syntax->datum #{filename 30068}#)))
                (let ((#{tmp 30070}#
                        (datum->syntax
                          #{filename 30068}#
                          (let ((#{t 30073}# (%search-load-path #{fn 30069}#)))
                            (if #{t 30073}#
                              #{t 30073}#
                              (syntax-violation
                                'include-from-path
                                "file not found in path"
                                #{x 30061}#
                                #{filename 30068}#))))))
                  (list '#(syntax-object
                           include
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i30055"))
                            #(ribcage () () ())
                            #(ribcage () () ())
                            #(ribcage #(fn) #((top)) #("i30051"))
                            #(ribcage
                              #(k filename)
                              #((top) (top))
                              #("i30047" "i30048"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30044")))
                           (hygiene guile))
                        #{tmp 30070}#))))
            #{tmp 30063}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 30061}#))))))

(define unquote
  (make-syntax-transformer
    'unquote
    'macro
    (lambda (#{x 30082}#)
      (syntax-violation
        'unquote
        "expression not valid outside of quasiquote"
        #{x 30082}#))))

(define unquote-splicing
  (make-syntax-transformer
    'unquote-splicing
    'macro
    (lambda (#{x 30085}#)
      (syntax-violation
        'unquote-splicing
        "expression not valid outside of quasiquote"
        #{x 30085}#))))

(define case
  (make-syntax-transformer
    'case
    'macro
    (lambda (#{x 30141}#)
      (let ((#{tmp 30143}#
              ($sc-dispatch
                #{x 30141}#
                '(_ any any . each-any))))
        (if #{tmp 30143}#
          (@apply
            (lambda (#{e 30147}# #{m1 30148}# #{m2 30149}#)
              (let ((#{tmp 30150}#
                      (letrec*
                        ((#{f 30196}#
                           (lambda (#{clause 30199}# #{clauses 30200}#)
                             (if (null? #{clauses 30200}#)
                               (let ((#{tmp 30202}#
                                       ($sc-dispatch
                                         #{clause 30199}#
                                         '(#(free-id
                                             #(syntax-object
                                               else
                                               ((top)
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(f clause clauses)
                                                  #((top) (top) (top))
                                                  #("i30100"
                                                    "i30101"
                                                    "i30102"))
                                                #(ribcage
                                                  #(e m1 m2)
                                                  #((top) (top) (top))
                                                  #("i30090"
                                                    "i30091"
                                                    "i30092"))
                                                #(ribcage () () ())
                                                #(ribcage
                                                  #(x)
                                                  #((top))
                                                  #("i30087")))
                                               (hygiene guile)))
                                           any
                                           .
                                           each-any))))
                                 (if #{tmp 30202}#
                                   (@apply
                                     (lambda (#{e1 30206}# #{e2 30207}#)
                                       (cons '#(syntax-object
                                                begin
                                                ((top)
                                                 #(ribcage
                                                   #(e1 e2)
                                                   #((top) (top))
                                                   #("i30109" "i30110"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(f clause clauses)
                                                   #((top) (top) (top))
                                                   #("i30100"
                                                     "i30101"
                                                     "i30102"))
                                                 #(ribcage
                                                   #(e m1 m2)
                                                   #((top) (top) (top))
                                                   #("i30090"
                                                     "i30091"
                                                     "i30092"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30087")))
                                                (hygiene guile))
                                             (cons #{e1 30206}# #{e2 30207}#)))
                                     #{tmp 30202}#)
                                   (let ((#{tmp 30208}#
                                           ($sc-dispatch
                                             #{clause 30199}#
                                             '(each-any any . each-any))))
                                     (if #{tmp 30208}#
                                       (@apply
                                         (lambda (#{k 30212}#
                                                  #{e1 30213}#
                                                  #{e2 30214}#)
                                           (list '#(syntax-object
                                                    if
                                                    ((top)
                                                     #(ribcage
                                                       #(k e1 e2)
                                                       #((top) (top) (top))
                                                       #("i30115"
                                                         "i30116"
                                                         "i30117"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(f clause clauses)
                                                       #((top) (top) (top))
                                                       #("i30100"
                                                         "i30101"
                                                         "i30102"))
                                                     #(ribcage
                                                       #(e m1 m2)
                                                       #((top) (top) (top))
                                                       #("i30090"
                                                         "i30091"
                                                         "i30092"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30087")))
                                                    (hygiene guile))
                                                 (list '#(syntax-object
                                                          memv
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30115"
                                                               "i30116"
                                                               "i30117"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30100"
                                                               "i30101"
                                                               "i30102"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30090"
                                                               "i30091"
                                                               "i30092"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30087")))
                                                          (hygiene guile))
                                                       '#(syntax-object
                                                          t
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30115"
                                                               "i30116"
                                                               "i30117"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30100"
                                                               "i30101"
                                                               "i30102"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30090"
                                                               "i30091"
                                                               "i30092"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30087")))
                                                          (hygiene guile))
                                                       (list '#(syntax-object
                                                                quote
                                                                ((top)
                                                                 #(ribcage
                                                                   #(k e1 e2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30115"
                                                                     "i30116"
                                                                     "i30117"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(f
                                                                     clause
                                                                     clauses)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30100"
                                                                     "i30101"
                                                                     "i30102"))
                                                                 #(ribcage
                                                                   #(e m1 m2)
                                                                   #((top)
                                                                     (top)
                                                                     (top))
                                                                   #("i30090"
                                                                     "i30091"
                                                                     "i30092"))
                                                                 #(ribcage
                                                                   ()
                                                                   ()
                                                                   ())
                                                                 #(ribcage
                                                                   #(x)
                                                                   #((top))
                                                                   #("i30087")))
                                                                (hygiene
                                                                  guile))
                                                             #{k 30212}#))
                                                 (cons '#(syntax-object
                                                          begin
                                                          ((top)
                                                           #(ribcage
                                                             #(k e1 e2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30115"
                                                               "i30116"
                                                               "i30117"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(f
                                                               clause
                                                               clauses)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30100"
                                                               "i30101"
                                                               "i30102"))
                                                           #(ribcage
                                                             #(e m1 m2)
                                                             #((top)
                                                               (top)
                                                               (top))
                                                             #("i30090"
                                                               "i30091"
                                                               "i30092"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30087")))
                                                          (hygiene guile))
                                                       (cons #{e1 30213}#
                                                             #{e2 30214}#))))
                                         #{tmp 30208}#)
                                       (syntax-violation
                                         'case
                                         "bad clause"
                                         #{x 30141}#
                                         #{clause 30199}#)))))
                               (let ((#{tmp 30222}#
                                       (#{f 30196}#
                                         (car #{clauses 30200}#)
                                         (cdr #{clauses 30200}#))))
                                 (let ((#{tmp 30225}#
                                         ($sc-dispatch
                                           #{clause 30199}#
                                           '(each-any any . each-any))))
                                   (if #{tmp 30225}#
                                     (@apply
                                       (lambda (#{k 30229}#
                                                #{e1 30230}#
                                                #{e2 30231}#)
                                         (list '#(syntax-object
                                                  if
                                                  ((top)
                                                   #(ribcage
                                                     #(k e1 e2)
                                                     #((top) (top) (top))
                                                     #("i30131"
                                                       "i30132"
                                                       "i30133"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(rest)
                                                     #((top))
                                                     #("i30127"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(f clause clauses)
                                                     #((top) (top) (top))
                                                     #("i30100"
                                                       "i30101"
                                                       "i30102"))
                                                   #(ribcage
                                                     #(e m1 m2)
                                                     #((top) (top) (top))
                                                     #("i30090"
                                                       "i30091"
                                                       "i30092"))
                                                   #(ribcage () () ())
                                                   #(ribcage
                                                     #(x)
                                                     #((top))
                                                     #("i30087")))
                                                  (hygiene guile))
                                               (list '#(syntax-object
                                                        memv
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30131"
                                                             "i30132"
                                                             "i30133"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30127"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30100"
                                                             "i30101"
                                                             "i30102"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30090"
                                                             "i30091"
                                                             "i30092"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30087")))
                                                        (hygiene guile))
                                                     '#(syntax-object
                                                        t
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30131"
                                                             "i30132"
                                                             "i30133"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30127"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30100"
                                                             "i30101"
                                                             "i30102"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30090"
                                                             "i30091"
                                                             "i30092"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30087")))
                                                        (hygiene guile))
                                                     (list '#(syntax-object
                                                              quote
                                                              ((top)
                                                               #(ribcage
                                                                 #(k e1 e2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30131"
                                                                   "i30132"
                                                                   "i30133"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(rest)
                                                                 #((top))
                                                                 #("i30127"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(f
                                                                   clause
                                                                   clauses)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30100"
                                                                   "i30101"
                                                                   "i30102"))
                                                               #(ribcage
                                                                 #(e m1 m2)
                                                                 #((top)
                                                                   (top)
                                                                   (top))
                                                                 #("i30090"
                                                                   "i30091"
                                                                   "i30092"))
                                                               #(ribcage
                                                                 ()
                                                                 ()
                                                                 ())
                                                               #(ribcage
                                                                 #(x)
                                                                 #((top))
                                                                 #("i30087")))
                                                              (hygiene guile))
                                                           #{k 30229}#))
                                               (cons '#(syntax-object
                                                        begin
                                                        ((top)
                                                         #(ribcage
                                                           #(k e1 e2)
                                                           #((top) (top) (top))
                                                           #("i30131"
                                                             "i30132"
                                                             "i30133"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(rest)
                                                           #((top))
                                                           #("i30127"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(f clause clauses)
                                                           #((top) (top) (top))
                                                           #("i30100"
                                                             "i30101"
                                                             "i30102"))
                                                         #(ribcage
                                                           #(e m1 m2)
                                                           #((top) (top) (top))
                                                           #("i30090"
                                                             "i30091"
                                                             "i30092"))
                                                         #(ribcage () () ())
                                                         #(ribcage
                                                           #(x)
                                                           #((top))
                                                           #("i30087")))
                                                        (hygiene guile))
                                                     (cons #{e1 30230}#
                                                           #{e2 30231}#))
                                               #{tmp 30222}#))
                                       #{tmp 30225}#)
                                     (syntax-violation
                                       'case
                                       "bad clause"
                                       #{x 30141}#
                                       #{clause 30199}#))))))))
                        (#{f 30196}# #{m1 30148}# #{m2 30149}#))))
                (let ((#{body 30151}# #{tmp 30150}#))
                  (list '#(syntax-object
                           let
                           ((top)
                            #(ribcage () () ())
                            #(ribcage #(body) #((top)) #("i30098"))
                            #(ribcage
                              #(e m1 m2)
                              #((top) (top) (top))
                              #("i30090" "i30091" "i30092"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30087")))
                           (hygiene guile))
                        (list (list '#(syntax-object
                                       t
                                       ((top)
                                        #(ribcage () () ())
                                        #(ribcage #(body) #((top)) #("i30098"))
                                        #(ribcage
                                          #(e m1 m2)
                                          #((top) (top) (top))
                                          #("i30090" "i30091" "i30092"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30087")))
                                       (hygiene guile))
                                    #{e 30147}#))
                        #{body 30151}#))))
            #{tmp 30143}#)
          (syntax-violation
            #f
            "source expression failed to match any pattern"
            #{x 30141}#))))))

(define make-variable-transformer
  (lambda (#{proc 30249}#)
    (if (procedure? #{proc 30249}#)
      (letrec*
        ((#{trans 30250}#
           (lambda (#{x 30256}#)
             (#{proc 30249}# #{x 30256}#))))
        (begin
          (set-procedure-property!
            #{trans 30250}#
            'variable-transformer
            #t)
          #{trans 30250}#))
      (error "variable transformer not a procedure"
             #{proc 30249}#))))

(define identifier-syntax
  (make-syntax-transformer
    'identifier-syntax
    'macro
    (lambda (#{x 30288}#)
      (let ((#{tmp 30290}#
              ($sc-dispatch #{x 30288}# '(_ any))))
        (if #{tmp 30290}#
          (@apply
            (lambda (#{e 30294}#)
              (list '#(syntax-object
                       lambda
                       ((top)
                        #(ribcage #(e) #((top)) #("i30263"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30260")))
                       (hygiene guile))
                    '(#(syntax-object
                        x
                        ((top)
                         #(ribcage #(e) #((top)) #("i30263"))
                         #(ribcage () () ())
                         #(ribcage #(x) #((top)) #("i30260")))
                        (hygiene guile)))
                    '#((#(syntax-object
                          macro-type
                          ((top)
                           #(ribcage #(e) #((top)) #("i30263"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30260")))
                          (hygiene guile))
                        .
                        #(syntax-object
                          identifier-syntax
                          ((top)
                           #(ribcage #(e) #((top)) #("i30263"))
                           #(ribcage () () ())
                           #(ribcage #(x) #((top)) #("i30260")))
                          (hygiene guile))))
                    (list '#(syntax-object
                             syntax-case
                             ((top)
                              #(ribcage #(e) #((top)) #("i30263"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30260")))
                             (hygiene guile))
                          '#(syntax-object
                             x
                             ((top)
                              #(ribcage #(e) #((top)) #("i30263"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30260")))
                             (hygiene guile))
                          '()
                          (list '#(syntax-object
                                   id
                                   ((top)
                                    #(ribcage #(e) #((top)) #("i30263"))
                                    #(ribcage () () ())
                                    #(ribcage #(x) #((top)) #("i30260")))
                                   (hygiene guile))
                                '(#(syntax-object
                                    identifier?
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30263"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile))
                                  (#(syntax-object
                                     syntax
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30263"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30260")))
                                     (hygiene guile))
                                   #(syntax-object
                                     id
                                     ((top)
                                      #(ribcage #(e) #((top)) #("i30263"))
                                      #(ribcage () () ())
                                      #(ribcage #(x) #((top)) #("i30260")))
                                     (hygiene guile))))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30263"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30260")))
                                         (hygiene guile))
                                      #{e 30294}#))
                          (list '(#(syntax-object
                                    _
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30263"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile))
                                  #(syntax-object
                                    x
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30263"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile))
                                  #(syntax-object
                                    ...
                                    ((top)
                                     #(ribcage #(e) #((top)) #("i30263"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile)))
                                (list '#(syntax-object
                                         syntax
                                         ((top)
                                          #(ribcage #(e) #((top)) #("i30263"))
                                          #(ribcage () () ())
                                          #(ribcage #(x) #((top)) #("i30260")))
                                         (hygiene guile))
                                      (cons #{e 30294}#
                                            '(#(syntax-object
                                                x
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30263"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30260")))
                                                (hygiene guile))
                                              #(syntax-object
                                                ...
                                                ((top)
                                                 #(ribcage
                                                   #(e)
                                                   #((top))
                                                   #("i30263"))
                                                 #(ribcage () () ())
                                                 #(ribcage
                                                   #(x)
                                                   #((top))
                                                   #("i30260")))
                                                (hygiene guile)))))))))
            #{tmp 30290}#)
          (let ((#{tmp 30295}#
                  ($sc-dispatch
                    #{x 30288}#
                    '(_ (any any)
                        ((#(free-id
                            #(syntax-object
                              set!
                              ((top)
                               #(ribcage () () ())
                               #(ribcage #(x) #((top)) #("i30260")))
                              (hygiene guile)))
                          any
                          any)
                         any)))))
            (if (if #{tmp 30295}#
                  (@apply
                    (lambda (#{id 30299}#
                             #{exp1 30300}#
                             #{var 30301}#
                             #{val 30302}#
                             #{exp2 30303}#)
                      (if (identifier? #{id 30299}#)
                        (identifier? #{var 30301}#)
                        #f))
                    #{tmp 30295}#)
                  #f)
              (@apply
                (lambda (#{id 30304}#
                         #{exp1 30305}#
                         #{var 30306}#
                         #{val 30307}#
                         #{exp2 30308}#)
                  (list '#(syntax-object
                           make-variable-transformer
                           ((top)
                            #(ribcage
                              #(id exp1 var val exp2)
                              #((top) (top) (top) (top) (top))
                              #("i30278" "i30279" "i30280" "i30281" "i30282"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30260")))
                           (hygiene guile))
                        (list '#(syntax-object
                                 lambda
                                 ((top)
                                  #(ribcage
                                    #(id exp1 var val exp2)
                                    #((top) (top) (top) (top) (top))
                                    #("i30278"
                                      "i30279"
                                      "i30280"
                                      "i30281"
                                      "i30282"))
                                  #(ribcage () () ())
                                  #(ribcage #(x) #((top)) #("i30260")))
                                 (hygiene guile))
                              '(#(syntax-object
                                  x
                                  ((top)
                                   #(ribcage
                                     #(id exp1 var val exp2)
                                     #((top) (top) (top) (top) (top))
                                     #("i30278"
                                       "i30279"
                                       "i30280"
                                       "i30281"
                                       "i30282"))
                                   #(ribcage () () ())
                                   #(ribcage #(x) #((top)) #("i30260")))
                                  (hygiene guile)))
                              '#((#(syntax-object
                                    macro-type
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30278"
                                         "i30279"
                                         "i30280"
                                         "i30281"
                                         "i30282"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile))
                                  .
                                  #(syntax-object
                                    variable-transformer
                                    ((top)
                                     #(ribcage
                                       #(id exp1 var val exp2)
                                       #((top) (top) (top) (top) (top))
                                       #("i30278"
                                         "i30279"
                                         "i30280"
                                         "i30281"
                                         "i30282"))
                                     #(ribcage () () ())
                                     #(ribcage #(x) #((top)) #("i30260")))
                                    (hygiene guile))))
                              (list '#(syntax-object
                                       syntax-case
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30278"
                                            "i30279"
                                            "i30280"
                                            "i30281"
                                            "i30282"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30260")))
                                       (hygiene guile))
                                    '#(syntax-object
                                       x
                                       ((top)
                                        #(ribcage
                                          #(id exp1 var val exp2)
                                          #((top) (top) (top) (top) (top))
                                          #("i30278"
                                            "i30279"
                                            "i30280"
                                            "i30281"
                                            "i30282"))
                                        #(ribcage () () ())
                                        #(ribcage #(x) #((top)) #("i30260")))
                                       (hygiene guile))
                                    '(#(syntax-object
                                        set!
                                        ((top)
                                         #(ribcage
                                           #(id exp1 var val exp2)
                                           #((top) (top) (top) (top) (top))
                                           #("i30278"
                                             "i30279"
                                             "i30280"
                                             "i30281"
                                             "i30282"))
                                         #(ribcage () () ())
                                         #(ribcage #(x) #((top)) #("i30260")))
                                        (hygiene guile)))
                                    (list (list '#(syntax-object
                                                   set!
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30278"
                                                        "i30279"
                                                        "i30280"
                                                        "i30281"
                                                        "i30282"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30260")))
                                                   (hygiene guile))
                                                #{var 30306}#
                                                #{val 30307}#)
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30278"
                                                        "i30279"
                                                        "i30280"
                                                        "i30281"
                                                        "i30282"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30260")))
                                                   (hygiene guile))
                                                #{exp2 30308}#))
                                    (list (cons #{id 30304}#
                                                '(#(syntax-object
                                                    x
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30278"
                                                         "i30279"
                                                         "i30280"
                                                         "i30281"
                                                         "i30282"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30260")))
                                                    (hygiene guile))
                                                  #(syntax-object
                                                    ...
                                                    ((top)
                                                     #(ribcage
                                                       #(id exp1 var val exp2)
                                                       #((top)
                                                         (top)
                                                         (top)
                                                         (top)
                                                         (top))
                                                       #("i30278"
                                                         "i30279"
                                                         "i30280"
                                                         "i30281"
                                                         "i30282"))
                                                     #(ribcage () () ())
                                                     #(ribcage
                                                       #(x)
                                                       #((top))
                                                       #("i30260")))
                                                    (hygiene guile))))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30278"
                                                        "i30279"
                                                        "i30280"
                                                        "i30281"
                                                        "i30282"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30260")))
                                                   (hygiene guile))
                                                (cons #{exp1 30305}#
                                                      '(#(syntax-object
                                                          x
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30278"
                                                               "i30279"
                                                               "i30280"
                                                               "i30281"
                                                               "i30282"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30260")))
                                                          (hygiene guile))
                                                        #(syntax-object
                                                          ...
                                                          ((top)
                                                           #(ribcage
                                                             #(id
                                                               exp1
                                                               var
                                                               val
                                                               exp2)
                                                             #((top)
                                                               (top)
                                                               (top)
                                                               (top)
                                                               (top))
                                                             #("i30278"
                                                               "i30279"
                                                               "i30280"
                                                               "i30281"
                                                               "i30282"))
                                                           #(ribcage () () ())
                                                           #(ribcage
                                                             #(x)
                                                             #((top))
                                                             #("i30260")))
                                                          (hygiene guile))))))
                                    (list #{id 30304}#
                                          (list '#(syntax-object
                                                   identifier?
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30278"
                                                        "i30279"
                                                        "i30280"
                                                        "i30281"
                                                        "i30282"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30260")))
                                                   (hygiene guile))
                                                (list '#(syntax-object
                                                         syntax
                                                         ((top)
                                                          #(ribcage
                                                            #(id
                                                              exp1
                                                              var
                                                              val
                                                              exp2)
                                                            #((top)
                                                              (top)
                                                              (top)
                                                              (top)
                                                              (top))
                                                            #("i30278"
                                                              "i30279"
                                                              "i30280"
                                                              "i30281"
                                                              "i30282"))
                                                          #(ribcage () () ())
                                                          #(ribcage
                                                            #(x)
                                                            #((top))
                                                            #("i30260")))
                                                         (hygiene guile))
                                                      #{id 30304}#))
                                          (list '#(syntax-object
                                                   syntax
                                                   ((top)
                                                    #(ribcage
                                                      #(id exp1 var val exp2)
                                                      #((top)
                                                        (top)
                                                        (top)
                                                        (top)
                                                        (top))
                                                      #("i30278"
                                                        "i30279"
                                                        "i30280"
                                                        "i30281"
                                                        "i30282"))
                                                    #(ribcage () () ())
                                                    #(ribcage
                                                      #(x)
                                                      #((top))
                                                      #("i30260")))
                                                   (hygiene guile))
                                                #{exp1 30305}#))))))
                #{tmp 30295}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30288}#))))))))

(define define*
  (make-syntax-transformer
    'define*
    'macro
    (lambda (#{x 30340}#)
      (let ((#{tmp 30342}#
              ($sc-dispatch
                #{x 30340}#
                '(_ (any . any) any . each-any))))
        (if #{tmp 30342}#
          (@apply
            (lambda (#{id 30346}#
                     #{args 30347}#
                     #{b0 30348}#
                     #{b1 30349}#)
              (list '#(syntax-object
                       define
                       ((top)
                        #(ribcage
                          #(id args b0 b1)
                          #((top) (top) (top) (top))
                          #("i30322" "i30323" "i30324" "i30325"))
                        #(ribcage () () ())
                        #(ribcage #(x) #((top)) #("i30319")))
                       (hygiene guile))
                    #{id 30346}#
                    (cons '#(syntax-object
                             lambda*
                             ((top)
                              #(ribcage
                                #(id args b0 b1)
                                #((top) (top) (top) (top))
                                #("i30322" "i30323" "i30324" "i30325"))
                              #(ribcage () () ())
                              #(ribcage #(x) #((top)) #("i30319")))
                             (hygiene guile))
                          (cons #{args 30347}#
                                (cons #{b0 30348}# #{b1 30349}#)))))
            #{tmp 30342}#)
          (let ((#{tmp 30350}#
                  ($sc-dispatch #{x 30340}# '(_ any any))))
            (if (if #{tmp 30350}#
                  (@apply
                    (lambda (#{id 30354}# #{val 30355}#)
                      (identifier?
                        '#(syntax-object
                           x
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30332" "i30333"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30319")))
                           (hygiene guile))))
                    #{tmp 30350}#)
                  #f)
              (@apply
                (lambda (#{id 30356}# #{val 30357}#)
                  (list '#(syntax-object
                           define
                           ((top)
                            #(ribcage
                              #(id val)
                              #((top) (top))
                              #("i30336" "i30337"))
                            #(ribcage () () ())
                            #(ribcage #(x) #((top)) #("i30319")))
                           (hygiene guile))
                        #{id 30356}#
                        #{val 30357}#))
                #{tmp 30350}#)
              (syntax-violation
                #f
                "source expression failed to match any pattern"
                #{x 30340}#))))))))

